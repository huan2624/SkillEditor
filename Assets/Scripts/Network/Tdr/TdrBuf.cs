/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* creation time: Tue Mar 04 16:02:18 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Net;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace tsf4g_tdr_csharp
{


public class TdrWriteBuf
{

    /* private members vars */
    private byte[] beginPtr;
    private Int32 position;
    private Int32 length;

    /* private member function */

    private void _set(ref byte[] ptr, Int32 len)
    {
        beginPtr = ptr;
        position = 0;
        length = 0;

        if (null != beginPtr)
        {
            length = len;
        }
    }

    private void _reset()
    {
        position = 0;
        length = 0;
        beginPtr = null;
    }

    /* construct function */

    public TdrWriteBuf()
    {
        beginPtr = null;
        position = 0;
        length = 0;
    }

    public TdrWriteBuf(ref byte[] ptr, Int32 len)
    {
        _set(ref ptr, len);
    }

    public TdrWriteBuf(Int32 len)
    {
        beginPtr = new byte[len];
        position = 0;
        length = 0;

        if (null != beginPtr)
        {
            length = len;
        }
    }

    /* public function */

    public void reset()
    {
        _reset();
    }

    public void set(ref byte[] ptr, int len)
    {
        _set(ref ptr ,len);
    }

    public Int32 getUsedSize()
    {
        return position;
    }

    public Int32 getTotalSize()
    {
        return length;
    }

    public Int32 getLeftSize()
    {
        return (length - position);
    }

    public byte[] getBeginPtr()
    {
        return beginPtr;
    }

    public TdrError.ErrorType reserve(int gap)
    {
        if (position > length)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (gap > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        position += gap;

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    /* write successively */
    public TdrError.ErrorType writeInt8(sbyte src)
    {
        return writeUInt8((byte)src);
    }

    public TdrError.ErrorType writeUInt8(byte src)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(byte) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        beginPtr[position++] = src;

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeUInt16(UInt16 src)
    {
        return writeInt16((Int16)src);
    }

    public TdrError.ErrorType writeInt16(Int16 src)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int16) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (BitConverter.IsLittleEndian)
        {
            src = IPAddress.HostToNetworkOrder(src);
        }

        byte[] buffer = BitConverter.GetBytes(src);

        for (int i =0; i < buffer.GetLength(0); i++)
        {
            beginPtr[position++] = buffer[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeUInt32(UInt32 src)
    {
        return writeInt32((Int32)src);
    }

    public TdrError.ErrorType writeInt32(Int32 src)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int32) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (BitConverter.IsLittleEndian)
        {
            src = IPAddress.HostToNetworkOrder(src);
        }

        byte[] buffer = BitConverter.GetBytes(src);

        for (int i =0; i < buffer.GetLength(0); i++)
        {
            beginPtr[position++] = buffer[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeUInt64(UInt64 src)
    {
        return writeInt64((Int64)src);
    }

    public TdrError.ErrorType writeInt64(Int64 src)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int64) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (BitConverter.IsLittleEndian)
        {
            src = IPAddress.HostToNetworkOrder(src);
        }

        byte[] buffer = BitConverter.GetBytes(src);

        for (int i =0; i < buffer.GetLength(0); i++)
        {
            beginPtr[position++] = buffer[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeFloat(float src)
    {
        Int32 tmp = BitConverter.ToInt32(BitConverter.GetBytes(src), 0);
        return writeInt32(tmp);
    }

    public TdrError.ErrorType writeDouble(double src)
    {
        Int64 tmp = BitConverter.DoubleToInt64Bits(src);
        return writeInt64(tmp);
    }

    public TdrError.ErrorType writeCString(byte [] src, Int32 count)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (count > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        for (int i = 0; i < count; i++)
        {
            beginPtr[position++] = src[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeWString(Int16 [] src, Int32 count)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if ((2 * count) > (length - position))
        {
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        for (int i = 0; i < count; i++)
        {
            byte[] buffer = BitConverter.GetBytes(src[i]);
            for (int j = 0; j < buffer.GetLength(0); j++ )
            {
                beginPtr[position++] = buffer[j];
            }
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    /* write directly */
    public TdrError.ErrorType writeInt8(sbyte src, int pos)
    {
        return writeUInt8((byte)src, pos);
    }

    public TdrError.ErrorType writeUInt8(byte src, int pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(byte) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        beginPtr[pos] = src;

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeUInt16(UInt16 src, int pos)
    {
        return writeInt16((Int16)src, pos);
    }

    public TdrError.ErrorType writeInt16(Int16 src, int pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int16) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (BitConverter.IsLittleEndian)
        {
            src = IPAddress.HostToNetworkOrder(src);
        }

        byte[] buffer = BitConverter.GetBytes(src);
        for (int i =0; i < buffer.GetLength(0); i++)
        {
            beginPtr[pos + i] = buffer[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeUInt32(UInt32 src, int pos)
    {
        return writeInt32((Int32)src, pos);
    }

    public TdrError.ErrorType writeInt32(Int32 src, int pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int32) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (BitConverter.IsLittleEndian)
        {
            src = IPAddress.HostToNetworkOrder(src);
        }

        byte[] buffer = BitConverter.GetBytes(src);
        for (int i =0; i < buffer.GetLength(0); i++)
        {
            beginPtr[pos + i] = buffer[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeUInt64(UInt64 src, int pos)
    {
        return writeInt64((Int64)src, pos);
    }

    public TdrError.ErrorType writeInt64(Int64 src, int pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int64) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        if (BitConverter.IsLittleEndian)
        {
            src = IPAddress.HostToNetworkOrder(src);
        }

        byte[] buffer = BitConverter.GetBytes(src);
        for (int i =0; i < buffer.GetLength(0); i++)
        {
            beginPtr[pos + i] = buffer[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeFloat(float src, int pos)
    {
        Int32 tmp = BitConverter.ToInt32(BitConverter.GetBytes(src), 0);
        return writeInt32(tmp, pos);
    }

    public TdrError.ErrorType writeDouble(double src, int pos)
    {
        Int64 tmp = BitConverter.DoubleToInt64Bits(src);
        return writeInt64(tmp,pos);
    }

    public TdrError.ErrorType writeCString(byte [] src, Int32 count, Int32 pos)
    {
        if(null == beginPtr || count > src.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (count > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        for (int i = 0; i < count; i++)
        {
            beginPtr[pos + i] = src[i];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType writeWString(Int16 [] src, Int32 count ,Int32 pos)
    {
        if(null == beginPtr || count > src.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if ((2 * count) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        for (int i = 0; i < count; i++)
        {
            byte[] buffer = BitConverter.GetBytes(src[i]);
            for (int j = 0; j < buffer.GetLength(0); j++)
            {
                beginPtr[pos + (2*i +j)] = buffer[j];
            }
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }
}


public class TdrReadBuf
{
    private byte[] beginPtr;
    private Int32 position;
    private Int32 length;
    private bool IsNetEndian;

    public TdrReadBuf()
    {
        length = 0;
        position = 0;
        beginPtr = null;
        IsNetEndian = true;
    }

    public TdrReadBuf(ref TdrWriteBuf writeBuf)
    {
        byte[] ptr = writeBuf.getBeginPtr();
        set(ref ptr, writeBuf.getUsedSize());
    }

    public TdrReadBuf(ref byte[] ptr , Int32 len)
    {
        set(ref ptr, len);
    }

    public void reset()
    {
        length = 0;
        position = 0;
        beginPtr = null;
        IsNetEndian = true;
    }


    public void set(ref byte[] ptr, Int32 len)
    {
        beginPtr = ptr;
        position = 0;
        length = 0;
        IsNetEndian = true;

        if(null != beginPtr)
        {
            length = len;
        }
    }

    public Int32 getUsedSize()
    {
        return position;
    }

    public Int32 getTotalSize()
    {
        return length;
    }

    public Int32 getLeftSize()
    {
        return length - position;
    }

    public void disableEndian()
    {
        IsNetEndian = false;
    }

    /* read successively */

    public TdrError.ErrorType readInt8(ref sbyte dest)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        byte tmp = 0;
        ret = readUInt8(ref tmp);
        dest = (sbyte)tmp;

        return ret;
    }

    public TdrError.ErrorType readUInt8(ref byte dest)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(byte) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = beginPtr[position++];

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readInt16(ref Int16 dest)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int16) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = BitConverter.ToInt16(beginPtr,position);
        position += sizeof(Int16);

        if (IsNetEndian && BitConverter.IsLittleEndian)
        {
            dest = IPAddress.NetworkToHostOrder(dest);
        }
        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readUInt16(ref UInt16 dest)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int16 tmp = 0;
        ret = readInt16(ref tmp);
        dest = (UInt16)tmp;

        return ret;
    }

    public TdrError.ErrorType readInt32(ref Int32 dest)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int32) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = BitConverter.ToInt32(beginPtr,position);
        position += sizeof(Int32);

        if (IsNetEndian && BitConverter.IsLittleEndian)
        {
            dest = IPAddress.NetworkToHostOrder(dest);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readUInt32(ref UInt32 dest)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int32 tmp = 0;
        ret = readInt32(ref tmp);
        dest = (UInt32)tmp;

        return ret;
    }

    public TdrError.ErrorType readInt64(ref Int64 dest)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int64) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = BitConverter.ToInt64(beginPtr,position);
        position += sizeof(Int64);

        if (IsNetEndian && BitConverter.IsLittleEndian)
        {
            dest = IPAddress.NetworkToHostOrder(dest);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readUInt64(ref UInt64 dest)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int64 tmp = 0;
        ret = readInt64(ref tmp);
        dest = (UInt64)tmp;

        return ret;
    }

    public TdrError.ErrorType readFloat(ref float dest)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int32 tmp = 0;
        ret = readInt32(ref tmp);
        dest = BitConverter.ToSingle(BitConverter.GetBytes(tmp), 0);

        return ret;
    }

    public TdrError.ErrorType readDouble(ref double dest)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int64 tmp = 0;
        ret = readInt64(ref tmp);
        dest =BitConverter.Int64BitsToDouble(tmp);

        return ret;
    }

    public TdrError.ErrorType readCString(ref byte[] dest, Int32 count)
    {
        if(null == beginPtr || count > dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (null == dest || 0 == dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (count > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        for (int i = 0; i < count; i++)
        {
            dest[i] = beginPtr[position++];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readWString(ref Int16[] dest, Int32 count)
    {
        if(null == beginPtr || count > dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (null == dest || 0 == dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if ((2 * count) > (length - position))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        for (int i = 0; i < count; i++)
        {
            dest[i] = BitConverter.ToInt16(beginPtr,position);
            position += sizeof(Int16);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    /* read directly */
    public TdrError.ErrorType readInt8(ref sbyte dest, Int32 pos)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        byte tmp = 0;
        ret = readUInt8(ref tmp,pos);
        dest = (sbyte)tmp;

        return ret;
    }

    public TdrError.ErrorType readUInt8(ref byte dest ,Int32 pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(byte) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = beginPtr[pos];

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readInt16(ref Int16 dest, Int32 pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int16) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = BitConverter.ToInt16(beginPtr,pos);

        if (IsNetEndian && BitConverter.IsLittleEndian)
        {
            dest = IPAddress.NetworkToHostOrder(dest);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readUInt16(ref UInt16 dest, Int32 pos)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int16 tmp = 0;
        ret = readInt16(ref tmp,pos);
        dest = (UInt16)tmp;

        return ret;
    }

    public TdrError.ErrorType readInt32(ref Int32 dest, Int32 pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int32) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = BitConverter.ToInt32(beginPtr,pos);

        if (IsNetEndian && BitConverter.IsLittleEndian)
        {
            dest = IPAddress.NetworkToHostOrder(dest);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readUInt32(ref UInt32 dest, Int32 pos)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int32 tmp = 0;
        ret = readInt32(ref tmp,pos);
        dest = (UInt32)tmp;

        return ret;
    }

    public TdrError.ErrorType readInt64(ref Int64 dest, Int32 pos)
    {
        if(null == beginPtr)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (sizeof(Int64) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        dest = BitConverter.ToInt64(beginPtr, pos);

        if (IsNetEndian && BitConverter.IsLittleEndian)
        {
            dest = IPAddress.NetworkToHostOrder(dest);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readUInt64(ref UInt64 dest, Int32 pos)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int64 tmp = 0;
        ret = readInt64(ref tmp,pos);
        dest = (UInt64)tmp;

        return ret;
    }

    public TdrError.ErrorType readFloat(ref float dest, Int32 pos)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int32 tmp = 0;
        ret = readInt32(ref tmp,pos);
        dest = BitConverter.ToSingle(BitConverter.GetBytes(tmp), 0);

        return ret;
    }

    public TdrError.ErrorType readDouble(ref double dest, Int32 pos)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        Int64 tmp = 0;
        ret = readInt64(ref tmp,pos);
        dest =BitConverter.Int64BitsToDouble(tmp);

        return ret;
    }

    public TdrError.ErrorType readCString(ref byte[] dest, Int32 count, Int32 pos)
    {
        if(null == beginPtr || count > dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (null == dest || 0 == dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (count > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        for (int i = 0; i < count; i++)
        {
            dest[i] = beginPtr[pos + count];
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType readWString(ref Int16[] dest, Int32 count, Int32 pos)
    {
        if(null == beginPtr || count > dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if (null == dest || 0 == dest.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
        }

        if ((2 * count) > (length - pos))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
        }

        for (int i = 0; i < count; i++)
        {
            dest[i] = BitConverter.ToInt16(beginPtr,pos + 2 * count);
        }

        return TdrError.ErrorType.TDR_NO_ERROR;
    }

    public TdrError.ErrorType toHexStr(ref char[] buffer,out int usedsize)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        int dataLen = length - position;
        int hexDatLen = dataLen * 2 + 1;

        if(buffer.GetLength(0) < hexDatLen)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            usedsize = 0;
            return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_WRITE;
        }

        string s = "";
        byte[] bArray = new byte[length - position];
        for(int i =0;i<length - position;i++)
        {
            ret = readUInt8(ref bArray[i],position + i);
            if(ret != TdrError.ErrorType.TDR_NO_ERROR)
            {
                usedsize = 0;
                return ret ;
            }

            s += string.Format("{0:x2}",bArray[i]);
        }

        s += string.Format("{0:x}",0x00);
        buffer = s.ToCharArray();
        usedsize = hexDatLen;

        return ret;
    }

    public TdrError.ErrorType toHexStr(ref string buffer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        byte[] bArray = new byte[length - position];
        for(int i =0;i<length - position;i++)
        {
            ret = readUInt8(ref bArray[i],position + i);
            if(ret != TdrError.ErrorType.TDR_NO_ERROR)
            {
            return ret;
            }

            buffer += string.Format("{0:x2}",bArray[i]);
        }

        buffer += string.Format("{0:x}",0x00);

        return ret;
    }

}

public class TdrVisualBuf
{
    private string visualBuf;

    public TdrVisualBuf()
    {
        visualBuf = "";
    }

    public TdrError.ErrorType sprintf(string format , params object[]args)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;
        string str = "";

        try
        {
            str = string.Format(format, args);
        }
        catch (System.ArgumentNullException ex)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            Console.WriteLine("Error: " + ex.Message);
            ret = TdrError.ErrorType.TDR_ERR_ARGUMENT_NULL_EXCEPTION;
        }
        catch(System.FormatException ex)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine(st.GetFrame(i).ToString());
                }
            }
#endif
            Console.WriteLine("Error: " + ex.Message);
            ret = TdrError.ErrorType.TDR_ERR_INVALID_FORMAT;
        }

        if(TdrError.ErrorType.TDR_NO_ERROR == ret)
        {
            visualBuf += str;
        }

        return ret;
    }

    public string getVisualBuf()
    {
        return visualBuf;
    }

}

}
