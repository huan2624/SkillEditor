/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: cc56e8228ca715ecb364f3df759cf5cb */

/* creation time: Tue Mar 04 16:02:18 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{




public class ChatChannelInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwUiChannelID;
    public UInt32 dwUiChannelLevel;
    public UInt32 dwUiChannelCost;

    /* construct methods */
    public ChatChannelInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ChatChannelInfo.CURRVERSION < cutVer)
        {
            cutVer = ChatChannelInfo.CURRVERSION;
        }

        /* check cutversion */
        if (ChatChannelInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwUiChannelID */
        {
            ret = destBuf.writeUInt32(this.dwUiChannelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwUiChannelLevel */
        {
            ret = destBuf.writeUInt32(this.dwUiChannelLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwUiChannelCost */
        {
            ret = destBuf.writeUInt32(this.dwUiChannelCost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ChatChannelInfo.CURRVERSION < cutVer)
        {
            cutVer = ChatChannelInfo.CURRVERSION;
        }

        /* check cutversion */
        if (ChatChannelInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwUiChannelID */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwUiChannelLevel */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwUiChannelCost */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelCost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ChatChannelInfo.CURRVERSION < cutVer)
        {
            cutVer = ChatChannelInfo.CURRVERSION;
        }

        /* check cutversion */
        if (ChatChannelInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.dwUiChannelID */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.dwUiChannelLevel */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.dwUiChannelCost */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelCost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.dwUiChannelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwUiChannelID]", "{0:d}", this.dwUiChannelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwUiChannelLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwUiChannelLevel]", "{0:d}", this.dwUiChannelLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwUiChannelCost */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwUiChannelCost]", "{0:d}", this.dwUiChannelCost);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class UserSelectChannelColor : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwUiColorID;
    public byte[] szSzColorValue;

    /* construct methods */
    public UserSelectChannelColor()
    {
        szSzColorValue = new byte[32];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || UserSelectChannelColor.CURRVERSION < cutVer)
        {
            cutVer = UserSelectChannelColor.CURRVERSION;
        }

        /* check cutversion */
        if (UserSelectChannelColor.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwUiColorID */
        {
            ret = destBuf.writeUInt32(this.dwUiColorID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szSzColorValue */
        {
            /* record sizeinfo position */
            Int32 sizePos4szSzColorValue = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szSzColorValue = destBuf.getUsedSize();

            Int32 realSize4szSzColorValue = TdrTypeUtil.cstrlen(this.szSzColorValue);

            if (realSize4szSzColorValue >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szSzColorValue, realSize4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szSzColorValue */
            Int32 size4szSzColorValue = destBuf.getUsedSize() - beginPos4szSzColorValue;
            ret = destBuf.writeUInt32((UInt32)(size4szSzColorValue), sizePos4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || UserSelectChannelColor.CURRVERSION < cutVer)
        {
            cutVer = UserSelectChannelColor.CURRVERSION;
        }

        /* check cutversion */
        if (UserSelectChannelColor.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwUiColorID */
        {
            ret = srcBuf.readUInt32(ref this.dwUiColorID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szSzColorValue */
        {
            /* get sizeinfo for this.szSzColorValue */
            UInt32 size4szSzColorValue = 0;
            ret = srcBuf.readUInt32(ref size4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szSzColorValue > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szSzColorValue > this.szSzColorValue.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szSzColorValue)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szSzColorValue, (int)size4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szSzColorValue[(int)size4szSzColorValue - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szSzColorValue = TdrTypeUtil.cstrlen(this.szSzColorValue) + 1;
            if (size4szSzColorValue != realSize4szSzColorValue)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || UserSelectChannelColor.CURRVERSION < cutVer)
        {
            cutVer = UserSelectChannelColor.CURRVERSION;
        }

        /* check cutversion */
        if (UserSelectChannelColor.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.dwUiColorID */
        {
            ret = srcBuf.readUInt32(ref this.dwUiColorID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szSzColorValue */
        {
            Int32 size4szSzColorValue = 32;

            /* load */
            ret = srcBuf.readCString(ref this.szSzColorValue, (int)size4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.dwUiColorID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwUiColorID]", "{0:d}", this.dwUiColorID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szSzColorValue */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSzColorValue]", this.szSzColorValue);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class DefaultChannelColor : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwUiChannelID;
    public byte[] szSzColorValue;

    /* construct methods */
    public DefaultChannelColor()
    {
        szSzColorValue = new byte[32];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DefaultChannelColor.CURRVERSION < cutVer)
        {
            cutVer = DefaultChannelColor.CURRVERSION;
        }

        /* check cutversion */
        if (DefaultChannelColor.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwUiChannelID */
        {
            ret = destBuf.writeUInt32(this.dwUiChannelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szSzColorValue */
        {
            /* record sizeinfo position */
            Int32 sizePos4szSzColorValue = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szSzColorValue = destBuf.getUsedSize();

            Int32 realSize4szSzColorValue = TdrTypeUtil.cstrlen(this.szSzColorValue);

            if (realSize4szSzColorValue >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szSzColorValue, realSize4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szSzColorValue */
            Int32 size4szSzColorValue = destBuf.getUsedSize() - beginPos4szSzColorValue;
            ret = destBuf.writeUInt32((UInt32)(size4szSzColorValue), sizePos4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DefaultChannelColor.CURRVERSION < cutVer)
        {
            cutVer = DefaultChannelColor.CURRVERSION;
        }

        /* check cutversion */
        if (DefaultChannelColor.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwUiChannelID */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szSzColorValue */
        {
            /* get sizeinfo for this.szSzColorValue */
            UInt32 size4szSzColorValue = 0;
            ret = srcBuf.readUInt32(ref size4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szSzColorValue > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szSzColorValue > this.szSzColorValue.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szSzColorValue)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szSzColorValue, (int)size4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szSzColorValue[(int)size4szSzColorValue - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szSzColorValue = TdrTypeUtil.cstrlen(this.szSzColorValue) + 1;
            if (size4szSzColorValue != realSize4szSzColorValue)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DefaultChannelColor.CURRVERSION < cutVer)
        {
            cutVer = DefaultChannelColor.CURRVERSION;
        }

        /* check cutversion */
        if (DefaultChannelColor.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.dwUiChannelID */
        {
            ret = srcBuf.readUInt32(ref this.dwUiChannelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szSzColorValue */
        {
            Int32 size4szSzColorValue = 32;

            /* load */
            ret = srcBuf.readCString(ref this.szSzColorValue, (int)size4szSzColorValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.dwUiChannelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwUiChannelID]", "{0:d}", this.dwUiChannelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szSzColorValue */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSzColorValue]", this.szSzColorValue);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
