/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 2b4b2e2e9c8a2bea39a6cf8494773b61 */

/* creation time: Thu Apr 10 18:24:04 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{

//清空接口重复定义 


/* 分享配置 */
public class ShareDataConfig : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 iID;
    public byte[] szTitle;
    public byte[] szContent;
    public byte[] szZoneTypeFlag;
    public byte[] szFriendTypeFlag;
    public byte[] szWXURL;
    public byte[] szQQURL;
    public byte[] szPictureName;
    public byte[] szPictureURL;
    public UInt16 nScreenX;
    public UInt16 nScreenY;
    public UInt16 nScreenW;
    public UInt16 nScreenH;

    /* construct methods */
    public ShareDataConfig()
    {
        szTitle = new byte[64];
        szContent = new byte[512];
        szZoneTypeFlag = new byte[32];
        szFriendTypeFlag = new byte[32];
        szWXURL = new byte[128];
        szQQURL = new byte[128];
        szPictureName = new byte[32];
        szPictureURL = new byte[128];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ShareDataConfig.CURRVERSION < cutVer)
        {
            cutVer = ShareDataConfig.CURRVERSION;
        }

        /* check cutversion */
        if (ShareDataConfig.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeUInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szTitle */
        {
            /* record sizeinfo position */
            Int32 sizePos4szTitle = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szTitle = destBuf.getUsedSize();

            Int32 realSize4szTitle = TdrTypeUtil.cstrlen(this.szTitle);

            if (realSize4szTitle >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szTitle, realSize4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szTitle */
            Int32 size4szTitle = destBuf.getUsedSize() - beginPos4szTitle;
            ret = destBuf.writeUInt32((UInt32)(size4szTitle), sizePos4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szContent */
        {
            /* record sizeinfo position */
            Int32 sizePos4szContent = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szContent = destBuf.getUsedSize();

            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent);

            if (realSize4szContent >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szContent, realSize4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szContent */
            Int32 size4szContent = destBuf.getUsedSize() - beginPos4szContent;
            ret = destBuf.writeUInt32((UInt32)(size4szContent), sizePos4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szZoneTypeFlag */
        {
            /* record sizeinfo position */
            Int32 sizePos4szZoneTypeFlag = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szZoneTypeFlag = destBuf.getUsedSize();

            Int32 realSize4szZoneTypeFlag = TdrTypeUtil.cstrlen(this.szZoneTypeFlag);

            if (realSize4szZoneTypeFlag >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szZoneTypeFlag, realSize4szZoneTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szZoneTypeFlag */
            Int32 size4szZoneTypeFlag = destBuf.getUsedSize() - beginPos4szZoneTypeFlag;
            ret = destBuf.writeUInt32((UInt32)(size4szZoneTypeFlag), sizePos4szZoneTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szFriendTypeFlag */
        {
            /* record sizeinfo position */
            Int32 sizePos4szFriendTypeFlag = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szFriendTypeFlag = destBuf.getUsedSize();

            Int32 realSize4szFriendTypeFlag = TdrTypeUtil.cstrlen(this.szFriendTypeFlag);

            if (realSize4szFriendTypeFlag >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szFriendTypeFlag, realSize4szFriendTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szFriendTypeFlag */
            Int32 size4szFriendTypeFlag = destBuf.getUsedSize() - beginPos4szFriendTypeFlag;
            ret = destBuf.writeUInt32((UInt32)(size4szFriendTypeFlag), sizePos4szFriendTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szWXURL */
        {
            /* record sizeinfo position */
            Int32 sizePos4szWXURL = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szWXURL = destBuf.getUsedSize();

            Int32 realSize4szWXURL = TdrTypeUtil.cstrlen(this.szWXURL);

            if (realSize4szWXURL >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szWXURL, realSize4szWXURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szWXURL */
            Int32 size4szWXURL = destBuf.getUsedSize() - beginPos4szWXURL;
            ret = destBuf.writeUInt32((UInt32)(size4szWXURL), sizePos4szWXURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szQQURL */
        {
            /* record sizeinfo position */
            Int32 sizePos4szQQURL = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szQQURL = destBuf.getUsedSize();

            Int32 realSize4szQQURL = TdrTypeUtil.cstrlen(this.szQQURL);

            if (realSize4szQQURL >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szQQURL, realSize4szQQURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szQQURL */
            Int32 size4szQQURL = destBuf.getUsedSize() - beginPos4szQQURL;
            ret = destBuf.writeUInt32((UInt32)(size4szQQURL), sizePos4szQQURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPictureName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szPictureName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPictureName = destBuf.getUsedSize();

            Int32 realSize4szPictureName = TdrTypeUtil.cstrlen(this.szPictureName);

            if (realSize4szPictureName >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPictureName, realSize4szPictureName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szPictureName */
            Int32 size4szPictureName = destBuf.getUsedSize() - beginPos4szPictureName;
            ret = destBuf.writeUInt32((UInt32)(size4szPictureName), sizePos4szPictureName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPictureURL */
        {
            /* record sizeinfo position */
            Int32 sizePos4szPictureURL = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPictureURL = destBuf.getUsedSize();

            Int32 realSize4szPictureURL = TdrTypeUtil.cstrlen(this.szPictureURL);

            if (realSize4szPictureURL >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPictureURL, realSize4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szPictureURL */
            Int32 size4szPictureURL = destBuf.getUsedSize() - beginPos4szPictureURL;
            ret = destBuf.writeUInt32((UInt32)(size4szPictureURL), sizePos4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.nScreenX */
        {
            ret = destBuf.writeUInt16(this.nScreenX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.nScreenY */
        {
            ret = destBuf.writeUInt16(this.nScreenY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.nScreenW */
        {
            ret = destBuf.writeUInt16(this.nScreenW);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.nScreenH */
        {
            ret = destBuf.writeUInt16(this.nScreenH);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ShareDataConfig.CURRVERSION < cutVer)
        {
            cutVer = ShareDataConfig.CURRVERSION;
        }

        /* check cutversion */
        if (ShareDataConfig.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readUInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szTitle */
        {
            /* get sizeinfo for this.szTitle */
            UInt32 size4szTitle = 0;
            ret = srcBuf.readUInt32(ref size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szTitle > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szTitle > this.szTitle.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szTitle)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szTitle, (int)size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szTitle[(int)size4szTitle - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szTitle = TdrTypeUtil.cstrlen(this.szTitle) + 1;
            if (size4szTitle != realSize4szTitle)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szContent */
        {
            /* get sizeinfo for this.szContent */
            UInt32 size4szContent = 0;
            ret = srcBuf.readUInt32(ref size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szContent > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szContent > this.szContent.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szContent)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szContent[(int)size4szContent - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent) + 1;
            if (size4szContent != realSize4szContent)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szZoneTypeFlag */
        {
            /* get sizeinfo for this.szZoneTypeFlag */
            UInt32 size4szZoneTypeFlag = 0;
            ret = srcBuf.readUInt32(ref size4szZoneTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szZoneTypeFlag > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szZoneTypeFlag > this.szZoneTypeFlag.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szZoneTypeFlag)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szZoneTypeFlag, (int)size4szZoneTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szZoneTypeFlag[(int)size4szZoneTypeFlag - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szZoneTypeFlag = TdrTypeUtil.cstrlen(this.szZoneTypeFlag) + 1;
            if (size4szZoneTypeFlag != realSize4szZoneTypeFlag)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szFriendTypeFlag */
        {
            /* get sizeinfo for this.szFriendTypeFlag */
            UInt32 size4szFriendTypeFlag = 0;
            ret = srcBuf.readUInt32(ref size4szFriendTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szFriendTypeFlag > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szFriendTypeFlag > this.szFriendTypeFlag.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szFriendTypeFlag)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szFriendTypeFlag, (int)size4szFriendTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szFriendTypeFlag[(int)size4szFriendTypeFlag - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szFriendTypeFlag = TdrTypeUtil.cstrlen(this.szFriendTypeFlag) + 1;
            if (size4szFriendTypeFlag != realSize4szFriendTypeFlag)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szWXURL */
        {
            /* get sizeinfo for this.szWXURL */
            UInt32 size4szWXURL = 0;
            ret = srcBuf.readUInt32(ref size4szWXURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szWXURL > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szWXURL > this.szWXURL.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szWXURL)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szWXURL, (int)size4szWXURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szWXURL[(int)size4szWXURL - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szWXURL = TdrTypeUtil.cstrlen(this.szWXURL) + 1;
            if (size4szWXURL != realSize4szWXURL)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szQQURL */
        {
            /* get sizeinfo for this.szQQURL */
            UInt32 size4szQQURL = 0;
            ret = srcBuf.readUInt32(ref size4szQQURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szQQURL > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szQQURL > this.szQQURL.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szQQURL)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szQQURL, (int)size4szQQURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szQQURL[(int)size4szQQURL - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szQQURL = TdrTypeUtil.cstrlen(this.szQQURL) + 1;
            if (size4szQQURL != realSize4szQQURL)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szPictureName */
        {
            /* get sizeinfo for this.szPictureName */
            UInt32 size4szPictureName = 0;
            ret = srcBuf.readUInt32(ref size4szPictureName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPictureName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPictureName > this.szPictureName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPictureName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPictureName, (int)size4szPictureName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPictureName[(int)size4szPictureName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPictureName = TdrTypeUtil.cstrlen(this.szPictureName) + 1;
            if (size4szPictureName != realSize4szPictureName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szPictureURL */
        {
            /* get sizeinfo for this.szPictureURL */
            UInt32 size4szPictureURL = 0;
            ret = srcBuf.readUInt32(ref size4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPictureURL > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPictureURL > this.szPictureURL.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPictureURL)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPictureURL, (int)size4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPictureURL[(int)size4szPictureURL - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPictureURL = TdrTypeUtil.cstrlen(this.szPictureURL) + 1;
            if (size4szPictureURL != realSize4szPictureURL)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.nScreenX */
        {
            ret = srcBuf.readUInt16(ref this.nScreenX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nScreenY */
        {
            ret = srcBuf.readUInt16(ref this.nScreenY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nScreenW */
        {
            ret = srcBuf.readUInt16(ref this.nScreenW);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nScreenH */
        {
            ret = srcBuf.readUInt16(ref this.nScreenH);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ShareDataConfig.CURRVERSION < cutVer)
        {
            cutVer = ShareDataConfig.CURRVERSION;
        }

        /* check cutversion */
        if (ShareDataConfig.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.iID */
        {
            ret = srcBuf.readUInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szTitle */
        {
            Int32 size4szTitle = 64;

            /* load */
            ret = srcBuf.readCString(ref this.szTitle, (int)size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szContent */
        {
            Int32 size4szContent = 512;

            /* load */
            ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szZoneTypeFlag */
        {
            Int32 size4szZoneTypeFlag = 32;

            /* load */
            ret = srcBuf.readCString(ref this.szZoneTypeFlag, (int)size4szZoneTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szFriendTypeFlag */
        {
            Int32 size4szFriendTypeFlag = 32;

            /* load */
            ret = srcBuf.readCString(ref this.szFriendTypeFlag, (int)size4szFriendTypeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szWXURL */
        {
            Int32 size4szWXURL = 128;

            /* load */
            ret = srcBuf.readCString(ref this.szWXURL, (int)size4szWXURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szQQURL */
        {
            Int32 size4szQQURL = 128;

            /* load */
            ret = srcBuf.readCString(ref this.szQQURL, (int)size4szQQURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szPictureName */
        {
            Int32 size4szPictureName = 32;

            /* load */
            ret = srcBuf.readCString(ref this.szPictureName, (int)size4szPictureName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szPictureURL */
        {
            Int32 size4szPictureURL = 128;

            /* load */
            ret = srcBuf.readCString(ref this.szPictureURL, (int)size4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.nScreenX */
        {
            ret = srcBuf.readUInt16(ref this.nScreenX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.nScreenY */
        {
            ret = srcBuf.readUInt16(ref this.nScreenY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.nScreenW */
        {
            ret = srcBuf.readUInt16(ref this.nScreenW);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.nScreenH */
        {
            ret = srcBuf.readUInt16(ref this.nScreenH);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.iID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iID]", "{0:d}", this.iID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szTitle */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szTitle]", this.szTitle);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szContent */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szContent]", this.szContent);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szZoneTypeFlag */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szZoneTypeFlag]", this.szZoneTypeFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szFriendTypeFlag */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szFriendTypeFlag]", this.szFriendTypeFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szWXURL */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szWXURL]", this.szWXURL);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szQQURL */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szQQURL]", this.szQQURL);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szPictureName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPictureName]", this.szPictureName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szPictureURL */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPictureURL]", this.szPictureURL);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.nScreenX */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nScreenX]", "{0:d}", this.nScreenX);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.nScreenY */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nScreenY]", "{0:d}", this.nScreenY);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.nScreenW */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nScreenW]", "{0:d}", this.nScreenW);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.nScreenH */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nScreenH]", "{0:d}", this.nScreenH);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
