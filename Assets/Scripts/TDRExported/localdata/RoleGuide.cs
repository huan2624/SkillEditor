/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 29185501b3b37c45804714d197d335dc */

/* creation time: Mon Jun 15 12:38:51 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public class GuideStep : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Id; // 序列ID
    public byte[] Tip; // 文本提示
    public UInt32 HeadDir; // 头像方位
    public float FingerX; // 手指X偏移
    public float FingerY; // 手指Y偏移
    public float TipX; // 提示框X偏移
    public float TipY; // 提示框Y偏移
    public byte[] GuidePath; // 引导路径
    public UInt32 IndexOfTarget; // 第几个
    public UInt32 OperateType; // 操作类型
    public UInt32 WaitTime; // 等待时间
    public UInt32 IsLock; // 是否锁定界面
    public UInt32 HasValid; // 当前是否为有效操作
    public UInt32 finishLevel; // 是否完成当前关卡
    public UInt32 UIMark; // 当前步所需要的UI编号

    /* construct methods */
    public GuideStep()
    {
        Tip = new byte[256];
        GuidePath = new byte[512];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GuideStep.CURRVERSION < cutVer)
        {
            cutVer = GuideStep.CURRVERSION;
        }

        /* check cutversion */
        if (GuideStep.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Id */
        {
            ret = destBuf.writeUInt32(this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Tip */
        {
            /* record sizeinfo position */
            Int32 sizePos4Tip = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Tip = destBuf.getUsedSize();

            Int32 realSize4Tip = TdrTypeUtil.cstrlen(this.Tip);

            if (realSize4Tip >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Tip, realSize4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Tip */
            Int32 size4Tip = destBuf.getUsedSize() - beginPos4Tip;
            ret = destBuf.writeUInt32((UInt32)(size4Tip), sizePos4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeadDir */
        {
            ret = destBuf.writeUInt32(this.HeadDir);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FingerX */
        {
            ret = destBuf.writeFloat(this.FingerX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FingerY */
        {
            ret = destBuf.writeFloat(this.FingerY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TipX */
        {
            ret = destBuf.writeFloat(this.TipX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TipY */
        {
            ret = destBuf.writeFloat(this.TipY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GuidePath */
        {
            /* record sizeinfo position */
            Int32 sizePos4GuidePath = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4GuidePath = destBuf.getUsedSize();

            Int32 realSize4GuidePath = TdrTypeUtil.cstrlen(this.GuidePath);

            if (realSize4GuidePath >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.GuidePath, realSize4GuidePath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.GuidePath */
            Int32 size4GuidePath = destBuf.getUsedSize() - beginPos4GuidePath;
            ret = destBuf.writeUInt32((UInt32)(size4GuidePath), sizePos4GuidePath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IndexOfTarget */
        {
            ret = destBuf.writeUInt32(this.IndexOfTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OperateType */
        {
            ret = destBuf.writeUInt32(this.OperateType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WaitTime */
        {
            ret = destBuf.writeUInt32(this.WaitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsLock */
        {
            ret = destBuf.writeUInt32(this.IsLock);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HasValid */
        {
            ret = destBuf.writeUInt32(this.HasValid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.finishLevel */
        {
            ret = destBuf.writeUInt32(this.finishLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.UIMark */
        {
            ret = destBuf.writeUInt32(this.UIMark);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GuideStep.CURRVERSION < cutVer)
        {
            cutVer = GuideStep.CURRVERSION;
        }

        /* check cutversion */
        if (GuideStep.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Tip */
        {
            /* get sizeinfo for this.Tip */
            UInt32 size4Tip = 0;
            ret = srcBuf.readUInt32(ref size4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Tip > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Tip > this.Tip.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Tip)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Tip, (int)size4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Tip[(int)size4Tip - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Tip = TdrTypeUtil.cstrlen(this.Tip) + 1;
            if (size4Tip != realSize4Tip)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HeadDir */
        {
            ret = srcBuf.readUInt32(ref this.HeadDir);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FingerX */
        {
            ret = srcBuf.readFloat(ref this.FingerX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FingerY */
        {
            ret = srcBuf.readFloat(ref this.FingerY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TipX */
        {
            ret = srcBuf.readFloat(ref this.TipX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TipY */
        {
            ret = srcBuf.readFloat(ref this.TipY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GuidePath */
        {
            /* get sizeinfo for this.GuidePath */
            UInt32 size4GuidePath = 0;
            ret = srcBuf.readUInt32(ref size4GuidePath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4GuidePath > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4GuidePath > this.GuidePath.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4GuidePath)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.GuidePath, (int)size4GuidePath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.GuidePath[(int)size4GuidePath - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4GuidePath = TdrTypeUtil.cstrlen(this.GuidePath) + 1;
            if (size4GuidePath != realSize4GuidePath)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.IndexOfTarget */
        {
            ret = srcBuf.readUInt32(ref this.IndexOfTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OperateType */
        {
            ret = srcBuf.readUInt32(ref this.OperateType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WaitTime */
        {
            ret = srcBuf.readUInt32(ref this.WaitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsLock */
        {
            ret = srcBuf.readUInt32(ref this.IsLock);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HasValid */
        {
            ret = srcBuf.readUInt32(ref this.HasValid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.finishLevel */
        {
            ret = srcBuf.readUInt32(ref this.finishLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UIMark */
        {
            ret = srcBuf.readUInt32(ref this.UIMark);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GuideStep.CURRVERSION < cutVer)
        {
            cutVer = GuideStep.CURRVERSION;
        }

        /* check cutversion */
        if (GuideStep.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Tip */
        {
            Int32 size4Tip = 256;

            /* load */
            ret = srcBuf.readCString(ref this.Tip, (int)size4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HeadDir */
        {
            ret = srcBuf.readUInt32(ref this.HeadDir);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FingerX */
        {
            ret = srcBuf.readFloat(ref this.FingerX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FingerY */
        {
            ret = srcBuf.readFloat(ref this.FingerY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TipX */
        {
            ret = srcBuf.readFloat(ref this.TipX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TipY */
        {
            ret = srcBuf.readFloat(ref this.TipY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GuidePath */
        {
            Int32 size4GuidePath = 512;

            /* load */
            ret = srcBuf.readCString(ref this.GuidePath, (int)size4GuidePath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.IndexOfTarget */
        {
            ret = srcBuf.readUInt32(ref this.IndexOfTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OperateType */
        {
            ret = srcBuf.readUInt32(ref this.OperateType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WaitTime */
        {
            ret = srcBuf.readUInt32(ref this.WaitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsLock */
        {
            ret = srcBuf.readUInt32(ref this.IsLock);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HasValid */
        {
            ret = srcBuf.readUInt32(ref this.HasValid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.finishLevel */
        {
            ret = srcBuf.readUInt32(ref this.finishLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.UIMark */
        {
            ret = srcBuf.readUInt32(ref this.UIMark);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Id */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Id]", "{0:d}", this.Id);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Tip */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Tip]", this.Tip);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeadDir */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeadDir]", "{0:d}", this.HeadDir);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FingerX */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FingerX]", "{0:g}", this.FingerX);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FingerY */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FingerY]", "{0:g}", this.FingerY);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TipX */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TipX]", "{0:g}", this.TipX);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TipY */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TipY]", "{0:g}", this.TipY);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GuidePath */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[GuidePath]", this.GuidePath);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IndexOfTarget */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IndexOfTarget]", "{0:d}", this.IndexOfTarget);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OperateType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OperateType]", "{0:d}", this.OperateType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WaitTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WaitTime]", "{0:d}", this.WaitTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsLock */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsLock]", "{0:d}", this.IsLock);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HasValid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HasValid]", "{0:d}", this.HasValid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.finishLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[finishLevel]", "{0:d}", this.finishLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.UIMark */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[UIMark]", "{0:d}", this.UIMark);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class GuideNode : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Id; // 序列ID
    public UInt32 Condition; // 引导条件
    public UInt32 Param; // 参数
    public UInt32 Param2; // 第二个参数
    public UInt32 Constraint; // 0是强制引导。1是非强制引导
    public byte[] Steps; // 步骤
    public byte[] SubstitutionSteps; // 替补步骤
    public byte[] Tip; // 提示文字

    /* construct methods */
    public GuideNode()
    {
        Steps = new byte[512];
        SubstitutionSteps = new byte[512];
        Tip = new byte[128];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GuideNode.CURRVERSION < cutVer)
        {
            cutVer = GuideNode.CURRVERSION;
        }

        /* check cutversion */
        if (GuideNode.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Id */
        {
            ret = destBuf.writeUInt32(this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Condition */
        {
            ret = destBuf.writeUInt32(this.Condition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Param */
        {
            ret = destBuf.writeUInt32(this.Param);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Param2 */
        {
            ret = destBuf.writeUInt32(this.Param2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Constraint */
        {
            ret = destBuf.writeUInt32(this.Constraint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Steps */
        {
            /* record sizeinfo position */
            Int32 sizePos4Steps = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Steps = destBuf.getUsedSize();

            Int32 realSize4Steps = TdrTypeUtil.cstrlen(this.Steps);

            if (realSize4Steps >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Steps, realSize4Steps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Steps */
            Int32 size4Steps = destBuf.getUsedSize() - beginPos4Steps;
            ret = destBuf.writeUInt32((UInt32)(size4Steps), sizePos4Steps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SubstitutionSteps */
        {
            /* record sizeinfo position */
            Int32 sizePos4SubstitutionSteps = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4SubstitutionSteps = destBuf.getUsedSize();

            Int32 realSize4SubstitutionSteps = TdrTypeUtil.cstrlen(this.SubstitutionSteps);

            if (realSize4SubstitutionSteps >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.SubstitutionSteps, realSize4SubstitutionSteps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.SubstitutionSteps */
            Int32 size4SubstitutionSteps = destBuf.getUsedSize() - beginPos4SubstitutionSteps;
            ret = destBuf.writeUInt32((UInt32)(size4SubstitutionSteps), sizePos4SubstitutionSteps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Tip */
        {
            /* record sizeinfo position */
            Int32 sizePos4Tip = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Tip = destBuf.getUsedSize();

            Int32 realSize4Tip = TdrTypeUtil.cstrlen(this.Tip);

            if (realSize4Tip >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Tip, realSize4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Tip */
            Int32 size4Tip = destBuf.getUsedSize() - beginPos4Tip;
            ret = destBuf.writeUInt32((UInt32)(size4Tip), sizePos4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GuideNode.CURRVERSION < cutVer)
        {
            cutVer = GuideNode.CURRVERSION;
        }

        /* check cutversion */
        if (GuideNode.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Condition */
        {
            ret = srcBuf.readUInt32(ref this.Condition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Param */
        {
            ret = srcBuf.readUInt32(ref this.Param);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Param2 */
        {
            ret = srcBuf.readUInt32(ref this.Param2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Constraint */
        {
            ret = srcBuf.readUInt32(ref this.Constraint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Steps */
        {
            /* get sizeinfo for this.Steps */
            UInt32 size4Steps = 0;
            ret = srcBuf.readUInt32(ref size4Steps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Steps > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Steps > this.Steps.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Steps)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Steps, (int)size4Steps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Steps[(int)size4Steps - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Steps = TdrTypeUtil.cstrlen(this.Steps) + 1;
            if (size4Steps != realSize4Steps)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.SubstitutionSteps */
        {
            /* get sizeinfo for this.SubstitutionSteps */
            UInt32 size4SubstitutionSteps = 0;
            ret = srcBuf.readUInt32(ref size4SubstitutionSteps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4SubstitutionSteps > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4SubstitutionSteps > this.SubstitutionSteps.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4SubstitutionSteps)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.SubstitutionSteps, (int)size4SubstitutionSteps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.SubstitutionSteps[(int)size4SubstitutionSteps - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4SubstitutionSteps = TdrTypeUtil.cstrlen(this.SubstitutionSteps) + 1;
            if (size4SubstitutionSteps != realSize4SubstitutionSteps)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Tip */
        {
            /* get sizeinfo for this.Tip */
            UInt32 size4Tip = 0;
            ret = srcBuf.readUInt32(ref size4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Tip > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Tip > this.Tip.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Tip)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Tip, (int)size4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Tip[(int)size4Tip - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Tip = TdrTypeUtil.cstrlen(this.Tip) + 1;
            if (size4Tip != realSize4Tip)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GuideNode.CURRVERSION < cutVer)
        {
            cutVer = GuideNode.CURRVERSION;
        }

        /* check cutversion */
        if (GuideNode.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Condition */
        {
            ret = srcBuf.readUInt32(ref this.Condition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Param */
        {
            ret = srcBuf.readUInt32(ref this.Param);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Param2 */
        {
            ret = srcBuf.readUInt32(ref this.Param2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Constraint */
        {
            ret = srcBuf.readUInt32(ref this.Constraint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Steps */
        {
            Int32 size4Steps = 512;

            /* load */
            ret = srcBuf.readCString(ref this.Steps, (int)size4Steps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.SubstitutionSteps */
        {
            Int32 size4SubstitutionSteps = 512;

            /* load */
            ret = srcBuf.readCString(ref this.SubstitutionSteps, (int)size4SubstitutionSteps);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Tip */
        {
            Int32 size4Tip = 128;

            /* load */
            ret = srcBuf.readCString(ref this.Tip, (int)size4Tip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Id */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Id]", "{0:d}", this.Id);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Condition */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Condition]", "{0:d}", this.Condition);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Param */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Param]", "{0:d}", this.Param);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Param2 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Param2]", "{0:d}", this.Param2);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Constraint */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Constraint]", "{0:d}", this.Constraint);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Steps */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Steps]", this.Steps);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SubstitutionSteps */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[SubstitutionSteps]", this.SubstitutionSteps);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Tip */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Tip]", this.Tip);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class OpenFunc : tsf4g_csharp_interface
{
    /* public members */
    public byte[] FuncName; // 功能名称
    public UInt32 FuncId; // 功能ID
    public UInt32 OpenCondition; // 开放条件
    public UInt32 TriggerPamram; // 触发参数
    public byte[] TipText; // 文本提示

    /* construct methods */
    public OpenFunc()
    {
        FuncName = new byte[32];
        TipText = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenFunc.CURRVERSION < cutVer)
        {
            cutVer = OpenFunc.CURRVERSION;
        }

        /* check cutversion */
        if (OpenFunc.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.FuncName */
        {
            /* record sizeinfo position */
            Int32 sizePos4FuncName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4FuncName = destBuf.getUsedSize();

            Int32 realSize4FuncName = TdrTypeUtil.cstrlen(this.FuncName);

            if (realSize4FuncName >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.FuncName, realSize4FuncName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.FuncName */
            Int32 size4FuncName = destBuf.getUsedSize() - beginPos4FuncName;
            ret = destBuf.writeUInt32((UInt32)(size4FuncName), sizePos4FuncName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FuncId */
        {
            ret = destBuf.writeUInt32(this.FuncId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OpenCondition */
        {
            ret = destBuf.writeUInt32(this.OpenCondition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TriggerPamram */
        {
            ret = destBuf.writeUInt32(this.TriggerPamram);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TipText */
        {
            /* record sizeinfo position */
            Int32 sizePos4TipText = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4TipText = destBuf.getUsedSize();

            Int32 realSize4TipText = TdrTypeUtil.cstrlen(this.TipText);

            if (realSize4TipText >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.TipText, realSize4TipText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.TipText */
            Int32 size4TipText = destBuf.getUsedSize() - beginPos4TipText;
            ret = destBuf.writeUInt32((UInt32)(size4TipText), sizePos4TipText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenFunc.CURRVERSION < cutVer)
        {
            cutVer = OpenFunc.CURRVERSION;
        }

        /* check cutversion */
        if (OpenFunc.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.FuncName */
        {
            /* get sizeinfo for this.FuncName */
            UInt32 size4FuncName = 0;
            ret = srcBuf.readUInt32(ref size4FuncName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4FuncName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4FuncName > this.FuncName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4FuncName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.FuncName, (int)size4FuncName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.FuncName[(int)size4FuncName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4FuncName = TdrTypeUtil.cstrlen(this.FuncName) + 1;
            if (size4FuncName != realSize4FuncName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.FuncId */
        {
            ret = srcBuf.readUInt32(ref this.FuncId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OpenCondition */
        {
            ret = srcBuf.readUInt32(ref this.OpenCondition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TriggerPamram */
        {
            ret = srcBuf.readUInt32(ref this.TriggerPamram);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TipText */
        {
            /* get sizeinfo for this.TipText */
            UInt32 size4TipText = 0;
            ret = srcBuf.readUInt32(ref size4TipText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4TipText > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4TipText > this.TipText.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4TipText)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.TipText, (int)size4TipText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.TipText[(int)size4TipText - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4TipText = TdrTypeUtil.cstrlen(this.TipText) + 1;
            if (size4TipText != realSize4TipText)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenFunc.CURRVERSION < cutVer)
        {
            cutVer = OpenFunc.CURRVERSION;
        }

        /* check cutversion */
        if (OpenFunc.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.FuncName */
        {
            Int32 size4FuncName = 32;

            /* load */
            ret = srcBuf.readCString(ref this.FuncName, (int)size4FuncName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.FuncId */
        {
            ret = srcBuf.readUInt32(ref this.FuncId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OpenCondition */
        {
            ret = srcBuf.readUInt32(ref this.OpenCondition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TriggerPamram */
        {
            ret = srcBuf.readUInt32(ref this.TriggerPamram);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TipText */
        {
            Int32 size4TipText = 256;

            /* load */
            ret = srcBuf.readCString(ref this.TipText, (int)size4TipText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.FuncName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[FuncName]", this.FuncName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FuncId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FuncId]", "{0:d}", this.FuncId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OpenCondition */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OpenCondition]", "{0:d}", this.OpenCondition);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TriggerPamram */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TriggerPamram]", "{0:d}", this.TriggerPamram);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TipText */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[TipText]", this.TipText);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
