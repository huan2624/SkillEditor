/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: c024aa6adc908f075bd197ffa1207340 */

/* creation time: Wed Jul 16 17:37:34 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{




public class BuffVisualProperty : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ID;
    public byte[] Effect1;
    public byte[] Effect1Dummy;
    public byte[] Effect2;
    public byte[] Effect2Dummy;
    public byte[] BeginAudio;
    public byte[] EndAudio;
    public UInt32 ActorVisualType;
    public float ActorVisualParam1;
    public float ActorVisualParam2;
    public float ActorVisualParam3;
    public byte ShowInUI;

    /* construct methods */
    public BuffVisualProperty()
    {
        Effect1 = new byte[32];
        Effect1Dummy = new byte[32];
        Effect2 = new byte[32];
        Effect2Dummy = new byte[32];
        BeginAudio = new byte[32];
        EndAudio = new byte[32];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BuffVisualProperty.CURRVERSION < cutVer)
        {
            cutVer = BuffVisualProperty.CURRVERSION;
        }

        /* check cutversion */
        if (BuffVisualProperty.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ID */
        {
            ret = destBuf.writeUInt32(this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Effect1 */
        {
            /* record sizeinfo position */
            Int32 sizePos4Effect1 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Effect1 = destBuf.getUsedSize();

            Int32 realSize4Effect1 = TdrTypeUtil.cstrlen(this.Effect1);

            if (realSize4Effect1 >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Effect1, realSize4Effect1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Effect1 */
            Int32 size4Effect1 = destBuf.getUsedSize() - beginPos4Effect1;
            ret = destBuf.writeUInt32((UInt32)(size4Effect1), sizePos4Effect1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Effect1Dummy */
        {
            /* record sizeinfo position */
            Int32 sizePos4Effect1Dummy = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Effect1Dummy = destBuf.getUsedSize();

            Int32 realSize4Effect1Dummy = TdrTypeUtil.cstrlen(this.Effect1Dummy);

            if (realSize4Effect1Dummy >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Effect1Dummy, realSize4Effect1Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Effect1Dummy */
            Int32 size4Effect1Dummy = destBuf.getUsedSize() - beginPos4Effect1Dummy;
            ret = destBuf.writeUInt32((UInt32)(size4Effect1Dummy), sizePos4Effect1Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Effect2 */
        {
            /* record sizeinfo position */
            Int32 sizePos4Effect2 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Effect2 = destBuf.getUsedSize();

            Int32 realSize4Effect2 = TdrTypeUtil.cstrlen(this.Effect2);

            if (realSize4Effect2 >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Effect2, realSize4Effect2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Effect2 */
            Int32 size4Effect2 = destBuf.getUsedSize() - beginPos4Effect2;
            ret = destBuf.writeUInt32((UInt32)(size4Effect2), sizePos4Effect2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Effect2Dummy */
        {
            /* record sizeinfo position */
            Int32 sizePos4Effect2Dummy = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Effect2Dummy = destBuf.getUsedSize();

            Int32 realSize4Effect2Dummy = TdrTypeUtil.cstrlen(this.Effect2Dummy);

            if (realSize4Effect2Dummy >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Effect2Dummy, realSize4Effect2Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Effect2Dummy */
            Int32 size4Effect2Dummy = destBuf.getUsedSize() - beginPos4Effect2Dummy;
            ret = destBuf.writeUInt32((UInt32)(size4Effect2Dummy), sizePos4Effect2Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BeginAudio */
        {
            /* record sizeinfo position */
            Int32 sizePos4BeginAudio = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4BeginAudio = destBuf.getUsedSize();

            Int32 realSize4BeginAudio = TdrTypeUtil.cstrlen(this.BeginAudio);

            if (realSize4BeginAudio >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.BeginAudio, realSize4BeginAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.BeginAudio */
            Int32 size4BeginAudio = destBuf.getUsedSize() - beginPos4BeginAudio;
            ret = destBuf.writeUInt32((UInt32)(size4BeginAudio), sizePos4BeginAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EndAudio */
        {
            /* record sizeinfo position */
            Int32 sizePos4EndAudio = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EndAudio = destBuf.getUsedSize();

            Int32 realSize4EndAudio = TdrTypeUtil.cstrlen(this.EndAudio);

            if (realSize4EndAudio >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EndAudio, realSize4EndAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EndAudio */
            Int32 size4EndAudio = destBuf.getUsedSize() - beginPos4EndAudio;
            ret = destBuf.writeUInt32((UInt32)(size4EndAudio), sizePos4EndAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActorVisualType */
        {
            ret = destBuf.writeUInt32(this.ActorVisualType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActorVisualParam1 */
        {
            ret = destBuf.writeFloat(this.ActorVisualParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActorVisualParam2 */
        {
            ret = destBuf.writeFloat(this.ActorVisualParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActorVisualParam3 */
        {
            ret = destBuf.writeFloat(this.ActorVisualParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ShowInUI */
        {
            ret = destBuf.writeUInt8(this.ShowInUI);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BuffVisualProperty.CURRVERSION < cutVer)
        {
            cutVer = BuffVisualProperty.CURRVERSION;
        }

        /* check cutversion */
        if (BuffVisualProperty.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Effect1 */
        {
            /* get sizeinfo for this.Effect1 */
            UInt32 size4Effect1 = 0;
            ret = srcBuf.readUInt32(ref size4Effect1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Effect1 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Effect1 > this.Effect1.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Effect1)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Effect1, (int)size4Effect1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Effect1[(int)size4Effect1 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Effect1 = TdrTypeUtil.cstrlen(this.Effect1) + 1;
            if (size4Effect1 != realSize4Effect1)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Effect1Dummy */
        {
            /* get sizeinfo for this.Effect1Dummy */
            UInt32 size4Effect1Dummy = 0;
            ret = srcBuf.readUInt32(ref size4Effect1Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Effect1Dummy > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Effect1Dummy > this.Effect1Dummy.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Effect1Dummy)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Effect1Dummy, (int)size4Effect1Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Effect1Dummy[(int)size4Effect1Dummy - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Effect1Dummy = TdrTypeUtil.cstrlen(this.Effect1Dummy) + 1;
            if (size4Effect1Dummy != realSize4Effect1Dummy)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Effect2 */
        {
            /* get sizeinfo for this.Effect2 */
            UInt32 size4Effect2 = 0;
            ret = srcBuf.readUInt32(ref size4Effect2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Effect2 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Effect2 > this.Effect2.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Effect2)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Effect2, (int)size4Effect2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Effect2[(int)size4Effect2 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Effect2 = TdrTypeUtil.cstrlen(this.Effect2) + 1;
            if (size4Effect2 != realSize4Effect2)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Effect2Dummy */
        {
            /* get sizeinfo for this.Effect2Dummy */
            UInt32 size4Effect2Dummy = 0;
            ret = srcBuf.readUInt32(ref size4Effect2Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Effect2Dummy > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Effect2Dummy > this.Effect2Dummy.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Effect2Dummy)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Effect2Dummy, (int)size4Effect2Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Effect2Dummy[(int)size4Effect2Dummy - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Effect2Dummy = TdrTypeUtil.cstrlen(this.Effect2Dummy) + 1;
            if (size4Effect2Dummy != realSize4Effect2Dummy)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BeginAudio */
        {
            /* get sizeinfo for this.BeginAudio */
            UInt32 size4BeginAudio = 0;
            ret = srcBuf.readUInt32(ref size4BeginAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4BeginAudio > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4BeginAudio > this.BeginAudio.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4BeginAudio)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.BeginAudio, (int)size4BeginAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.BeginAudio[(int)size4BeginAudio - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4BeginAudio = TdrTypeUtil.cstrlen(this.BeginAudio) + 1;
            if (size4BeginAudio != realSize4BeginAudio)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EndAudio */
        {
            /* get sizeinfo for this.EndAudio */
            UInt32 size4EndAudio = 0;
            ret = srcBuf.readUInt32(ref size4EndAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EndAudio > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EndAudio > this.EndAudio.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EndAudio)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EndAudio, (int)size4EndAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EndAudio[(int)size4EndAudio - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EndAudio = TdrTypeUtil.cstrlen(this.EndAudio) + 1;
            if (size4EndAudio != realSize4EndAudio)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ActorVisualType */
        {
            ret = srcBuf.readUInt32(ref this.ActorVisualType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ActorVisualParam1 */
        {
            ret = srcBuf.readFloat(ref this.ActorVisualParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ActorVisualParam2 */
        {
            ret = srcBuf.readFloat(ref this.ActorVisualParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ActorVisualParam3 */
        {
            ret = srcBuf.readFloat(ref this.ActorVisualParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ShowInUI */
        {
            ret = srcBuf.readUInt8(ref this.ShowInUI);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BuffVisualProperty.CURRVERSION < cutVer)
        {
            cutVer = BuffVisualProperty.CURRVERSION;
        }

        /* check cutversion */
        if (BuffVisualProperty.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Effect1 */
        {
            Int32 size4Effect1 = 32;

            /* load */
            ret = srcBuf.readCString(ref this.Effect1, (int)size4Effect1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Effect1Dummy */
        {
            Int32 size4Effect1Dummy = 32;

            /* load */
            ret = srcBuf.readCString(ref this.Effect1Dummy, (int)size4Effect1Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Effect2 */
        {
            Int32 size4Effect2 = 32;

            /* load */
            ret = srcBuf.readCString(ref this.Effect2, (int)size4Effect2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Effect2Dummy */
        {
            Int32 size4Effect2Dummy = 32;

            /* load */
            ret = srcBuf.readCString(ref this.Effect2Dummy, (int)size4Effect2Dummy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BeginAudio */
        {
            Int32 size4BeginAudio = 32;

            /* load */
            ret = srcBuf.readCString(ref this.BeginAudio, (int)size4BeginAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EndAudio */
        {
            Int32 size4EndAudio = 32;

            /* load */
            ret = srcBuf.readCString(ref this.EndAudio, (int)size4EndAudio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ActorVisualType */
        {
            ret = srcBuf.readUInt32(ref this.ActorVisualType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ActorVisualParam1 */
        {
            ret = srcBuf.readFloat(ref this.ActorVisualParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ActorVisualParam2 */
        {
            ret = srcBuf.readFloat(ref this.ActorVisualParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ActorVisualParam3 */
        {
            ret = srcBuf.readFloat(ref this.ActorVisualParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ShowInUI */
        {
            ret = srcBuf.readUInt8(ref this.ShowInUI);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ID]", "{0:d}", this.ID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Effect1 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Effect1]", this.Effect1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Effect1Dummy */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Effect1Dummy]", this.Effect1Dummy);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Effect2 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Effect2]", this.Effect2);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Effect2Dummy */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Effect2Dummy]", this.Effect2Dummy);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BeginAudio */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BeginAudio]", this.BeginAudio);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EndAudio */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EndAudio]", this.EndAudio);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActorVisualType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActorVisualType]", "{0:d}", this.ActorVisualType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActorVisualParam1 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActorVisualParam1]", "{0:g}", this.ActorVisualParam1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActorVisualParam2 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActorVisualParam2]", "{0:g}", this.ActorVisualParam2);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActorVisualParam3 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActorVisualParam3]", "{0:g}", this.ActorVisualParam3);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ShowInUI */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ShowInUI]", "0x{0:x2}", this.ShowInUI);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
