/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: b5222efabe4f3b2f4e0421ee40b710fd */

/* creation time: Mon Jun 08 17:17:59 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


/* 家族成员 */
public class FamilyBasicConf : tsf4g_csharp_interface
{
    /* public members */
    public Int32 Level; // 家族等级
    public UInt32 MaxMemberNum; // 人数上限
    public UInt32 NeedExp; // 经验要求
    public UInt32 WorshipTimeLowerLimit; // 朝拜时间下限
    public UInt32 WorshipTimeUpperLimit; // 朝拜时间上限
    public UInt32 WorshipCostFamilyExploit; // 朝拜消耗的家族功勋
    public UInt32 WorshipGetGiftBag; // 朝拜获得礼包
    public UInt32 WorshipGetFamilyExp; // 朝拜获得家族经验

    /* construct methods */
    public FamilyBasicConf()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBasicConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyBasicConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBasicConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MaxMemberNum */
        {
            ret = destBuf.writeUInt32(this.MaxMemberNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NeedExp */
        {
            ret = destBuf.writeUInt32(this.NeedExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WorshipTimeLowerLimit */
        {
            ret = destBuf.writeUInt32(this.WorshipTimeLowerLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WorshipTimeUpperLimit */
        {
            ret = destBuf.writeUInt32(this.WorshipTimeUpperLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WorshipCostFamilyExploit */
        {
            ret = destBuf.writeUInt32(this.WorshipCostFamilyExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WorshipGetGiftBag */
        {
            ret = destBuf.writeUInt32(this.WorshipGetGiftBag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WorshipGetFamilyExp */
        {
            ret = destBuf.writeUInt32(this.WorshipGetFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBasicConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyBasicConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBasicConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MaxMemberNum */
        {
            ret = srcBuf.readUInt32(ref this.MaxMemberNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NeedExp */
        {
            ret = srcBuf.readUInt32(ref this.NeedExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WorshipTimeLowerLimit */
        {
            ret = srcBuf.readUInt32(ref this.WorshipTimeLowerLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WorshipTimeUpperLimit */
        {
            ret = srcBuf.readUInt32(ref this.WorshipTimeUpperLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WorshipCostFamilyExploit */
        {
            ret = srcBuf.readUInt32(ref this.WorshipCostFamilyExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WorshipGetGiftBag */
        {
            ret = srcBuf.readUInt32(ref this.WorshipGetGiftBag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WorshipGetFamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.WorshipGetFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBasicConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyBasicConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBasicConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MaxMemberNum */
        {
            ret = srcBuf.readUInt32(ref this.MaxMemberNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NeedExp */
        {
            ret = srcBuf.readUInt32(ref this.NeedExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WorshipTimeLowerLimit */
        {
            ret = srcBuf.readUInt32(ref this.WorshipTimeLowerLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WorshipTimeUpperLimit */
        {
            ret = srcBuf.readUInt32(ref this.WorshipTimeUpperLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WorshipCostFamilyExploit */
        {
            ret = srcBuf.readUInt32(ref this.WorshipCostFamilyExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WorshipGetGiftBag */
        {
            ret = srcBuf.readUInt32(ref this.WorshipGetGiftBag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WorshipGetFamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.WorshipGetFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MaxMemberNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MaxMemberNum]", "{0:d}", this.MaxMemberNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NeedExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NeedExp]", "{0:d}", this.NeedExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WorshipTimeLowerLimit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WorshipTimeLowerLimit]", "{0:d}", this.WorshipTimeLowerLimit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WorshipTimeUpperLimit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WorshipTimeUpperLimit]", "{0:d}", this.WorshipTimeUpperLimit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WorshipCostFamilyExploit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WorshipCostFamilyExploit]", "{0:d}", this.WorshipCostFamilyExploit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WorshipGetGiftBag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WorshipGetGiftBag]", "{0:d}", this.WorshipGetGiftBag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WorshipGetFamilyExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WorshipGetFamilyExp]", "{0:d}", this.WorshipGetFamilyExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族建设表 */
public class FamilyBuildConf : tsf4g_csharp_interface
{
    /* public members */
    public Int32 BuildType; // 建设级别
    public byte CostType; // 消耗类型
    public UInt32 CostNum; // 花费
    public UInt32 FamilyExp; // 获得的家族经验
    public UInt32 FamilyExploit; // 获得的家族功勋

    /* construct methods */
    public FamilyBuildConf()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBuildConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyBuildConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBuildConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.BuildType */
        {
            ret = destBuf.writeInt32(this.BuildType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt32(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyExp */
        {
            ret = destBuf.writeUInt32(this.FamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyExploit */
        {
            ret = destBuf.writeUInt32(this.FamilyExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBuildConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyBuildConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBuildConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.BuildType */
        {
            ret = srcBuf.readInt32(ref this.BuildType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt32(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.FamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyExploit */
        {
            ret = srcBuf.readUInt32(ref this.FamilyExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBuildConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyBuildConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBuildConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.BuildType */
        {
            ret = srcBuf.readInt32(ref this.BuildType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt32(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.FamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyExploit */
        {
            ret = srcBuf.readUInt32(ref this.FamilyExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.BuildType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BuildType]", "{0:d}", this.BuildType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyExp]", "{0:d}", this.FamilyExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyExploit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyExploit]", "{0:d}", this.FamilyExploit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族限制表 */
public class FamilyLimitConf : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 VipLevel; // VIP等级
    public UInt32 TeamChallengeCostDiamond; // 战队挑战消耗的钻石
    public UInt32 TeamChallengeNum; // 战队挑战次数

    /* construct methods */
    public FamilyLimitConf()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyLimitConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyLimitConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyLimitConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.VipLevel */
        {
            ret = destBuf.writeUInt32(this.VipLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TeamChallengeCostDiamond */
        {
            ret = destBuf.writeUInt32(this.TeamChallengeCostDiamond);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TeamChallengeNum */
        {
            ret = destBuf.writeUInt32(this.TeamChallengeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyLimitConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyLimitConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyLimitConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.VipLevel */
        {
            ret = srcBuf.readUInt32(ref this.VipLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TeamChallengeCostDiamond */
        {
            ret = srcBuf.readUInt32(ref this.TeamChallengeCostDiamond);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TeamChallengeNum */
        {
            ret = srcBuf.readUInt32(ref this.TeamChallengeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyLimitConf.CURRVERSION < cutVer)
        {
            cutVer = FamilyLimitConf.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyLimitConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.VipLevel */
        {
            ret = srcBuf.readUInt32(ref this.VipLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TeamChallengeCostDiamond */
        {
            ret = srcBuf.readUInt32(ref this.TeamChallengeCostDiamond);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TeamChallengeNum */
        {
            ret = srcBuf.readUInt32(ref this.TeamChallengeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.VipLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[VipLevel]", "{0:d}", this.VipLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TeamChallengeCostDiamond */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TeamChallengeCostDiamond]", "{0:d}", this.TeamChallengeCostDiamond);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TeamChallengeNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TeamChallengeNum]", "{0:d}", this.TeamChallengeNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 创建家族 */
public class CreateFamily : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 AllowCreateLevel; // 允许创建等级
    public byte CostType; // 消耗货币类型
    public UInt32 CostNum; // 消耗货币数量

    /* construct methods */
    public CreateFamily()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CreateFamily.CURRVERSION < cutVer)
        {
            cutVer = CreateFamily.CURRVERSION;
        }

        /* check cutversion */
        if (CreateFamily.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.AllowCreateLevel */
        {
            ret = destBuf.writeUInt16(this.AllowCreateLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt32(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CreateFamily.CURRVERSION < cutVer)
        {
            cutVer = CreateFamily.CURRVERSION;
        }

        /* check cutversion */
        if (CreateFamily.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.AllowCreateLevel */
        {
            ret = srcBuf.readUInt16(ref this.AllowCreateLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt32(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CreateFamily.CURRVERSION < cutVer)
        {
            cutVer = CreateFamily.CURRVERSION;
        }

        /* check cutversion */
        if (CreateFamily.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.AllowCreateLevel */
        {
            ret = srcBuf.readUInt16(ref this.AllowCreateLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt32(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.AllowCreateLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AllowCreateLevel]", "{0:d}", this.AllowCreateLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族BOSS */
public class FamilyBOSS : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 No; // 索引id
    public UInt32 BOSSID; // BOSS Npc ID
    public UInt32 FamilyLevelLimit; // 家族等级限制
    public UInt32 OpenNeedEmblem; // 家族boss开启所需要的徽章
    public UInt32 KillBossGiftid; // 击杀Boss礼包ID
    public float ExploitFactor;
    public float BossPosX; // BossPosX
    public float BossPosY; // BossPosY
    public float BossPosZ; // BossPosZ
    public float BossForwardX; // Boss朝向X
    public float BossForwardY; // Boss朝向Y
    public float BossForwardZ; // Boss朝向Z
    public byte[] BossDes; // Boss描述

    /* construct methods */
    public FamilyBOSS()
    {
        BossDes = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBOSS.CURRVERSION < cutVer)
        {
            cutVer = FamilyBOSS.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBOSS.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.No */
        {
            ret = destBuf.writeUInt32(this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BOSSID */
        {
            ret = destBuf.writeUInt32(this.BOSSID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyLevelLimit */
        {
            ret = destBuf.writeUInt32(this.FamilyLevelLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OpenNeedEmblem */
        {
            ret = destBuf.writeUInt32(this.OpenNeedEmblem);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.KillBossGiftid */
        {
            ret = destBuf.writeUInt32(this.KillBossGiftid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ExploitFactor */
        {
            ret = destBuf.writeFloat(this.ExploitFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossPosX */
        {
            ret = destBuf.writeFloat(this.BossPosX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossPosY */
        {
            ret = destBuf.writeFloat(this.BossPosY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossPosZ */
        {
            ret = destBuf.writeFloat(this.BossPosZ);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossForwardX */
        {
            ret = destBuf.writeFloat(this.BossForwardX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossForwardY */
        {
            ret = destBuf.writeFloat(this.BossForwardY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossForwardZ */
        {
            ret = destBuf.writeFloat(this.BossForwardZ);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossDes */
        {
            /* record sizeinfo position */
            Int32 sizePos4BossDes = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4BossDes = destBuf.getUsedSize();

            Int32 realSize4BossDes = TdrTypeUtil.cstrlen(this.BossDes);

            if (realSize4BossDes >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.BossDes, realSize4BossDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.BossDes */
            Int32 size4BossDes = destBuf.getUsedSize() - beginPos4BossDes;
            ret = destBuf.writeUInt32((UInt32)(size4BossDes), sizePos4BossDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBOSS.CURRVERSION < cutVer)
        {
            cutVer = FamilyBOSS.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBOSS.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.No */
        {
            ret = srcBuf.readUInt32(ref this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BOSSID */
        {
            ret = srcBuf.readUInt32(ref this.BOSSID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyLevelLimit */
        {
            ret = srcBuf.readUInt32(ref this.FamilyLevelLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OpenNeedEmblem */
        {
            ret = srcBuf.readUInt32(ref this.OpenNeedEmblem);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.KillBossGiftid */
        {
            ret = srcBuf.readUInt32(ref this.KillBossGiftid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ExploitFactor */
        {
            ret = srcBuf.readFloat(ref this.ExploitFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossPosX */
        {
            ret = srcBuf.readFloat(ref this.BossPosX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossPosY */
        {
            ret = srcBuf.readFloat(ref this.BossPosY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossPosZ */
        {
            ret = srcBuf.readFloat(ref this.BossPosZ);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossForwardX */
        {
            ret = srcBuf.readFloat(ref this.BossForwardX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossForwardY */
        {
            ret = srcBuf.readFloat(ref this.BossForwardY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossForwardZ */
        {
            ret = srcBuf.readFloat(ref this.BossForwardZ);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossDes */
        {
            /* get sizeinfo for this.BossDes */
            UInt32 size4BossDes = 0;
            ret = srcBuf.readUInt32(ref size4BossDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4BossDes > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4BossDes > this.BossDes.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4BossDes)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.BossDes, (int)size4BossDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.BossDes[(int)size4BossDes - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4BossDes = TdrTypeUtil.cstrlen(this.BossDes) + 1;
            if (size4BossDes != realSize4BossDes)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBOSS.CURRVERSION < cutVer)
        {
            cutVer = FamilyBOSS.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBOSS.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.No */
        {
            ret = srcBuf.readUInt32(ref this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BOSSID */
        {
            ret = srcBuf.readUInt32(ref this.BOSSID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyLevelLimit */
        {
            ret = srcBuf.readUInt32(ref this.FamilyLevelLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OpenNeedEmblem */
        {
            ret = srcBuf.readUInt32(ref this.OpenNeedEmblem);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.KillBossGiftid */
        {
            ret = srcBuf.readUInt32(ref this.KillBossGiftid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ExploitFactor */
        {
            ret = srcBuf.readFloat(ref this.ExploitFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossPosX */
        {
            ret = srcBuf.readFloat(ref this.BossPosX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossPosY */
        {
            ret = srcBuf.readFloat(ref this.BossPosY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossPosZ */
        {
            ret = srcBuf.readFloat(ref this.BossPosZ);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossForwardX */
        {
            ret = srcBuf.readFloat(ref this.BossForwardX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossForwardY */
        {
            ret = srcBuf.readFloat(ref this.BossForwardY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossForwardZ */
        {
            ret = srcBuf.readFloat(ref this.BossForwardZ);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossDes */
        {
            Int32 size4BossDes = 256;

            /* load */
            ret = srcBuf.readCString(ref this.BossDes, (int)size4BossDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.No */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[No]", "{0:d}", this.No);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BOSSID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BOSSID]", "{0:d}", this.BOSSID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyLevelLimit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyLevelLimit]", "{0:d}", this.FamilyLevelLimit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OpenNeedEmblem */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OpenNeedEmblem]", "{0:d}", this.OpenNeedEmblem);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.KillBossGiftid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[KillBossGiftid]", "{0:d}", this.KillBossGiftid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ExploitFactor */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ExploitFactor]", "{0:g}", this.ExploitFactor);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossPosX */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossPosX]", "{0:g}", this.BossPosX);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossPosY */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossPosY]", "{0:g}", this.BossPosY);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossPosZ */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossPosZ]", "{0:g}", this.BossPosZ);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossForwardX */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossForwardX]", "{0:g}", this.BossForwardX);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossForwardY */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossForwardY]", "{0:g}", this.BossForwardY);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossForwardZ */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossForwardZ]", "{0:g}", this.BossForwardZ);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossDes */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BossDes]", this.BossDes);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族战奖励 */
public class FamilyBattleAward : tsf4g_csharp_interface
{
    /* public members */
    public Int32 Level; // 家族等级
    public UInt32 WinGold; // 胜利获得金币
    public UInt32 WinExploit; // 胜利获得功勋
    public UInt32 WinFamilyExp; // 胜利获得家族建设度
    public UInt32 LoseGold; // 失败获得金币
    public UInt32 LoseExploit; // 失败获得功勋
    public UInt32 LoseFamilyExp; // 失败获得家族建设度
    public UInt32 FamilyBaseHP; // 家族基地血量
    public float FamilyBaseDefend; // 家族基地防御力

    /* construct methods */
    public FamilyBattleAward()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleAward.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleAward.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleAward.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WinGold */
        {
            ret = destBuf.writeUInt32(this.WinGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WinExploit */
        {
            ret = destBuf.writeUInt32(this.WinExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WinFamilyExp */
        {
            ret = destBuf.writeUInt32(this.WinFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LoseGold */
        {
            ret = destBuf.writeUInt32(this.LoseGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LoseExploit */
        {
            ret = destBuf.writeUInt32(this.LoseExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LoseFamilyExp */
        {
            ret = destBuf.writeUInt32(this.LoseFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyBaseHP */
        {
            ret = destBuf.writeUInt32(this.FamilyBaseHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyBaseDefend */
        {
            ret = destBuf.writeFloat(this.FamilyBaseDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleAward.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleAward.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleAward.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WinGold */
        {
            ret = srcBuf.readUInt32(ref this.WinGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WinExploit */
        {
            ret = srcBuf.readUInt32(ref this.WinExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WinFamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.WinFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LoseGold */
        {
            ret = srcBuf.readUInt32(ref this.LoseGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LoseExploit */
        {
            ret = srcBuf.readUInt32(ref this.LoseExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LoseFamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.LoseFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyBaseHP */
        {
            ret = srcBuf.readUInt32(ref this.FamilyBaseHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyBaseDefend */
        {
            ret = srcBuf.readFloat(ref this.FamilyBaseDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleAward.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleAward.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleAward.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WinGold */
        {
            ret = srcBuf.readUInt32(ref this.WinGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WinExploit */
        {
            ret = srcBuf.readUInt32(ref this.WinExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WinFamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.WinFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LoseGold */
        {
            ret = srcBuf.readUInt32(ref this.LoseGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LoseExploit */
        {
            ret = srcBuf.readUInt32(ref this.LoseExploit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LoseFamilyExp */
        {
            ret = srcBuf.readUInt32(ref this.LoseFamilyExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyBaseHP */
        {
            ret = srcBuf.readUInt32(ref this.FamilyBaseHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyBaseDefend */
        {
            ret = srcBuf.readFloat(ref this.FamilyBaseDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WinGold */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WinGold]", "{0:d}", this.WinGold);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WinExploit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WinExploit]", "{0:d}", this.WinExploit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WinFamilyExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WinFamilyExp]", "{0:d}", this.WinFamilyExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LoseGold */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LoseGold]", "{0:d}", this.LoseGold);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LoseExploit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LoseExploit]", "{0:d}", this.LoseExploit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LoseFamilyExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LoseFamilyExp]", "{0:d}", this.LoseFamilyExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyBaseHP */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyBaseHP]", "{0:d}", this.FamilyBaseHP);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyBaseDefend */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyBaseDefend]", "{0:g}", this.FamilyBaseDefend);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族战属性加成 */
public class FamilyBattleAttrAdd : tsf4g_csharp_interface
{
    /* public members */
    public byte AttackerHeroType; // 攻击英雄类型
    public byte AttackedHeroType; // 被攻击英雄类型
    public float Multiple; // 加成比例

    /* construct methods */
    public FamilyBattleAttrAdd()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleAttrAdd.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleAttrAdd.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleAttrAdd.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.AttackerHeroType */
        {
            ret = destBuf.writeUInt8(this.AttackerHeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackedHeroType */
        {
            ret = destBuf.writeUInt8(this.AttackedHeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Multiple */
        {
            ret = destBuf.writeFloat(this.Multiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleAttrAdd.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleAttrAdd.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleAttrAdd.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.AttackerHeroType */
        {
            ret = srcBuf.readUInt8(ref this.AttackerHeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackedHeroType */
        {
            ret = srcBuf.readUInt8(ref this.AttackedHeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Multiple */
        {
            ret = srcBuf.readFloat(ref this.Multiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleAttrAdd.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleAttrAdd.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleAttrAdd.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.AttackerHeroType */
        {
            ret = srcBuf.readUInt8(ref this.AttackerHeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackedHeroType */
        {
            ret = srcBuf.readUInt8(ref this.AttackedHeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Multiple */
        {
            ret = srcBuf.readFloat(ref this.Multiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.AttackerHeroType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackerHeroType]", "0x{0:x2}", this.AttackerHeroType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackedHeroType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackedHeroType]", "0x{0:x2}", this.AttackedHeroType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Multiple */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Multiple]", "{0:g}", this.Multiple);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族战时间 */
public class FamilyBattleTime : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Seq; // 序号
    public float UpRouteTime; // 上路时间
    public float MiddleRouteTime; // 中路时间
    public float DownRouteTime; // 下路时间
    public float AttackHeroOnce; // 单次攻击英雄时间
    public float AttackBaseOnce; // 单次攻击基地时间

    /* construct methods */
    public FamilyBattleTime()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Seq */
        {
            ret = destBuf.writeUInt32(this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.UpRouteTime */
        {
            ret = destBuf.writeFloat(this.UpRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MiddleRouteTime */
        {
            ret = destBuf.writeFloat(this.MiddleRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DownRouteTime */
        {
            ret = destBuf.writeFloat(this.DownRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackHeroOnce */
        {
            ret = destBuf.writeFloat(this.AttackHeroOnce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackBaseOnce */
        {
            ret = destBuf.writeFloat(this.AttackBaseOnce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Seq */
        {
            ret = srcBuf.readUInt32(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UpRouteTime */
        {
            ret = srcBuf.readFloat(ref this.UpRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MiddleRouteTime */
        {
            ret = srcBuf.readFloat(ref this.MiddleRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DownRouteTime */
        {
            ret = srcBuf.readFloat(ref this.DownRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackHeroOnce */
        {
            ret = srcBuf.readFloat(ref this.AttackHeroOnce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackBaseOnce */
        {
            ret = srcBuf.readFloat(ref this.AttackBaseOnce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyBattleTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyBattleTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyBattleTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Seq */
        {
            ret = srcBuf.readUInt32(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.UpRouteTime */
        {
            ret = srcBuf.readFloat(ref this.UpRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MiddleRouteTime */
        {
            ret = srcBuf.readFloat(ref this.MiddleRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DownRouteTime */
        {
            ret = srcBuf.readFloat(ref this.DownRouteTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackHeroOnce */
        {
            ret = srcBuf.readFloat(ref this.AttackHeroOnce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackBaseOnce */
        {
            ret = srcBuf.readFloat(ref this.AttackBaseOnce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Seq */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Seq]", "{0:d}", this.Seq);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.UpRouteTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[UpRouteTime]", "{0:g}", this.UpRouteTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MiddleRouteTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MiddleRouteTime]", "{0:g}", this.MiddleRouteTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DownRouteTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DownRouteTime]", "{0:g}", this.DownRouteTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackHeroOnce */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackHeroOnce]", "{0:g}", this.AttackHeroOnce);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackBaseOnce */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackBaseOnce]", "{0:g}", this.AttackBaseOnce);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族间隔时间 */
public class FamilyIntervalTime : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Seq; // 序号
    public UInt32 FamilyBattleIntervalTime; // 家族战攻击间隔
    public float FamilyTeamMaxAttackTime; // 战队最大攻击时间

    /* construct methods */
    public FamilyIntervalTime()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyIntervalTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyIntervalTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyIntervalTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Seq */
        {
            ret = destBuf.writeUInt32(this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyBattleIntervalTime */
        {
            ret = destBuf.writeUInt32(this.FamilyBattleIntervalTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FamilyTeamMaxAttackTime */
        {
            ret = destBuf.writeFloat(this.FamilyTeamMaxAttackTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyIntervalTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyIntervalTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyIntervalTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Seq */
        {
            ret = srcBuf.readUInt32(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyBattleIntervalTime */
        {
            ret = srcBuf.readUInt32(ref this.FamilyBattleIntervalTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FamilyTeamMaxAttackTime */
        {
            ret = srcBuf.readFloat(ref this.FamilyTeamMaxAttackTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyIntervalTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyIntervalTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyIntervalTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Seq */
        {
            ret = srcBuf.readUInt32(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyBattleIntervalTime */
        {
            ret = srcBuf.readUInt32(ref this.FamilyBattleIntervalTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FamilyTeamMaxAttackTime */
        {
            ret = srcBuf.readFloat(ref this.FamilyTeamMaxAttackTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Seq */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Seq]", "{0:d}", this.Seq);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyBattleIntervalTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyBattleIntervalTime]", "{0:d}", this.FamilyBattleIntervalTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FamilyTeamMaxAttackTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FamilyTeamMaxAttackTime]", "{0:g}", this.FamilyTeamMaxAttackTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族战队活动时间 */
public class FamilyTeamActivityTime : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Weekday; // 星期
    public byte IsApplyDay; // 当天是否可报名
    public byte IsModifyDay; // 当天是否可调整防守阵容
    public byte[] ChallengeStartTime; // 当天挑战阶段开始时间
    public byte[] ChallengeStopTime; // 当天挑战阶段结束时间
    public byte[] ActivityStartTime; // 当天活动开始时间
    public byte[] ActivityStopTime; // 当天活动结束时间

    /* construct methods */
    public FamilyTeamActivityTime()
    {
        ChallengeStartTime = new byte[100];
        ChallengeStopTime = new byte[100];
        ActivityStartTime = new byte[100];
        ActivityStopTime = new byte[100];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyTeamActivityTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyTeamActivityTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyTeamActivityTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Weekday */
        {
            ret = destBuf.writeUInt32(this.Weekday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsApplyDay */
        {
            ret = destBuf.writeUInt8(this.IsApplyDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsModifyDay */
        {
            ret = destBuf.writeUInt8(this.IsModifyDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChallengeStartTime */
        {
            /* record sizeinfo position */
            Int32 sizePos4ChallengeStartTime = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4ChallengeStartTime = destBuf.getUsedSize();

            Int32 realSize4ChallengeStartTime = TdrTypeUtil.cstrlen(this.ChallengeStartTime);

            if (realSize4ChallengeStartTime >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.ChallengeStartTime, realSize4ChallengeStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.ChallengeStartTime */
            Int32 size4ChallengeStartTime = destBuf.getUsedSize() - beginPos4ChallengeStartTime;
            ret = destBuf.writeUInt32((UInt32)(size4ChallengeStartTime), sizePos4ChallengeStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChallengeStopTime */
        {
            /* record sizeinfo position */
            Int32 sizePos4ChallengeStopTime = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4ChallengeStopTime = destBuf.getUsedSize();

            Int32 realSize4ChallengeStopTime = TdrTypeUtil.cstrlen(this.ChallengeStopTime);

            if (realSize4ChallengeStopTime >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.ChallengeStopTime, realSize4ChallengeStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.ChallengeStopTime */
            Int32 size4ChallengeStopTime = destBuf.getUsedSize() - beginPos4ChallengeStopTime;
            ret = destBuf.writeUInt32((UInt32)(size4ChallengeStopTime), sizePos4ChallengeStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActivityStartTime */
        {
            /* record sizeinfo position */
            Int32 sizePos4ActivityStartTime = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4ActivityStartTime = destBuf.getUsedSize();

            Int32 realSize4ActivityStartTime = TdrTypeUtil.cstrlen(this.ActivityStartTime);

            if (realSize4ActivityStartTime >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.ActivityStartTime, realSize4ActivityStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.ActivityStartTime */
            Int32 size4ActivityStartTime = destBuf.getUsedSize() - beginPos4ActivityStartTime;
            ret = destBuf.writeUInt32((UInt32)(size4ActivityStartTime), sizePos4ActivityStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActivityStopTime */
        {
            /* record sizeinfo position */
            Int32 sizePos4ActivityStopTime = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4ActivityStopTime = destBuf.getUsedSize();

            Int32 realSize4ActivityStopTime = TdrTypeUtil.cstrlen(this.ActivityStopTime);

            if (realSize4ActivityStopTime >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.ActivityStopTime, realSize4ActivityStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.ActivityStopTime */
            Int32 size4ActivityStopTime = destBuf.getUsedSize() - beginPos4ActivityStopTime;
            ret = destBuf.writeUInt32((UInt32)(size4ActivityStopTime), sizePos4ActivityStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyTeamActivityTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyTeamActivityTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyTeamActivityTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Weekday */
        {
            ret = srcBuf.readUInt32(ref this.Weekday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsApplyDay */
        {
            ret = srcBuf.readUInt8(ref this.IsApplyDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsModifyDay */
        {
            ret = srcBuf.readUInt8(ref this.IsModifyDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ChallengeStartTime */
        {
            /* get sizeinfo for this.ChallengeStartTime */
            UInt32 size4ChallengeStartTime = 0;
            ret = srcBuf.readUInt32(ref size4ChallengeStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4ChallengeStartTime > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4ChallengeStartTime > this.ChallengeStartTime.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4ChallengeStartTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.ChallengeStartTime, (int)size4ChallengeStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.ChallengeStartTime[(int)size4ChallengeStartTime - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4ChallengeStartTime = TdrTypeUtil.cstrlen(this.ChallengeStartTime) + 1;
            if (size4ChallengeStartTime != realSize4ChallengeStartTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ChallengeStopTime */
        {
            /* get sizeinfo for this.ChallengeStopTime */
            UInt32 size4ChallengeStopTime = 0;
            ret = srcBuf.readUInt32(ref size4ChallengeStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4ChallengeStopTime > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4ChallengeStopTime > this.ChallengeStopTime.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4ChallengeStopTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.ChallengeStopTime, (int)size4ChallengeStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.ChallengeStopTime[(int)size4ChallengeStopTime - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4ChallengeStopTime = TdrTypeUtil.cstrlen(this.ChallengeStopTime) + 1;
            if (size4ChallengeStopTime != realSize4ChallengeStopTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ActivityStartTime */
        {
            /* get sizeinfo for this.ActivityStartTime */
            UInt32 size4ActivityStartTime = 0;
            ret = srcBuf.readUInt32(ref size4ActivityStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4ActivityStartTime > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4ActivityStartTime > this.ActivityStartTime.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4ActivityStartTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.ActivityStartTime, (int)size4ActivityStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.ActivityStartTime[(int)size4ActivityStartTime - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4ActivityStartTime = TdrTypeUtil.cstrlen(this.ActivityStartTime) + 1;
            if (size4ActivityStartTime != realSize4ActivityStartTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ActivityStopTime */
        {
            /* get sizeinfo for this.ActivityStopTime */
            UInt32 size4ActivityStopTime = 0;
            ret = srcBuf.readUInt32(ref size4ActivityStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4ActivityStopTime > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4ActivityStopTime > this.ActivityStopTime.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4ActivityStopTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.ActivityStopTime, (int)size4ActivityStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.ActivityStopTime[(int)size4ActivityStopTime - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4ActivityStopTime = TdrTypeUtil.cstrlen(this.ActivityStopTime) + 1;
            if (size4ActivityStopTime != realSize4ActivityStopTime)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyTeamActivityTime.CURRVERSION < cutVer)
        {
            cutVer = FamilyTeamActivityTime.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyTeamActivityTime.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Weekday */
        {
            ret = srcBuf.readUInt32(ref this.Weekday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsApplyDay */
        {
            ret = srcBuf.readUInt8(ref this.IsApplyDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsModifyDay */
        {
            ret = srcBuf.readUInt8(ref this.IsModifyDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ChallengeStartTime */
        {
            Int32 size4ChallengeStartTime = 100;

            /* load */
            ret = srcBuf.readCString(ref this.ChallengeStartTime, (int)size4ChallengeStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ChallengeStopTime */
        {
            Int32 size4ChallengeStopTime = 100;

            /* load */
            ret = srcBuf.readCString(ref this.ChallengeStopTime, (int)size4ChallengeStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ActivityStartTime */
        {
            Int32 size4ActivityStartTime = 100;

            /* load */
            ret = srcBuf.readCString(ref this.ActivityStartTime, (int)size4ActivityStartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ActivityStopTime */
        {
            Int32 size4ActivityStopTime = 100;

            /* load */
            ret = srcBuf.readCString(ref this.ActivityStopTime, (int)size4ActivityStopTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Weekday */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Weekday]", "{0:d}", this.Weekday);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsApplyDay */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsApplyDay]", "0x{0:x2}", this.IsApplyDay);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsModifyDay */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsModifyDay]", "0x{0:x2}", this.IsModifyDay);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChallengeStartTime */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[ChallengeStartTime]", this.ChallengeStartTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChallengeStopTime */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[ChallengeStopTime]", this.ChallengeStopTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActivityStartTime */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[ActivityStartTime]", this.ActivityStartTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActivityStopTime */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[ActivityStopTime]", this.ActivityStopTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 家族战城池 */
public class FamilyWarCity : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 CityID; // 城池id
    public UInt32 CityMirroringID; // 镜像城池id
    public UInt32 GetScore; // 被占领后每次结算积分时产出多少积分
    public byte[] GoToCityList; // 可直接前往哪些城池

    /* construct methods */
    public FamilyWarCity()
    {
        GoToCityList = new byte[128];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyWarCity.CURRVERSION < cutVer)
        {
            cutVer = FamilyWarCity.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyWarCity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.CityID */
        {
            ret = destBuf.writeUInt32(this.CityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CityMirroringID */
        {
            ret = destBuf.writeUInt32(this.CityMirroringID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GetScore */
        {
            ret = destBuf.writeUInt32(this.GetScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GoToCityList */
        {
            /* record sizeinfo position */
            Int32 sizePos4GoToCityList = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4GoToCityList = destBuf.getUsedSize();

            Int32 realSize4GoToCityList = TdrTypeUtil.cstrlen(this.GoToCityList);

            if (realSize4GoToCityList >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.GoToCityList, realSize4GoToCityList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.GoToCityList */
            Int32 size4GoToCityList = destBuf.getUsedSize() - beginPos4GoToCityList;
            ret = destBuf.writeUInt32((UInt32)(size4GoToCityList), sizePos4GoToCityList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyWarCity.CURRVERSION < cutVer)
        {
            cutVer = FamilyWarCity.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyWarCity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.CityID */
        {
            ret = srcBuf.readUInt32(ref this.CityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CityMirroringID */
        {
            ret = srcBuf.readUInt32(ref this.CityMirroringID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GetScore */
        {
            ret = srcBuf.readUInt32(ref this.GetScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GoToCityList */
        {
            /* get sizeinfo for this.GoToCityList */
            UInt32 size4GoToCityList = 0;
            ret = srcBuf.readUInt32(ref size4GoToCityList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4GoToCityList > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4GoToCityList > this.GoToCityList.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4GoToCityList)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.GoToCityList, (int)size4GoToCityList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.GoToCityList[(int)size4GoToCityList - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4GoToCityList = TdrTypeUtil.cstrlen(this.GoToCityList) + 1;
            if (size4GoToCityList != realSize4GoToCityList)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FamilyWarCity.CURRVERSION < cutVer)
        {
            cutVer = FamilyWarCity.CURRVERSION;
        }

        /* check cutversion */
        if (FamilyWarCity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.CityID */
        {
            ret = srcBuf.readUInt32(ref this.CityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CityMirroringID */
        {
            ret = srcBuf.readUInt32(ref this.CityMirroringID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GetScore */
        {
            ret = srcBuf.readUInt32(ref this.GetScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GoToCityList */
        {
            Int32 size4GoToCityList = 128;

            /* load */
            ret = srcBuf.readCString(ref this.GoToCityList, (int)size4GoToCityList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.CityID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CityID]", "{0:d}", this.CityID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CityMirroringID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CityMirroringID]", "{0:d}", this.CityMirroringID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GetScore */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GetScore]", "{0:d}", this.GetScore);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GoToCityList */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[GoToCityList]", this.GoToCityList);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
