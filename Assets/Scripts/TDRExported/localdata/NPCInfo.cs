/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 81cea21e6b1c04b52da102d3768287ed */

/* creation time: Thu Jun 04 15:29:00 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public enum  NPCHPSkill
{
    MAX_HP_SKILL_NUM = 6, // 可以配置的最大血量技能数
}


public class NPCBaseInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Index;
    public byte[] RoleName;
    public byte[] Pic;
    public UInt32 ResID;
    public float Scale;
    public byte IsBoss;
    public UInt32 CareerStyle;
    public UInt32 RelateHeroId;
    public UInt32 RoleLevel;
    public UInt32 RoleStarLevel;
    public UInt32 Attack;
    public UInt32 Defense;
    public UInt32 MagicAttack;
    public UInt32 MagicDefense;
    public UInt32 Health;
    public UInt32 SideStep;
    public UInt32 Hit;
    public UInt16 Crit;
    public UInt16 CritDefense;
    public UInt16 CritMultiple;
    public float AttackSpeed;
    public float MoveSpeed;
    public float PatroRange;
    public float ChaseRange;
    public UInt32 WarningRange;
    public UInt32 IsCallLeague;
    public UInt32 CommonSkillID;
    public float StepEffectEnableRadius;
    public Int32 StepViberateEnableRadius;
    public UInt32 NormalAttackInterval;
    public UInt32 TargetLockDuration;
    public UInt32[] Skills;
    public byte[] AIList;
    public Int32 Weight;

    /* construct methods */
    public NPCBaseInfo()
    {
        RoleName = new byte[20];
        Pic = new byte[20];
        Skills = new UInt32[5];
        AIList = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NPCBaseInfo.CURRVERSION < cutVer)
        {
            cutVer = NPCBaseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (NPCBaseInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Index */
        {
            ret = destBuf.writeUInt32(this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RoleName */
        {
            /* record sizeinfo position */
            Int32 sizePos4RoleName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4RoleName = destBuf.getUsedSize();

            Int32 realSize4RoleName = TdrTypeUtil.cstrlen(this.RoleName);

            if (realSize4RoleName >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.RoleName, realSize4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.RoleName */
            Int32 size4RoleName = destBuf.getUsedSize() - beginPos4RoleName;
            ret = destBuf.writeUInt32((UInt32)(size4RoleName), sizePos4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Pic */
        {
            /* record sizeinfo position */
            Int32 sizePos4Pic = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Pic = destBuf.getUsedSize();

            Int32 realSize4Pic = TdrTypeUtil.cstrlen(this.Pic);

            if (realSize4Pic >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Pic, realSize4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Pic */
            Int32 size4Pic = destBuf.getUsedSize() - beginPos4Pic;
            ret = destBuf.writeUInt32((UInt32)(size4Pic), sizePos4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ResID */
        {
            ret = destBuf.writeUInt32(this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Scale */
        {
            ret = destBuf.writeFloat(this.Scale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsBoss */
        {
            ret = destBuf.writeUInt8(this.IsBoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CareerStyle */
        {
            ret = destBuf.writeUInt32(this.CareerStyle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RelateHeroId */
        {
            ret = destBuf.writeUInt32(this.RelateHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RoleLevel */
        {
            ret = destBuf.writeUInt32(this.RoleLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RoleStarLevel */
        {
            ret = destBuf.writeUInt32(this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Attack */
        {
            ret = destBuf.writeUInt32(this.Attack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Defense */
        {
            ret = destBuf.writeUInt32(this.Defense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MagicAttack */
        {
            ret = destBuf.writeUInt32(this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MagicDefense */
        {
            ret = destBuf.writeUInt32(this.MagicDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Health */
        {
            ret = destBuf.writeUInt32(this.Health);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SideStep */
        {
            ret = destBuf.writeUInt32(this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Hit */
        {
            ret = destBuf.writeUInt32(this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Crit */
        {
            ret = destBuf.writeUInt16(this.Crit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CritDefense */
        {
            ret = destBuf.writeUInt16(this.CritDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CritMultiple */
        {
            ret = destBuf.writeUInt16(this.CritMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackSpeed */
        {
            ret = destBuf.writeFloat(this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MoveSpeed */
        {
            ret = destBuf.writeFloat(this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PatroRange */
        {
            ret = destBuf.writeFloat(this.PatroRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChaseRange */
        {
            ret = destBuf.writeFloat(this.ChaseRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WarningRange */
        {
            ret = destBuf.writeUInt32(this.WarningRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsCallLeague */
        {
            ret = destBuf.writeUInt32(this.IsCallLeague);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CommonSkillID */
        {
            ret = destBuf.writeUInt32(this.CommonSkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StepEffectEnableRadius */
        {
            ret = destBuf.writeFloat(this.StepEffectEnableRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StepViberateEnableRadius */
        {
            ret = destBuf.writeInt32(this.StepViberateEnableRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NormalAttackInterval */
        {
            ret = destBuf.writeUInt32(this.NormalAttackInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TargetLockDuration */
        {
            ret = destBuf.writeUInt32(this.TargetLockDuration);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Skills */
        {
            for (Int32 Skills_i = 0; Skills_i < 5; Skills_i++)
            {
                ret = destBuf.writeUInt32(this.Skills[Skills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.AIList */
        {
            /* record sizeinfo position */
            Int32 sizePos4AIList = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4AIList = destBuf.getUsedSize();

            Int32 realSize4AIList = TdrTypeUtil.cstrlen(this.AIList);

            if (realSize4AIList >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.AIList, realSize4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.AIList */
            Int32 size4AIList = destBuf.getUsedSize() - beginPos4AIList;
            ret = destBuf.writeUInt32((UInt32)(size4AIList), sizePos4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Weight */
        {
            ret = destBuf.writeInt32(this.Weight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NPCBaseInfo.CURRVERSION < cutVer)
        {
            cutVer = NPCBaseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (NPCBaseInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RoleName */
        {
            /* get sizeinfo for this.RoleName */
            UInt32 size4RoleName = 0;
            ret = srcBuf.readUInt32(ref size4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4RoleName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4RoleName > this.RoleName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4RoleName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.RoleName, (int)size4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.RoleName[(int)size4RoleName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4RoleName = TdrTypeUtil.cstrlen(this.RoleName) + 1;
            if (size4RoleName != realSize4RoleName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Pic */
        {
            /* get sizeinfo for this.Pic */
            UInt32 size4Pic = 0;
            ret = srcBuf.readUInt32(ref size4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Pic > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Pic > this.Pic.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Pic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Pic, (int)size4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Pic[(int)size4Pic - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Pic = TdrTypeUtil.cstrlen(this.Pic) + 1;
            if (size4Pic != realSize4Pic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ResID */
        {
            ret = srcBuf.readUInt32(ref this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Scale */
        {
            ret = srcBuf.readFloat(ref this.Scale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsBoss */
        {
            ret = srcBuf.readUInt8(ref this.IsBoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CareerStyle */
        {
            ret = srcBuf.readUInt32(ref this.CareerStyle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RelateHeroId */
        {
            ret = srcBuf.readUInt32(ref this.RelateHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RoleLevel */
        {
            ret = srcBuf.readUInt32(ref this.RoleLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RoleStarLevel */
        {
            ret = srcBuf.readUInt32(ref this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Attack */
        {
            ret = srcBuf.readUInt32(ref this.Attack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Defense */
        {
            ret = srcBuf.readUInt32(ref this.Defense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MagicAttack */
        {
            ret = srcBuf.readUInt32(ref this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MagicDefense */
        {
            ret = srcBuf.readUInt32(ref this.MagicDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Health */
        {
            ret = srcBuf.readUInt32(ref this.Health);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SideStep */
        {
            ret = srcBuf.readUInt32(ref this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Hit */
        {
            ret = srcBuf.readUInt32(ref this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Crit */
        {
            ret = srcBuf.readUInt16(ref this.Crit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CritDefense */
        {
            ret = srcBuf.readUInt16(ref this.CritDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CritMultiple */
        {
            ret = srcBuf.readUInt16(ref this.CritMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackSpeed */
        {
            ret = srcBuf.readFloat(ref this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PatroRange */
        {
            ret = srcBuf.readFloat(ref this.PatroRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ChaseRange */
        {
            ret = srcBuf.readFloat(ref this.ChaseRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WarningRange */
        {
            ret = srcBuf.readUInt32(ref this.WarningRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsCallLeague */
        {
            ret = srcBuf.readUInt32(ref this.IsCallLeague);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CommonSkillID */
        {
            ret = srcBuf.readUInt32(ref this.CommonSkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StepEffectEnableRadius */
        {
            ret = srcBuf.readFloat(ref this.StepEffectEnableRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StepViberateEnableRadius */
        {
            ret = srcBuf.readInt32(ref this.StepViberateEnableRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NormalAttackInterval */
        {
            ret = srcBuf.readUInt32(ref this.NormalAttackInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TargetLockDuration */
        {
            ret = srcBuf.readUInt32(ref this.TargetLockDuration);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Skills */
        {
            for (Int32 Skills_i = 0; Skills_i < 5; Skills_i++)
            {
                ret = srcBuf.readUInt32(ref this.Skills[Skills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.AIList */
        {
            /* get sizeinfo for this.AIList */
            UInt32 size4AIList = 0;
            ret = srcBuf.readUInt32(ref size4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4AIList > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4AIList > this.AIList.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4AIList)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.AIList, (int)size4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.AIList[(int)size4AIList - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4AIList = TdrTypeUtil.cstrlen(this.AIList) + 1;
            if (size4AIList != realSize4AIList)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Weight */
        {
            ret = srcBuf.readInt32(ref this.Weight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NPCBaseInfo.CURRVERSION < cutVer)
        {
            cutVer = NPCBaseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (NPCBaseInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RoleName */
        {
            Int32 size4RoleName = 20;

            /* load */
            ret = srcBuf.readCString(ref this.RoleName, (int)size4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Pic */
        {
            Int32 size4Pic = 20;

            /* load */
            ret = srcBuf.readCString(ref this.Pic, (int)size4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ResID */
        {
            ret = srcBuf.readUInt32(ref this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Scale */
        {
            ret = srcBuf.readFloat(ref this.Scale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsBoss */
        {
            ret = srcBuf.readUInt8(ref this.IsBoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CareerStyle */
        {
            ret = srcBuf.readUInt32(ref this.CareerStyle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RelateHeroId */
        {
            ret = srcBuf.readUInt32(ref this.RelateHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RoleLevel */
        {
            ret = srcBuf.readUInt32(ref this.RoleLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RoleStarLevel */
        {
            ret = srcBuf.readUInt32(ref this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Attack */
        {
            ret = srcBuf.readUInt32(ref this.Attack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Defense */
        {
            ret = srcBuf.readUInt32(ref this.Defense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MagicAttack */
        {
            ret = srcBuf.readUInt32(ref this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MagicDefense */
        {
            ret = srcBuf.readUInt32(ref this.MagicDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Health */
        {
            ret = srcBuf.readUInt32(ref this.Health);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SideStep */
        {
            ret = srcBuf.readUInt32(ref this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Hit */
        {
            ret = srcBuf.readUInt32(ref this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Crit */
        {
            ret = srcBuf.readUInt16(ref this.Crit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CritDefense */
        {
            ret = srcBuf.readUInt16(ref this.CritDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CritMultiple */
        {
            ret = srcBuf.readUInt16(ref this.CritMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackSpeed */
        {
            ret = srcBuf.readFloat(ref this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PatroRange */
        {
            ret = srcBuf.readFloat(ref this.PatroRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ChaseRange */
        {
            ret = srcBuf.readFloat(ref this.ChaseRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WarningRange */
        {
            ret = srcBuf.readUInt32(ref this.WarningRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsCallLeague */
        {
            ret = srcBuf.readUInt32(ref this.IsCallLeague);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CommonSkillID */
        {
            ret = srcBuf.readUInt32(ref this.CommonSkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StepEffectEnableRadius */
        {
            ret = srcBuf.readFloat(ref this.StepEffectEnableRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StepViberateEnableRadius */
        {
            ret = srcBuf.readInt32(ref this.StepViberateEnableRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NormalAttackInterval */
        {
            ret = srcBuf.readUInt32(ref this.NormalAttackInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TargetLockDuration */
        {
            ret = srcBuf.readUInt32(ref this.TargetLockDuration);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Skills */
        {
            for (Int32 Skills_i = 0; Skills_i < 5; Skills_i++)
            {
                ret = srcBuf.readUInt32(ref this.Skills[Skills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.AIList */
        {
            Int32 size4AIList = 256;

            /* load */
            ret = srcBuf.readCString(ref this.AIList, (int)size4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Weight */
        {
            ret = srcBuf.readInt32(ref this.Weight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Index */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Index]", "{0:d}", this.Index);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RoleName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[RoleName]", this.RoleName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Pic */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Pic]", this.Pic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ResID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResID]", "{0:d}", this.ResID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Scale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Scale]", "{0:g}", this.Scale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsBoss */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsBoss]", "0x{0:x2}", this.IsBoss);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CareerStyle */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CareerStyle]", "{0:d}", this.CareerStyle);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RelateHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RelateHeroId]", "{0:d}", this.RelateHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RoleLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RoleLevel]", "{0:d}", this.RoleLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RoleStarLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RoleStarLevel]", "{0:d}", this.RoleStarLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Attack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Attack]", "{0:d}", this.Attack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Defense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Defense]", "{0:d}", this.Defense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MagicAttack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MagicAttack]", "{0:d}", this.MagicAttack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MagicDefense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MagicDefense]", "{0:d}", this.MagicDefense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Health */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Health]", "{0:d}", this.Health);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SideStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SideStep]", "{0:d}", this.SideStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Hit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Hit]", "{0:d}", this.Hit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Crit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Crit]", "{0:d}", this.Crit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CritDefense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CritDefense]", "{0:d}", this.CritDefense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CritMultiple */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CritMultiple]", "{0:d}", this.CritMultiple);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackSpeed]", "{0:g}", this.AttackSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MoveSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MoveSpeed]", "{0:g}", this.MoveSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PatroRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PatroRange]", "{0:g}", this.PatroRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChaseRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ChaseRange]", "{0:g}", this.ChaseRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WarningRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WarningRange]", "{0:d}", this.WarningRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsCallLeague */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsCallLeague]", "{0:d}", this.IsCallLeague);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CommonSkillID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CommonSkillID]", "{0:d}", this.CommonSkillID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StepEffectEnableRadius */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StepEffectEnableRadius]", "{0:g}", this.StepEffectEnableRadius);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StepViberateEnableRadius */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StepViberateEnableRadius]", "{0:d}", this.StepViberateEnableRadius);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NormalAttackInterval */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NormalAttackInterval]", "{0:d}", this.NormalAttackInterval);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TargetLockDuration */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TargetLockDuration]", "{0:d}", this.TargetLockDuration);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Skills */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Skills]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Skills_i = 0; Skills_i < 5; Skills_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.Skills[Skills_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AIList */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[AIList]", this.AIList);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Weight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Weight]", "{0:d}", this.Weight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* [血量技能] */
public class HPSkillItem : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 HP;
    public UInt16 Skill;

    /* construct methods */
    public HPSkillItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HPSkillItem.CURRVERSION < cutVer)
        {
            cutVer = HPSkillItem.CURRVERSION;
        }

        /* check cutversion */
        if (HPSkillItem.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HP */
        {
            ret = destBuf.writeUInt32(this.HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Skill */
        {
            ret = destBuf.writeUInt16(this.Skill);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HPSkillItem.CURRVERSION < cutVer)
        {
            cutVer = HPSkillItem.CURRVERSION;
        }

        /* check cutversion */
        if (HPSkillItem.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HP */
        {
            ret = srcBuf.readUInt32(ref this.HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Skill */
        {
            ret = srcBuf.readUInt16(ref this.Skill);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HPSkillItem.CURRVERSION < cutVer)
        {
            cutVer = HPSkillItem.CURRVERSION;
        }

        /* check cutversion */
        if (HPSkillItem.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HP */
        {
            ret = srcBuf.readUInt32(ref this.HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Skill */
        {
            ret = srcBuf.readUInt16(ref this.Skill);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HP */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HP]", "{0:d}", this.HP);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Skill */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Skill]", "{0:d}", this.Skill);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 技能升级 */
public class BossSkillControl : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Index;
    public HPSkillItem[] Item;

    /* construct methods */
    public BossSkillControl()
    {
        Item = new HPSkillItem[6];
        for(int Item_i = 0; Item_i < 6; Item_i++)
        {
            Item[Item_i] = new HPSkillItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BossSkillControl.CURRVERSION < cutVer)
        {
            cutVer = BossSkillControl.CURRVERSION;
        }

        /* check cutversion */
        if (BossSkillControl.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Index */
        {
            ret = destBuf.writeUInt32(this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Item */
        {
            for (Int32 Item_i = 0; Item_i < 6; Item_i++)
            {
                ret = this.Item[Item_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BossSkillControl.CURRVERSION < cutVer)
        {
            cutVer = BossSkillControl.CURRVERSION;
        }

        /* check cutversion */
        if (BossSkillControl.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Item */
        {
            for (Int32 Item_i = 0; Item_i < 6; Item_i++)
            {
                ret = this.Item[Item_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BossSkillControl.CURRVERSION < cutVer)
        {
            cutVer = BossSkillControl.CURRVERSION;
        }

        /* check cutversion */
        if (BossSkillControl.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Item */
        {
            for (Int32 Item_i = 0; Item_i < 6; Item_i++)
            {
                ret = this.Item[Item_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Index */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Index]", "{0:d}", this.Index);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Item */
        for (Int32 Item_i = 0; Item_i < 6; Item_i++)
        {
            if (null == this.Item[Item_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Item]", Item_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.Item[Item_i] */
            if (0 > indent)
            {
                ret = this.Item[Item_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.Item[Item_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
