/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 865f918a54b97d790f05074f1431450d */

/* creation time: Fri May 22 16:52:36 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public enum  LEVEL_TYPE
{
    E_LT_NORMAL = 1, // 普通关卡
    E_LT_HIDDEN = 2, // 隐藏关卡
    E_LT_ENDLESS = 3, // 无尽
}


public class DifficultRelate : tsf4g_csharp_interface
{
    /* public members */
    public byte Difficult;
    public UInt32 Stamina;
    public UInt32 DailyChallengeTimesLimit;
    public UInt32 RecommendFighting; // 推荐战斗力
    public UInt32 DropId;
    public UInt32 RandomGiftBagId;
    public UInt32 CertainGiftBagId;
    public UInt32 MinTime;
    public UInt32 GetExp;
    public UInt32 GetGold;
    public UInt32 RewardedHeroExp;
    public byte[] File;
    public UInt32 PreLevelID;
    public byte PreDifficult;
    public UInt32 ScenarioTriggerId;

    /* construct methods */
    public DifficultRelate()
    {
        File = new byte[20];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DifficultRelate.CURRVERSION < cutVer)
        {
            cutVer = DifficultRelate.CURRVERSION;
        }

        /* check cutversion */
        if (DifficultRelate.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Difficult */
        {
            ret = destBuf.writeUInt8(this.Difficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Stamina */
        {
            ret = destBuf.writeUInt32(this.Stamina);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DailyChallengeTimesLimit */
        {
            ret = destBuf.writeUInt32(this.DailyChallengeTimesLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RecommendFighting */
        {
            ret = destBuf.writeUInt32(this.RecommendFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DropId */
        {
            ret = destBuf.writeUInt32(this.DropId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RandomGiftBagId */
        {
            ret = destBuf.writeUInt32(this.RandomGiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CertainGiftBagId */
        {
            ret = destBuf.writeUInt32(this.CertainGiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MinTime */
        {
            ret = destBuf.writeUInt32(this.MinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GetExp */
        {
            ret = destBuf.writeUInt32(this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GetGold */
        {
            ret = destBuf.writeUInt32(this.GetGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RewardedHeroExp */
        {
            ret = destBuf.writeUInt32(this.RewardedHeroExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.File */
        {
            /* record sizeinfo position */
            Int32 sizePos4File = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4File = destBuf.getUsedSize();

            Int32 realSize4File = TdrTypeUtil.cstrlen(this.File);

            if (realSize4File >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.File, realSize4File);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.File */
            Int32 size4File = destBuf.getUsedSize() - beginPos4File;
            ret = destBuf.writeUInt32((UInt32)(size4File), sizePos4File);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PreLevelID */
        {
            ret = destBuf.writeUInt32(this.PreLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PreDifficult */
        {
            ret = destBuf.writeUInt8(this.PreDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ScenarioTriggerId */
        {
            ret = destBuf.writeUInt32(this.ScenarioTriggerId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DifficultRelate.CURRVERSION < cutVer)
        {
            cutVer = DifficultRelate.CURRVERSION;
        }

        /* check cutversion */
        if (DifficultRelate.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Difficult */
        {
            ret = srcBuf.readUInt8(ref this.Difficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Stamina */
        {
            ret = srcBuf.readUInt32(ref this.Stamina);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DailyChallengeTimesLimit */
        {
            ret = srcBuf.readUInt32(ref this.DailyChallengeTimesLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RecommendFighting */
        {
            ret = srcBuf.readUInt32(ref this.RecommendFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DropId */
        {
            ret = srcBuf.readUInt32(ref this.DropId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RandomGiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.RandomGiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CertainGiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.CertainGiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MinTime */
        {
            ret = srcBuf.readUInt32(ref this.MinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GetExp */
        {
            ret = srcBuf.readUInt32(ref this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GetGold */
        {
            ret = srcBuf.readUInt32(ref this.GetGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RewardedHeroExp */
        {
            ret = srcBuf.readUInt32(ref this.RewardedHeroExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.File */
        {
            /* get sizeinfo for this.File */
            UInt32 size4File = 0;
            ret = srcBuf.readUInt32(ref size4File);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4File > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4File > this.File.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4File)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.File, (int)size4File);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.File[(int)size4File - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4File = TdrTypeUtil.cstrlen(this.File) + 1;
            if (size4File != realSize4File)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.PreLevelID */
        {
            ret = srcBuf.readUInt32(ref this.PreLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PreDifficult */
        {
            ret = srcBuf.readUInt8(ref this.PreDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ScenarioTriggerId */
        {
            ret = srcBuf.readUInt32(ref this.ScenarioTriggerId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DifficultRelate.CURRVERSION < cutVer)
        {
            cutVer = DifficultRelate.CURRVERSION;
        }

        /* check cutversion */
        if (DifficultRelate.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Difficult */
        {
            ret = srcBuf.readUInt8(ref this.Difficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Stamina */
        {
            ret = srcBuf.readUInt32(ref this.Stamina);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DailyChallengeTimesLimit */
        {
            ret = srcBuf.readUInt32(ref this.DailyChallengeTimesLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RecommendFighting */
        {
            ret = srcBuf.readUInt32(ref this.RecommendFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DropId */
        {
            ret = srcBuf.readUInt32(ref this.DropId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RandomGiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.RandomGiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CertainGiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.CertainGiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MinTime */
        {
            ret = srcBuf.readUInt32(ref this.MinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GetExp */
        {
            ret = srcBuf.readUInt32(ref this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GetGold */
        {
            ret = srcBuf.readUInt32(ref this.GetGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RewardedHeroExp */
        {
            ret = srcBuf.readUInt32(ref this.RewardedHeroExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.File */
        {
            Int32 size4File = 20;

            /* load */
            ret = srcBuf.readCString(ref this.File, (int)size4File);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.PreLevelID */
        {
            ret = srcBuf.readUInt32(ref this.PreLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PreDifficult */
        {
            ret = srcBuf.readUInt8(ref this.PreDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ScenarioTriggerId */
        {
            ret = srcBuf.readUInt32(ref this.ScenarioTriggerId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Difficult */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Difficult]", "0x{0:x2}", this.Difficult);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Stamina */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Stamina]", "{0:d}", this.Stamina);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DailyChallengeTimesLimit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DailyChallengeTimesLimit]", "{0:d}", this.DailyChallengeTimesLimit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RecommendFighting */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RecommendFighting]", "{0:d}", this.RecommendFighting);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DropId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DropId]", "{0:d}", this.DropId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RandomGiftBagId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RandomGiftBagId]", "{0:d}", this.RandomGiftBagId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CertainGiftBagId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CertainGiftBagId]", "{0:d}", this.CertainGiftBagId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MinTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MinTime]", "{0:d}", this.MinTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GetExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GetExp]", "{0:d}", this.GetExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GetGold */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GetGold]", "{0:d}", this.GetGold);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RewardedHeroExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RewardedHeroExp]", "{0:d}", this.RewardedHeroExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.File */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[File]", this.File);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PreLevelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PreLevelID]", "{0:d}", this.PreLevelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PreDifficult */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PreDifficult]", "0x{0:x2}", this.PreDifficult);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ScenarioTriggerId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ScenarioTriggerId]", "{0:d}", this.ScenarioTriggerId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class GameLevelConf : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 LevelID;
    public byte LevelType;
    public byte[] szLevelName;
    public byte[] ChildLevel1;
    public byte[] LevelPic;
    public byte HasBoss;
    public byte[] LevelDes;
    public byte[] StoryNum;
    public byte ReviveCount;
    public Int32 ReviveCostType;
    public UInt32 LevelMaxTime;
    public Int32[] ReviveCost;
    public DifficultRelate[] DifficultData;
    public byte[] BossMusic; // 遇见BOSS音乐
    public byte[] SucBossMusic;
    public byte[] FailBossMusic;
    public UInt32 MapPosX;
    public UInt32 MapPosY;

    /* construct methods */
    public GameLevelConf()
    {
        szLevelName = new byte[40];
        ChildLevel1 = new byte[20];
        LevelPic = new byte[20];
        LevelDes = new byte[256];
        StoryNum = new byte[20];
        ReviveCost = new Int32[3];
        DifficultData = new DifficultRelate[2];
        for(int DifficultData_i = 0; DifficultData_i < 2; DifficultData_i++)
        {
            DifficultData[DifficultData_i] = new DifficultRelate();
        }

        BossMusic = new byte[28];
        SucBossMusic = new byte[28];
        FailBossMusic = new byte[28];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GameLevelConf.CURRVERSION < cutVer)
        {
            cutVer = GameLevelConf.CURRVERSION;
        }

        /* check cutversion */
        if (GameLevelConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.LevelID */
        {
            ret = destBuf.writeUInt32(this.LevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LevelType */
        {
            ret = destBuf.writeUInt8(this.LevelType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szLevelName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szLevelName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szLevelName = destBuf.getUsedSize();

            Int32 realSize4szLevelName = TdrTypeUtil.cstrlen(this.szLevelName);

            if (realSize4szLevelName >= 40)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szLevelName, realSize4szLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szLevelName */
            Int32 size4szLevelName = destBuf.getUsedSize() - beginPos4szLevelName;
            ret = destBuf.writeUInt32((UInt32)(size4szLevelName), sizePos4szLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChildLevel1 */
        {
            /* record sizeinfo position */
            Int32 sizePos4ChildLevel1 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4ChildLevel1 = destBuf.getUsedSize();

            Int32 realSize4ChildLevel1 = TdrTypeUtil.cstrlen(this.ChildLevel1);

            if (realSize4ChildLevel1 >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.ChildLevel1, realSize4ChildLevel1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.ChildLevel1 */
            Int32 size4ChildLevel1 = destBuf.getUsedSize() - beginPos4ChildLevel1;
            ret = destBuf.writeUInt32((UInt32)(size4ChildLevel1), sizePos4ChildLevel1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LevelPic */
        {
            /* record sizeinfo position */
            Int32 sizePos4LevelPic = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4LevelPic = destBuf.getUsedSize();

            Int32 realSize4LevelPic = TdrTypeUtil.cstrlen(this.LevelPic);

            if (realSize4LevelPic >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.LevelPic, realSize4LevelPic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.LevelPic */
            Int32 size4LevelPic = destBuf.getUsedSize() - beginPos4LevelPic;
            ret = destBuf.writeUInt32((UInt32)(size4LevelPic), sizePos4LevelPic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HasBoss */
        {
            ret = destBuf.writeUInt8(this.HasBoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LevelDes */
        {
            /* record sizeinfo position */
            Int32 sizePos4LevelDes = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4LevelDes = destBuf.getUsedSize();

            Int32 realSize4LevelDes = TdrTypeUtil.cstrlen(this.LevelDes);

            if (realSize4LevelDes >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.LevelDes, realSize4LevelDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.LevelDes */
            Int32 size4LevelDes = destBuf.getUsedSize() - beginPos4LevelDes;
            ret = destBuf.writeUInt32((UInt32)(size4LevelDes), sizePos4LevelDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StoryNum */
        {
            /* record sizeinfo position */
            Int32 sizePos4StoryNum = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4StoryNum = destBuf.getUsedSize();

            Int32 realSize4StoryNum = TdrTypeUtil.cstrlen(this.StoryNum);

            if (realSize4StoryNum >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.StoryNum, realSize4StoryNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.StoryNum */
            Int32 size4StoryNum = destBuf.getUsedSize() - beginPos4StoryNum;
            ret = destBuf.writeUInt32((UInt32)(size4StoryNum), sizePos4StoryNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ReviveCount */
        {
            ret = destBuf.writeUInt8(this.ReviveCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ReviveCostType */
        {
            ret = destBuf.writeInt32(this.ReviveCostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LevelMaxTime */
        {
            ret = destBuf.writeUInt32(this.LevelMaxTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ReviveCost */
        {
            for (Int32 ReviveCost_i = 0; ReviveCost_i < 3; ReviveCost_i++)
            {
                ret = destBuf.writeInt32(this.ReviveCost[ReviveCost_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.DifficultData */
        {
            for (Int32 DifficultData_i = 0; DifficultData_i < 2; DifficultData_i++)
            {
                ret = this.DifficultData[DifficultData_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.BossMusic */
        {
            /* record sizeinfo position */
            Int32 sizePos4BossMusic = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4BossMusic = destBuf.getUsedSize();

            Int32 realSize4BossMusic = TdrTypeUtil.cstrlen(this.BossMusic);

            if (realSize4BossMusic >= 28)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.BossMusic, realSize4BossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.BossMusic */
            Int32 size4BossMusic = destBuf.getUsedSize() - beginPos4BossMusic;
            ret = destBuf.writeUInt32((UInt32)(size4BossMusic), sizePos4BossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SucBossMusic */
        {
            /* record sizeinfo position */
            Int32 sizePos4SucBossMusic = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4SucBossMusic = destBuf.getUsedSize();

            Int32 realSize4SucBossMusic = TdrTypeUtil.cstrlen(this.SucBossMusic);

            if (realSize4SucBossMusic >= 28)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.SucBossMusic, realSize4SucBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.SucBossMusic */
            Int32 size4SucBossMusic = destBuf.getUsedSize() - beginPos4SucBossMusic;
            ret = destBuf.writeUInt32((UInt32)(size4SucBossMusic), sizePos4SucBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FailBossMusic */
        {
            /* record sizeinfo position */
            Int32 sizePos4FailBossMusic = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4FailBossMusic = destBuf.getUsedSize();

            Int32 realSize4FailBossMusic = TdrTypeUtil.cstrlen(this.FailBossMusic);

            if (realSize4FailBossMusic >= 28)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.FailBossMusic, realSize4FailBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.FailBossMusic */
            Int32 size4FailBossMusic = destBuf.getUsedSize() - beginPos4FailBossMusic;
            ret = destBuf.writeUInt32((UInt32)(size4FailBossMusic), sizePos4FailBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MapPosX */
        {
            ret = destBuf.writeUInt32(this.MapPosX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MapPosY */
        {
            ret = destBuf.writeUInt32(this.MapPosY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GameLevelConf.CURRVERSION < cutVer)
        {
            cutVer = GameLevelConf.CURRVERSION;
        }

        /* check cutversion */
        if (GameLevelConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.LevelID */
        {
            ret = srcBuf.readUInt32(ref this.LevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LevelType */
        {
            ret = srcBuf.readUInt8(ref this.LevelType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szLevelName */
        {
            /* get sizeinfo for this.szLevelName */
            UInt32 size4szLevelName = 0;
            ret = srcBuf.readUInt32(ref size4szLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szLevelName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szLevelName > this.szLevelName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szLevelName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szLevelName, (int)size4szLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szLevelName[(int)size4szLevelName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szLevelName = TdrTypeUtil.cstrlen(this.szLevelName) + 1;
            if (size4szLevelName != realSize4szLevelName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ChildLevel1 */
        {
            /* get sizeinfo for this.ChildLevel1 */
            UInt32 size4ChildLevel1 = 0;
            ret = srcBuf.readUInt32(ref size4ChildLevel1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4ChildLevel1 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4ChildLevel1 > this.ChildLevel1.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4ChildLevel1)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.ChildLevel1, (int)size4ChildLevel1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.ChildLevel1[(int)size4ChildLevel1 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4ChildLevel1 = TdrTypeUtil.cstrlen(this.ChildLevel1) + 1;
            if (size4ChildLevel1 != realSize4ChildLevel1)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.LevelPic */
        {
            /* get sizeinfo for this.LevelPic */
            UInt32 size4LevelPic = 0;
            ret = srcBuf.readUInt32(ref size4LevelPic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4LevelPic > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4LevelPic > this.LevelPic.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4LevelPic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.LevelPic, (int)size4LevelPic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.LevelPic[(int)size4LevelPic - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4LevelPic = TdrTypeUtil.cstrlen(this.LevelPic) + 1;
            if (size4LevelPic != realSize4LevelPic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HasBoss */
        {
            ret = srcBuf.readUInt8(ref this.HasBoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LevelDes */
        {
            /* get sizeinfo for this.LevelDes */
            UInt32 size4LevelDes = 0;
            ret = srcBuf.readUInt32(ref size4LevelDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4LevelDes > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4LevelDes > this.LevelDes.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4LevelDes)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.LevelDes, (int)size4LevelDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.LevelDes[(int)size4LevelDes - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4LevelDes = TdrTypeUtil.cstrlen(this.LevelDes) + 1;
            if (size4LevelDes != realSize4LevelDes)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.StoryNum */
        {
            /* get sizeinfo for this.StoryNum */
            UInt32 size4StoryNum = 0;
            ret = srcBuf.readUInt32(ref size4StoryNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4StoryNum > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4StoryNum > this.StoryNum.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4StoryNum)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.StoryNum, (int)size4StoryNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.StoryNum[(int)size4StoryNum - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4StoryNum = TdrTypeUtil.cstrlen(this.StoryNum) + 1;
            if (size4StoryNum != realSize4StoryNum)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ReviveCount */
        {
            ret = srcBuf.readUInt8(ref this.ReviveCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ReviveCostType */
        {
            ret = srcBuf.readInt32(ref this.ReviveCostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LevelMaxTime */
        {
            ret = srcBuf.readUInt32(ref this.LevelMaxTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ReviveCost */
        {
            for (Int32 ReviveCost_i = 0; ReviveCost_i < 3; ReviveCost_i++)
            {
                ret = srcBuf.readInt32(ref this.ReviveCost[ReviveCost_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.DifficultData */
        {
            for (Int32 DifficultData_i = 0; DifficultData_i < 2; DifficultData_i++)
            {
                ret = this.DifficultData[DifficultData_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.BossMusic */
        {
            /* get sizeinfo for this.BossMusic */
            UInt32 size4BossMusic = 0;
            ret = srcBuf.readUInt32(ref size4BossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4BossMusic > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4BossMusic > this.BossMusic.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4BossMusic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.BossMusic, (int)size4BossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.BossMusic[(int)size4BossMusic - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4BossMusic = TdrTypeUtil.cstrlen(this.BossMusic) + 1;
            if (size4BossMusic != realSize4BossMusic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.SucBossMusic */
        {
            /* get sizeinfo for this.SucBossMusic */
            UInt32 size4SucBossMusic = 0;
            ret = srcBuf.readUInt32(ref size4SucBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4SucBossMusic > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4SucBossMusic > this.SucBossMusic.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4SucBossMusic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.SucBossMusic, (int)size4SucBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.SucBossMusic[(int)size4SucBossMusic - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4SucBossMusic = TdrTypeUtil.cstrlen(this.SucBossMusic) + 1;
            if (size4SucBossMusic != realSize4SucBossMusic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.FailBossMusic */
        {
            /* get sizeinfo for this.FailBossMusic */
            UInt32 size4FailBossMusic = 0;
            ret = srcBuf.readUInt32(ref size4FailBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4FailBossMusic > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4FailBossMusic > this.FailBossMusic.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4FailBossMusic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.FailBossMusic, (int)size4FailBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.FailBossMusic[(int)size4FailBossMusic - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4FailBossMusic = TdrTypeUtil.cstrlen(this.FailBossMusic) + 1;
            if (size4FailBossMusic != realSize4FailBossMusic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.MapPosX */
        {
            ret = srcBuf.readUInt32(ref this.MapPosX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MapPosY */
        {
            ret = srcBuf.readUInt32(ref this.MapPosY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GameLevelConf.CURRVERSION < cutVer)
        {
            cutVer = GameLevelConf.CURRVERSION;
        }

        /* check cutversion */
        if (GameLevelConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.LevelID */
        {
            ret = srcBuf.readUInt32(ref this.LevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LevelType */
        {
            ret = srcBuf.readUInt8(ref this.LevelType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szLevelName */
        {
            Int32 size4szLevelName = 40;

            /* load */
            ret = srcBuf.readCString(ref this.szLevelName, (int)size4szLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ChildLevel1 */
        {
            Int32 size4ChildLevel1 = 20;

            /* load */
            ret = srcBuf.readCString(ref this.ChildLevel1, (int)size4ChildLevel1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.LevelPic */
        {
            Int32 size4LevelPic = 20;

            /* load */
            ret = srcBuf.readCString(ref this.LevelPic, (int)size4LevelPic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HasBoss */
        {
            ret = srcBuf.readUInt8(ref this.HasBoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LevelDes */
        {
            Int32 size4LevelDes = 256;

            /* load */
            ret = srcBuf.readCString(ref this.LevelDes, (int)size4LevelDes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.StoryNum */
        {
            Int32 size4StoryNum = 20;

            /* load */
            ret = srcBuf.readCString(ref this.StoryNum, (int)size4StoryNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ReviveCount */
        {
            ret = srcBuf.readUInt8(ref this.ReviveCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ReviveCostType */
        {
            ret = srcBuf.readInt32(ref this.ReviveCostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LevelMaxTime */
        {
            ret = srcBuf.readUInt32(ref this.LevelMaxTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ReviveCost */
        {
            for (Int32 ReviveCost_i = 0; ReviveCost_i < 3; ReviveCost_i++)
            {
                ret = srcBuf.readInt32(ref this.ReviveCost[ReviveCost_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.DifficultData */
        {
            for (Int32 DifficultData_i = 0; DifficultData_i < 2; DifficultData_i++)
            {
                ret = this.DifficultData[DifficultData_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.BossMusic */
        {
            Int32 size4BossMusic = 28;

            /* load */
            ret = srcBuf.readCString(ref this.BossMusic, (int)size4BossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.SucBossMusic */
        {
            Int32 size4SucBossMusic = 28;

            /* load */
            ret = srcBuf.readCString(ref this.SucBossMusic, (int)size4SucBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.FailBossMusic */
        {
            Int32 size4FailBossMusic = 28;

            /* load */
            ret = srcBuf.readCString(ref this.FailBossMusic, (int)size4FailBossMusic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.MapPosX */
        {
            ret = srcBuf.readUInt32(ref this.MapPosX);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MapPosY */
        {
            ret = srcBuf.readUInt32(ref this.MapPosY);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.LevelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LevelID]", "{0:d}", this.LevelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LevelType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LevelType]", "0x{0:x2}", this.LevelType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szLevelName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szLevelName]", this.szLevelName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChildLevel1 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[ChildLevel1]", this.ChildLevel1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LevelPic */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[LevelPic]", this.LevelPic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HasBoss */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HasBoss]", "0x{0:x2}", this.HasBoss);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LevelDes */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[LevelDes]", this.LevelDes);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StoryNum */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[StoryNum]", this.StoryNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ReviveCount */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ReviveCount]", "0x{0:x2}", this.ReviveCount);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ReviveCostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ReviveCostType]", "{0:d}", this.ReviveCostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LevelMaxTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LevelMaxTime]", "{0:d}", this.LevelMaxTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ReviveCost */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[ReviveCost]", 3);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 ReviveCost_i = 0; ReviveCost_i < 3; ReviveCost_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.ReviveCost[ReviveCost_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DifficultData */
        for (Int32 DifficultData_i = 0; DifficultData_i < 2; DifficultData_i++)
        {
            if (null == this.DifficultData[DifficultData_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DifficultData]", DifficultData_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.DifficultData[DifficultData_i] */
            if (0 > indent)
            {
                ret = this.DifficultData[DifficultData_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.DifficultData[DifficultData_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.BossMusic */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BossMusic]", this.BossMusic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SucBossMusic */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[SucBossMusic]", this.SucBossMusic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FailBossMusic */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[FailBossMusic]", this.FailBossMusic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MapPosX */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MapPosX]", "{0:d}", this.MapPosX);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MapPosY */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MapPosY]", "{0:d}", this.MapPosY);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class GameLevelBufferPrice : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 BufferId;
    public UInt16 GoldNum;

    /* construct methods */
    public GameLevelBufferPrice()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GameLevelBufferPrice.CURRVERSION < cutVer)
        {
            cutVer = GameLevelBufferPrice.CURRVERSION;
        }

        /* check cutversion */
        if (GameLevelBufferPrice.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.BufferId */
        {
            ret = destBuf.writeUInt32(this.BufferId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GoldNum */
        {
            ret = destBuf.writeUInt16(this.GoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GameLevelBufferPrice.CURRVERSION < cutVer)
        {
            cutVer = GameLevelBufferPrice.CURRVERSION;
        }

        /* check cutversion */
        if (GameLevelBufferPrice.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.BufferId */
        {
            ret = srcBuf.readUInt32(ref this.BufferId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GoldNum */
        {
            ret = srcBuf.readUInt16(ref this.GoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GameLevelBufferPrice.CURRVERSION < cutVer)
        {
            cutVer = GameLevelBufferPrice.CURRVERSION;
        }

        /* check cutversion */
        if (GameLevelBufferPrice.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.BufferId */
        {
            ret = srcBuf.readUInt32(ref this.BufferId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GoldNum */
        {
            ret = srcBuf.readUInt16(ref this.GoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.BufferId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BufferId]", "{0:d}", this.BufferId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GoldNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GoldNum]", "{0:d}", this.GoldNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class BigLevelInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 BigLevelID;
    public byte[] szBigLevelName;
    public byte[] szBigLevelMapPath;
    public UInt32 NormalOpenLv; // 即角色等级达到多少级时才会开放本章节
    public UInt32 HardOpenLv; // 即角色等级达到多少级时才会开放本章节

    /* construct methods */
    public BigLevelInfo()
    {
        szBigLevelName = new byte[40];
        szBigLevelMapPath = new byte[30];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BigLevelInfo.CURRVERSION < cutVer)
        {
            cutVer = BigLevelInfo.CURRVERSION;
        }

        /* check cutversion */
        if (BigLevelInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.BigLevelID */
        {
            ret = destBuf.writeUInt32(this.BigLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szBigLevelName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szBigLevelName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szBigLevelName = destBuf.getUsedSize();

            Int32 realSize4szBigLevelName = TdrTypeUtil.cstrlen(this.szBigLevelName);

            if (realSize4szBigLevelName >= 40)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szBigLevelName, realSize4szBigLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szBigLevelName */
            Int32 size4szBigLevelName = destBuf.getUsedSize() - beginPos4szBigLevelName;
            ret = destBuf.writeUInt32((UInt32)(size4szBigLevelName), sizePos4szBigLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szBigLevelMapPath */
        {
            /* record sizeinfo position */
            Int32 sizePos4szBigLevelMapPath = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szBigLevelMapPath = destBuf.getUsedSize();

            Int32 realSize4szBigLevelMapPath = TdrTypeUtil.cstrlen(this.szBigLevelMapPath);

            if (realSize4szBigLevelMapPath >= 30)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szBigLevelMapPath, realSize4szBigLevelMapPath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szBigLevelMapPath */
            Int32 size4szBigLevelMapPath = destBuf.getUsedSize() - beginPos4szBigLevelMapPath;
            ret = destBuf.writeUInt32((UInt32)(size4szBigLevelMapPath), sizePos4szBigLevelMapPath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NormalOpenLv */
        {
            ret = destBuf.writeUInt32(this.NormalOpenLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HardOpenLv */
        {
            ret = destBuf.writeUInt32(this.HardOpenLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BigLevelInfo.CURRVERSION < cutVer)
        {
            cutVer = BigLevelInfo.CURRVERSION;
        }

        /* check cutversion */
        if (BigLevelInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.BigLevelID */
        {
            ret = srcBuf.readUInt32(ref this.BigLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szBigLevelName */
        {
            /* get sizeinfo for this.szBigLevelName */
            UInt32 size4szBigLevelName = 0;
            ret = srcBuf.readUInt32(ref size4szBigLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szBigLevelName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szBigLevelName > this.szBigLevelName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szBigLevelName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szBigLevelName, (int)size4szBigLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szBigLevelName[(int)size4szBigLevelName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szBigLevelName = TdrTypeUtil.cstrlen(this.szBigLevelName) + 1;
            if (size4szBigLevelName != realSize4szBigLevelName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szBigLevelMapPath */
        {
            /* get sizeinfo for this.szBigLevelMapPath */
            UInt32 size4szBigLevelMapPath = 0;
            ret = srcBuf.readUInt32(ref size4szBigLevelMapPath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szBigLevelMapPath > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szBigLevelMapPath > this.szBigLevelMapPath.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szBigLevelMapPath)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szBigLevelMapPath, (int)size4szBigLevelMapPath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szBigLevelMapPath[(int)size4szBigLevelMapPath - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szBigLevelMapPath = TdrTypeUtil.cstrlen(this.szBigLevelMapPath) + 1;
            if (size4szBigLevelMapPath != realSize4szBigLevelMapPath)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.NormalOpenLv */
        {
            ret = srcBuf.readUInt32(ref this.NormalOpenLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HardOpenLv */
        {
            ret = srcBuf.readUInt32(ref this.HardOpenLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BigLevelInfo.CURRVERSION < cutVer)
        {
            cutVer = BigLevelInfo.CURRVERSION;
        }

        /* check cutversion */
        if (BigLevelInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.BigLevelID */
        {
            ret = srcBuf.readUInt32(ref this.BigLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szBigLevelName */
        {
            Int32 size4szBigLevelName = 40;

            /* load */
            ret = srcBuf.readCString(ref this.szBigLevelName, (int)size4szBigLevelName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szBigLevelMapPath */
        {
            Int32 size4szBigLevelMapPath = 30;

            /* load */
            ret = srcBuf.readCString(ref this.szBigLevelMapPath, (int)size4szBigLevelMapPath);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.NormalOpenLv */
        {
            ret = srcBuf.readUInt32(ref this.NormalOpenLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HardOpenLv */
        {
            ret = srcBuf.readUInt32(ref this.HardOpenLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.BigLevelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BigLevelID]", "{0:d}", this.BigLevelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szBigLevelName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szBigLevelName]", this.szBigLevelName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szBigLevelMapPath */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szBigLevelMapPath]", this.szBigLevelMapPath);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NormalOpenLv */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NormalOpenLv]", "{0:d}", this.NormalOpenLv);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HardOpenLv */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HardOpenLv]", "{0:d}", this.HardOpenLv);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class LevelScenarioInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 LevelID;
    public UInt32[] EnterScnID;
    public UInt32 BossScnID;
    public UInt32 VictoryScnID;
    public UInt32 EnterLevelID;

    /* construct methods */
    public LevelScenarioInfo()
    {
        EnterScnID = new UInt32[3];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelScenarioInfo.CURRVERSION < cutVer)
        {
            cutVer = LevelScenarioInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LevelScenarioInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.LevelID */
        {
            ret = destBuf.writeUInt32(this.LevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnterScnID */
        {
            for (Int32 EnterScnID_i = 0; EnterScnID_i < 3; EnterScnID_i++)
            {
                ret = destBuf.writeUInt32(this.EnterScnID[EnterScnID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.BossScnID */
        {
            ret = destBuf.writeUInt32(this.BossScnID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.VictoryScnID */
        {
            ret = destBuf.writeUInt32(this.VictoryScnID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnterLevelID */
        {
            ret = destBuf.writeUInt32(this.EnterLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelScenarioInfo.CURRVERSION < cutVer)
        {
            cutVer = LevelScenarioInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LevelScenarioInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.LevelID */
        {
            ret = srcBuf.readUInt32(ref this.LevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnterScnID */
        {
            for (Int32 EnterScnID_i = 0; EnterScnID_i < 3; EnterScnID_i++)
            {
                ret = srcBuf.readUInt32(ref this.EnterScnID[EnterScnID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.BossScnID */
        {
            ret = srcBuf.readUInt32(ref this.BossScnID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.VictoryScnID */
        {
            ret = srcBuf.readUInt32(ref this.VictoryScnID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnterLevelID */
        {
            ret = srcBuf.readUInt32(ref this.EnterLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelScenarioInfo.CURRVERSION < cutVer)
        {
            cutVer = LevelScenarioInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LevelScenarioInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.LevelID */
        {
            ret = srcBuf.readUInt32(ref this.LevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnterScnID */
        {
            for (Int32 EnterScnID_i = 0; EnterScnID_i < 3; EnterScnID_i++)
            {
                ret = srcBuf.readUInt32(ref this.EnterScnID[EnterScnID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.BossScnID */
        {
            ret = srcBuf.readUInt32(ref this.BossScnID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.VictoryScnID */
        {
            ret = srcBuf.readUInt32(ref this.VictoryScnID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnterLevelID */
        {
            ret = srcBuf.readUInt32(ref this.EnterLevelID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.LevelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LevelID]", "{0:d}", this.LevelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnterScnID */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[EnterScnID]", 3);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 EnterScnID_i = 0; EnterScnID_i < 3; EnterScnID_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.EnterScnID[EnterScnID_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossScnID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossScnID]", "{0:d}", this.BossScnID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.VictoryScnID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[VictoryScnID]", "{0:d}", this.VictoryScnID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnterLevelID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnterLevelID]", "{0:d}", this.EnterLevelID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class LevelScenarioTriggerConf : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Id;
    public UInt32 EnterLevelScenarioId;
    public UInt32 MeetBossScenarioId;
    public UInt32 VictoryScenarioId;

    /* construct methods */
    public LevelScenarioTriggerConf()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelScenarioTriggerConf.CURRVERSION < cutVer)
        {
            cutVer = LevelScenarioTriggerConf.CURRVERSION;
        }

        /* check cutversion */
        if (LevelScenarioTriggerConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Id */
        {
            ret = destBuf.writeUInt32(this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnterLevelScenarioId */
        {
            ret = destBuf.writeUInt32(this.EnterLevelScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MeetBossScenarioId */
        {
            ret = destBuf.writeUInt32(this.MeetBossScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.VictoryScenarioId */
        {
            ret = destBuf.writeUInt32(this.VictoryScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelScenarioTriggerConf.CURRVERSION < cutVer)
        {
            cutVer = LevelScenarioTriggerConf.CURRVERSION;
        }

        /* check cutversion */
        if (LevelScenarioTriggerConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnterLevelScenarioId */
        {
            ret = srcBuf.readUInt32(ref this.EnterLevelScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MeetBossScenarioId */
        {
            ret = srcBuf.readUInt32(ref this.MeetBossScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.VictoryScenarioId */
        {
            ret = srcBuf.readUInt32(ref this.VictoryScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelScenarioTriggerConf.CURRVERSION < cutVer)
        {
            cutVer = LevelScenarioTriggerConf.CURRVERSION;
        }

        /* check cutversion */
        if (LevelScenarioTriggerConf.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnterLevelScenarioId */
        {
            ret = srcBuf.readUInt32(ref this.EnterLevelScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MeetBossScenarioId */
        {
            ret = srcBuf.readUInt32(ref this.MeetBossScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.VictoryScenarioId */
        {
            ret = srcBuf.readUInt32(ref this.VictoryScenarioId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Id */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Id]", "{0:d}", this.Id);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnterLevelScenarioId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnterLevelScenarioId]", "{0:d}", this.EnterLevelScenarioId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MeetBossScenarioId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MeetBossScenarioId]", "{0:d}", this.MeetBossScenarioId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.VictoryScenarioId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[VictoryScenarioId]", "{0:d}", this.VictoryScenarioId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class LevelReset : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Difficult;
    public UInt32 ResetTimes;
    public UInt32 Price;

    /* construct methods */
    public LevelReset()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelReset.CURRVERSION < cutVer)
        {
            cutVer = LevelReset.CURRVERSION;
        }

        /* check cutversion */
        if (LevelReset.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Difficult */
        {
            ret = destBuf.writeUInt32(this.Difficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ResetTimes */
        {
            ret = destBuf.writeUInt32(this.ResetTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Price */
        {
            ret = destBuf.writeUInt32(this.Price);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelReset.CURRVERSION < cutVer)
        {
            cutVer = LevelReset.CURRVERSION;
        }

        /* check cutversion */
        if (LevelReset.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Difficult */
        {
            ret = srcBuf.readUInt32(ref this.Difficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ResetTimes */
        {
            ret = srcBuf.readUInt32(ref this.ResetTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Price */
        {
            ret = srcBuf.readUInt32(ref this.Price);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LevelReset.CURRVERSION < cutVer)
        {
            cutVer = LevelReset.CURRVERSION;
        }

        /* check cutversion */
        if (LevelReset.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Difficult */
        {
            ret = srcBuf.readUInt32(ref this.Difficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ResetTimes */
        {
            ret = srcBuf.readUInt32(ref this.ResetTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Price */
        {
            ret = srcBuf.readUInt32(ref this.Price);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Difficult */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Difficult]", "{0:d}", this.Difficult);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ResetTimes */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResetTimes]", "{0:d}", this.ResetTimes);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Price */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Price]", "{0:d}", this.Price);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
