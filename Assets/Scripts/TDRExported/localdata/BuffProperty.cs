/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 6cefa806c511bec55153407a0f8b612c */

/* creation time: Fri May 08 19:44:29 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public enum  EBUFF_VALUE_CALC_TYPE
{
    EBUFF_VALUE_CALC_ABSOLUTE = 0,
    EBUFF_VALUE_CALC_PERCENTAGE = 1,
    EBUFF_VALUE_CALC_TYPE_COUNT = 2,
}
public enum  EBUFF_STACK_TYPE
{
    EBUFF_STACK_SAMETYPE_INSTEAD = 0,
    EBUFF_STACK_SAMETYPE_STACK = 1,
    EBUFF_STACK_TYPE_COUNT = 2,
}
public enum  eEffectActiveType
{
    EAT_None = 0,
    EAT_Init = 1,
    EAT_Update = 2,
    EAT_Destory = 4,
}
public enum  eBuffEffect
{
    BE_NONE = 0,
    BE_DISABLE_MOVE = 1,
    BE_DISABLE_SKILL = 2,
    BE_DISABLE_ATTACK = 3,
    BE_INVISIBLE = 4,
    BE_VISIBLE = 5,
    BE_CHANGE_HP = 6,
    BE_CHANGE_MP = 7,
    BE_CHANGE_HP_MAX = 8,
    BE_CHANGE_MP_MAX = 9,
    BE_CHANGE_DEFEND = 10,
    BE_CHANGE_ATTACK = 11,
    BE_ADD_BUFF = 12,
    BE_CHANGE_ATTACKSPEED = 13,
    BE_CHANGE_RUNSPEED = 14,
    BE_MAGIC_ATTACK = 15,
    BE_MAGIC_DEFEND = 16,
    BE_CRITCAL_PER = 17,
    BE_CRITCAL_DEFEND = 18,
    BE_HIT_RATE = 19,
    BE_DODGE_RATE = 20,
    BE_MAGIC_IMMUNO = 21,
    BE_ATTACK_RANGE = 22,
    BE_CRITCAL_MULTIPLE = 23,
    BE_EJECTIONED = 24,
    BE_MAX_TARGET_NUM = 25,
    BE_COUNT = 26,
}


public class BuffProperty : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ID;
    public byte[] Name;
    public UInt32 BuffVisualID;
    public UInt32 Level;
    public UInt16 TeamStackCount; // 战队叠加数
    public UInt32 OnBuffAnimationKey;
    public UInt32 StackType;
    public UInt32 StackCount;
    public float TimeDuration;
    public UInt32 TimeType;
    public UInt32 CanClear;
    public UInt32 EffectType1;
    public byte[] EffectParam1;
    public UInt32 EffectType2;
    public byte[] EffectParam2;
    public UInt32 EffectType3;
    public byte[] EffectParam3;
    public UInt32 EffectType4;
    public byte[] EffectParam4;
    public UInt32 EffectType5;
    public byte[] EffectParam5;
    public UInt32 EffectType6;
    public byte[] EffectParam6;

    /* construct methods */
    public BuffProperty()
    {
        Name = new byte[64];
        EffectParam1 = new byte[64];
        EffectParam2 = new byte[64];
        EffectParam3 = new byte[64];
        EffectParam4 = new byte[64];
        EffectParam5 = new byte[64];
        EffectParam6 = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BuffProperty.CURRVERSION < cutVer)
        {
            cutVer = BuffProperty.CURRVERSION;
        }

        /* check cutversion */
        if (BuffProperty.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ID */
        {
            ret = destBuf.writeUInt32(this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Name */
        {
            /* record sizeinfo position */
            Int32 sizePos4Name = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Name = destBuf.getUsedSize();

            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name);

            if (realSize4Name >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Name, realSize4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Name */
            Int32 size4Name = destBuf.getUsedSize() - beginPos4Name;
            ret = destBuf.writeUInt32((UInt32)(size4Name), sizePos4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BuffVisualID */
        {
            ret = destBuf.writeUInt32(this.BuffVisualID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeUInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TeamStackCount */
        {
            ret = destBuf.writeUInt16(this.TeamStackCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnBuffAnimationKey */
        {
            ret = destBuf.writeUInt32(this.OnBuffAnimationKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StackType */
        {
            ret = destBuf.writeUInt32(this.StackType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StackCount */
        {
            ret = destBuf.writeUInt32(this.StackCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TimeDuration */
        {
            ret = destBuf.writeFloat(this.TimeDuration);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TimeType */
        {
            ret = destBuf.writeUInt32(this.TimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CanClear */
        {
            ret = destBuf.writeUInt32(this.CanClear);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType1 */
        {
            ret = destBuf.writeUInt32(this.EffectType1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParam1 */
        {
            /* record sizeinfo position */
            Int32 sizePos4EffectParam1 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EffectParam1 = destBuf.getUsedSize();

            Int32 realSize4EffectParam1 = TdrTypeUtil.cstrlen(this.EffectParam1);

            if (realSize4EffectParam1 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EffectParam1, realSize4EffectParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EffectParam1 */
            Int32 size4EffectParam1 = destBuf.getUsedSize() - beginPos4EffectParam1;
            ret = destBuf.writeUInt32((UInt32)(size4EffectParam1), sizePos4EffectParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType2 */
        {
            ret = destBuf.writeUInt32(this.EffectType2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParam2 */
        {
            /* record sizeinfo position */
            Int32 sizePos4EffectParam2 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EffectParam2 = destBuf.getUsedSize();

            Int32 realSize4EffectParam2 = TdrTypeUtil.cstrlen(this.EffectParam2);

            if (realSize4EffectParam2 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EffectParam2, realSize4EffectParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EffectParam2 */
            Int32 size4EffectParam2 = destBuf.getUsedSize() - beginPos4EffectParam2;
            ret = destBuf.writeUInt32((UInt32)(size4EffectParam2), sizePos4EffectParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType3 */
        {
            ret = destBuf.writeUInt32(this.EffectType3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParam3 */
        {
            /* record sizeinfo position */
            Int32 sizePos4EffectParam3 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EffectParam3 = destBuf.getUsedSize();

            Int32 realSize4EffectParam3 = TdrTypeUtil.cstrlen(this.EffectParam3);

            if (realSize4EffectParam3 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EffectParam3, realSize4EffectParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EffectParam3 */
            Int32 size4EffectParam3 = destBuf.getUsedSize() - beginPos4EffectParam3;
            ret = destBuf.writeUInt32((UInt32)(size4EffectParam3), sizePos4EffectParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType4 */
        {
            ret = destBuf.writeUInt32(this.EffectType4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParam4 */
        {
            /* record sizeinfo position */
            Int32 sizePos4EffectParam4 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EffectParam4 = destBuf.getUsedSize();

            Int32 realSize4EffectParam4 = TdrTypeUtil.cstrlen(this.EffectParam4);

            if (realSize4EffectParam4 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EffectParam4, realSize4EffectParam4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EffectParam4 */
            Int32 size4EffectParam4 = destBuf.getUsedSize() - beginPos4EffectParam4;
            ret = destBuf.writeUInt32((UInt32)(size4EffectParam4), sizePos4EffectParam4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType5 */
        {
            ret = destBuf.writeUInt32(this.EffectType5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParam5 */
        {
            /* record sizeinfo position */
            Int32 sizePos4EffectParam5 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EffectParam5 = destBuf.getUsedSize();

            Int32 realSize4EffectParam5 = TdrTypeUtil.cstrlen(this.EffectParam5);

            if (realSize4EffectParam5 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EffectParam5, realSize4EffectParam5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EffectParam5 */
            Int32 size4EffectParam5 = destBuf.getUsedSize() - beginPos4EffectParam5;
            ret = destBuf.writeUInt32((UInt32)(size4EffectParam5), sizePos4EffectParam5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType6 */
        {
            ret = destBuf.writeUInt32(this.EffectType6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParam6 */
        {
            /* record sizeinfo position */
            Int32 sizePos4EffectParam6 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4EffectParam6 = destBuf.getUsedSize();

            Int32 realSize4EffectParam6 = TdrTypeUtil.cstrlen(this.EffectParam6);

            if (realSize4EffectParam6 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.EffectParam6, realSize4EffectParam6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.EffectParam6 */
            Int32 size4EffectParam6 = destBuf.getUsedSize() - beginPos4EffectParam6;
            ret = destBuf.writeUInt32((UInt32)(size4EffectParam6), sizePos4EffectParam6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BuffProperty.CURRVERSION < cutVer)
        {
            cutVer = BuffProperty.CURRVERSION;
        }

        /* check cutversion */
        if (BuffProperty.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Name */
        {
            /* get sizeinfo for this.Name */
            UInt32 size4Name = 0;
            ret = srcBuf.readUInt32(ref size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Name > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Name > this.Name.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Name[(int)size4Name - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name) + 1;
            if (size4Name != realSize4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BuffVisualID */
        {
            ret = srcBuf.readUInt32(ref this.BuffVisualID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TeamStackCount */
        {
            ret = srcBuf.readUInt16(ref this.TeamStackCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnBuffAnimationKey */
        {
            ret = srcBuf.readUInt32(ref this.OnBuffAnimationKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StackType */
        {
            ret = srcBuf.readUInt32(ref this.StackType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StackCount */
        {
            ret = srcBuf.readUInt32(ref this.StackCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TimeDuration */
        {
            ret = srcBuf.readFloat(ref this.TimeDuration);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TimeType */
        {
            ret = srcBuf.readUInt32(ref this.TimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CanClear */
        {
            ret = srcBuf.readUInt32(ref this.CanClear);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectType1 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParam1 */
        {
            /* get sizeinfo for this.EffectParam1 */
            UInt32 size4EffectParam1 = 0;
            ret = srcBuf.readUInt32(ref size4EffectParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EffectParam1 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EffectParam1 > this.EffectParam1.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EffectParam1)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EffectParam1, (int)size4EffectParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EffectParam1[(int)size4EffectParam1 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EffectParam1 = TdrTypeUtil.cstrlen(this.EffectParam1) + 1;
            if (size4EffectParam1 != realSize4EffectParam1)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EffectType2 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParam2 */
        {
            /* get sizeinfo for this.EffectParam2 */
            UInt32 size4EffectParam2 = 0;
            ret = srcBuf.readUInt32(ref size4EffectParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EffectParam2 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EffectParam2 > this.EffectParam2.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EffectParam2)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EffectParam2, (int)size4EffectParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EffectParam2[(int)size4EffectParam2 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EffectParam2 = TdrTypeUtil.cstrlen(this.EffectParam2) + 1;
            if (size4EffectParam2 != realSize4EffectParam2)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EffectType3 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParam3 */
        {
            /* get sizeinfo for this.EffectParam3 */
            UInt32 size4EffectParam3 = 0;
            ret = srcBuf.readUInt32(ref size4EffectParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EffectParam3 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EffectParam3 > this.EffectParam3.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EffectParam3)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EffectParam3, (int)size4EffectParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EffectParam3[(int)size4EffectParam3 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EffectParam3 = TdrTypeUtil.cstrlen(this.EffectParam3) + 1;
            if (size4EffectParam3 != realSize4EffectParam3)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EffectType4 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParam4 */
        {
            /* get sizeinfo for this.EffectParam4 */
            UInt32 size4EffectParam4 = 0;
            ret = srcBuf.readUInt32(ref size4EffectParam4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EffectParam4 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EffectParam4 > this.EffectParam4.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EffectParam4)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EffectParam4, (int)size4EffectParam4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EffectParam4[(int)size4EffectParam4 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EffectParam4 = TdrTypeUtil.cstrlen(this.EffectParam4) + 1;
            if (size4EffectParam4 != realSize4EffectParam4)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EffectType5 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParam5 */
        {
            /* get sizeinfo for this.EffectParam5 */
            UInt32 size4EffectParam5 = 0;
            ret = srcBuf.readUInt32(ref size4EffectParam5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EffectParam5 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EffectParam5 > this.EffectParam5.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EffectParam5)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EffectParam5, (int)size4EffectParam5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EffectParam5[(int)size4EffectParam5 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EffectParam5 = TdrTypeUtil.cstrlen(this.EffectParam5) + 1;
            if (size4EffectParam5 != realSize4EffectParam5)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EffectType6 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParam6 */
        {
            /* get sizeinfo for this.EffectParam6 */
            UInt32 size4EffectParam6 = 0;
            ret = srcBuf.readUInt32(ref size4EffectParam6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4EffectParam6 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4EffectParam6 > this.EffectParam6.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4EffectParam6)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.EffectParam6, (int)size4EffectParam6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.EffectParam6[(int)size4EffectParam6 - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4EffectParam6 = TdrTypeUtil.cstrlen(this.EffectParam6) + 1;
            if (size4EffectParam6 != realSize4EffectParam6)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BuffProperty.CURRVERSION < cutVer)
        {
            cutVer = BuffProperty.CURRVERSION;
        }

        /* check cutversion */
        if (BuffProperty.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Name */
        {
            Int32 size4Name = 64;

            /* load */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BuffVisualID */
        {
            ret = srcBuf.readUInt32(ref this.BuffVisualID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TeamStackCount */
        {
            ret = srcBuf.readUInt16(ref this.TeamStackCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnBuffAnimationKey */
        {
            ret = srcBuf.readUInt32(ref this.OnBuffAnimationKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StackType */
        {
            ret = srcBuf.readUInt32(ref this.StackType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StackCount */
        {
            ret = srcBuf.readUInt32(ref this.StackCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TimeDuration */
        {
            ret = srcBuf.readFloat(ref this.TimeDuration);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TimeType */
        {
            ret = srcBuf.readUInt32(ref this.TimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CanClear */
        {
            ret = srcBuf.readUInt32(ref this.CanClear);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectType1 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParam1 */
        {
            Int32 size4EffectParam1 = 64;

            /* load */
            ret = srcBuf.readCString(ref this.EffectParam1, (int)size4EffectParam1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EffectType2 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParam2 */
        {
            Int32 size4EffectParam2 = 64;

            /* load */
            ret = srcBuf.readCString(ref this.EffectParam2, (int)size4EffectParam2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EffectType3 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParam3 */
        {
            Int32 size4EffectParam3 = 64;

            /* load */
            ret = srcBuf.readCString(ref this.EffectParam3, (int)size4EffectParam3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EffectType4 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParam4 */
        {
            Int32 size4EffectParam4 = 64;

            /* load */
            ret = srcBuf.readCString(ref this.EffectParam4, (int)size4EffectParam4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EffectType5 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParam5 */
        {
            Int32 size4EffectParam5 = 64;

            /* load */
            ret = srcBuf.readCString(ref this.EffectParam5, (int)size4EffectParam5);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EffectType6 */
        {
            ret = srcBuf.readUInt32(ref this.EffectType6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParam6 */
        {
            Int32 size4EffectParam6 = 64;

            /* load */
            ret = srcBuf.readCString(ref this.EffectParam6, (int)size4EffectParam6);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ID]", "{0:d}", this.ID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Name */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Name]", this.Name);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BuffVisualID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BuffVisualID]", "{0:d}", this.BuffVisualID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TeamStackCount */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TeamStackCount]", "{0:d}", this.TeamStackCount);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnBuffAnimationKey */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnBuffAnimationKey]", "{0:d}", this.OnBuffAnimationKey);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StackType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StackType]", "{0:d}", this.StackType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StackCount */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StackCount]", "{0:d}", this.StackCount);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TimeDuration */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TimeDuration]", "{0:g}", this.TimeDuration);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TimeType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TimeType]", "{0:d}", this.TimeType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CanClear */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CanClear]", "{0:d}", this.CanClear);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType1 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType1]", "{0:d}", this.EffectType1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParam1 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EffectParam1]", this.EffectParam1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType2 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType2]", "{0:d}", this.EffectType2);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParam2 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EffectParam2]", this.EffectParam2);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType3 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType3]", "{0:d}", this.EffectType3);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParam3 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EffectParam3]", this.EffectParam3);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType4 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType4]", "{0:d}", this.EffectType4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParam4 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EffectParam4]", this.EffectParam4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType5 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType5]", "{0:d}", this.EffectType5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParam5 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EffectParam5]", this.EffectParam5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType6 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType6]", "{0:d}", this.EffectType6);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParam6 */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[EffectParam6]", this.EffectParam6);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
