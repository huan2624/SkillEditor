/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: b7fc83f1879126186488df6d1d2dace3 */

/* creation time: Thu Jun 11 20:14:12 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


/* 基础属性 */
public class HeroBasicAttributes : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 heroID; // 英雄ID
    public byte[] HeroDesc; // 英雄描述
    public UInt32 ResId; // 资源ID
    public float ModelAmpliFactor; // 模型放大系数
    public byte[] Name; // 名称
    public byte HeroType; // 英雄类型
    public byte[] HeroCharacterDesc; // 英雄特性描述
    public byte HeroCharacterType; // 英雄特性类型
    public byte[] Aptitude; // 资质
    public byte Star; // 星级
    public byte AlertRange; // 警戒范围
    public byte LostTargetRange; // 丢失目标范围
    public byte StandType; // 站位方式
    public UInt32 AngerBase; // 怒气基础
    public UInt32 AngerStep; // 怒气步长
    public UInt32 AttackAngerBase; // 攻击怒气基础
    public UInt32 AttackAngerStep; // 攻击怒气步长
    public UInt32 HurtAngerBase; // 受击怒气基础
    public UInt32 HurtAngerStep; // 受击怒气步长
    public UInt32 WalkAngerBase; // 行动怒气基础
    public UInt32 WalkAngerStep; // 行动怒气步长
    public UInt32 WinAngerBase; // 胜利怒气基础
    public UInt32 WinAngerStep; // 胜利怒气步长
    public float SideStep; // 闪避
    public float Hit; // 命中
    public float CriticalStrike; // 暴击
    public float CriticalStrikeDefence; // 抗暴击
    public float QuickNum; // 敏捷
    public float QuickStepLength; // 敏捷步长
    public float StrengthNum; // 力量
    public float StrengthStepLength; // 力量步长
    public float IntellectNum; // 智力
    public float IntellectStepLength; // 智力步长
    public byte BasicAttackLow; // 基础攻击下限
    public byte BasicAttackHigh; // 基础攻击上限
    public float CriticalStrikeMultiple; // 暴击倍数
    public float AttackSpeed; // 攻击速度
    public float MoveSpeed; // 移动速度
    public float AttackDistance; // 攻击距离
    public float OnrushSpeed; // 突进速度
    public float HealthRecoverySpeed; // 生命恢复速度
    public UInt32 NormalAttackInterval;
    public UInt32[] NormalAttackId;
    public UInt32[] SkillId;
    public UInt32 ExclusiveEquipID; // 专属装备ID
    public byte[] AIList; // AI列表

    /* construct methods */
    public HeroBasicAttributes()
    {
        HeroDesc = new byte[800];
        Name = new byte[24];
        HeroCharacterDesc = new byte[90];
        Aptitude = new byte[24];
        NormalAttackId = new UInt32[5];
        SkillId = new UInt32[4];
        AIList = new byte[128];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroBasicAttributes.CURRVERSION < cutVer)
        {
            cutVer = HeroBasicAttributes.CURRVERSION;
        }

        /* check cutversion */
        if (HeroBasicAttributes.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.heroID */
        {
            ret = destBuf.writeUInt32(this.heroID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroDesc */
        {
            /* record sizeinfo position */
            Int32 sizePos4HeroDesc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HeroDesc = destBuf.getUsedSize();

            Int32 realSize4HeroDesc = TdrTypeUtil.cstrlen(this.HeroDesc);

            if (realSize4HeroDesc >= 800)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HeroDesc, realSize4HeroDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HeroDesc */
            Int32 size4HeroDesc = destBuf.getUsedSize() - beginPos4HeroDesc;
            ret = destBuf.writeUInt32((UInt32)(size4HeroDesc), sizePos4HeroDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ResId */
        {
            ret = destBuf.writeUInt32(this.ResId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ModelAmpliFactor */
        {
            ret = destBuf.writeFloat(this.ModelAmpliFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Name */
        {
            /* record sizeinfo position */
            Int32 sizePos4Name = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Name = destBuf.getUsedSize();

            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name);

            if (realSize4Name >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Name, realSize4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Name */
            Int32 size4Name = destBuf.getUsedSize() - beginPos4Name;
            ret = destBuf.writeUInt32((UInt32)(size4Name), sizePos4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroType */
        {
            ret = destBuf.writeUInt8(this.HeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroCharacterDesc */
        {
            /* record sizeinfo position */
            Int32 sizePos4HeroCharacterDesc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HeroCharacterDesc = destBuf.getUsedSize();

            Int32 realSize4HeroCharacterDesc = TdrTypeUtil.cstrlen(this.HeroCharacterDesc);

            if (realSize4HeroCharacterDesc >= 90)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HeroCharacterDesc, realSize4HeroCharacterDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HeroCharacterDesc */
            Int32 size4HeroCharacterDesc = destBuf.getUsedSize() - beginPos4HeroCharacterDesc;
            ret = destBuf.writeUInt32((UInt32)(size4HeroCharacterDesc), sizePos4HeroCharacterDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroCharacterType */
        {
            ret = destBuf.writeUInt8(this.HeroCharacterType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Aptitude */
        {
            /* record sizeinfo position */
            Int32 sizePos4Aptitude = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Aptitude = destBuf.getUsedSize();

            Int32 realSize4Aptitude = TdrTypeUtil.cstrlen(this.Aptitude);

            if (realSize4Aptitude >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Aptitude, realSize4Aptitude);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Aptitude */
            Int32 size4Aptitude = destBuf.getUsedSize() - beginPos4Aptitude;
            ret = destBuf.writeUInt32((UInt32)(size4Aptitude), sizePos4Aptitude);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Star */
        {
            ret = destBuf.writeUInt8(this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AlertRange */
        {
            ret = destBuf.writeUInt8(this.AlertRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LostTargetRange */
        {
            ret = destBuf.writeUInt8(this.LostTargetRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StandType */
        {
            ret = destBuf.writeUInt8(this.StandType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AngerBase */
        {
            ret = destBuf.writeUInt32(this.AngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AngerStep */
        {
            ret = destBuf.writeUInt32(this.AngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackAngerBase */
        {
            ret = destBuf.writeUInt32(this.AttackAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackAngerStep */
        {
            ret = destBuf.writeUInt32(this.AttackAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HurtAngerBase */
        {
            ret = destBuf.writeUInt32(this.HurtAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HurtAngerStep */
        {
            ret = destBuf.writeUInt32(this.HurtAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WalkAngerBase */
        {
            ret = destBuf.writeUInt32(this.WalkAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WalkAngerStep */
        {
            ret = destBuf.writeUInt32(this.WalkAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WinAngerBase */
        {
            ret = destBuf.writeUInt32(this.WinAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WinAngerStep */
        {
            ret = destBuf.writeUInt32(this.WinAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SideStep */
        {
            ret = destBuf.writeFloat(this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Hit */
        {
            ret = destBuf.writeFloat(this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalStrike */
        {
            ret = destBuf.writeFloat(this.CriticalStrike);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalStrikeDefence */
        {
            ret = destBuf.writeFloat(this.CriticalStrikeDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.QuickNum */
        {
            ret = destBuf.writeFloat(this.QuickNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.QuickStepLength */
        {
            ret = destBuf.writeFloat(this.QuickStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StrengthNum */
        {
            ret = destBuf.writeFloat(this.StrengthNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StrengthStepLength */
        {
            ret = destBuf.writeFloat(this.StrengthStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IntellectNum */
        {
            ret = destBuf.writeFloat(this.IntellectNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IntellectStepLength */
        {
            ret = destBuf.writeFloat(this.IntellectStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BasicAttackLow */
        {
            ret = destBuf.writeUInt8(this.BasicAttackLow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BasicAttackHigh */
        {
            ret = destBuf.writeUInt8(this.BasicAttackHigh);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalStrikeMultiple */
        {
            ret = destBuf.writeFloat(this.CriticalStrikeMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackSpeed */
        {
            ret = destBuf.writeFloat(this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MoveSpeed */
        {
            ret = destBuf.writeFloat(this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackDistance */
        {
            ret = destBuf.writeFloat(this.AttackDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnrushSpeed */
        {
            ret = destBuf.writeFloat(this.OnrushSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HealthRecoverySpeed */
        {
            ret = destBuf.writeFloat(this.HealthRecoverySpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NormalAttackInterval */
        {
            ret = destBuf.writeUInt32(this.NormalAttackInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NormalAttackId */
        {
            for (Int32 NormalAttackId_i = 0; NormalAttackId_i < 5; NormalAttackId_i++)
            {
                ret = destBuf.writeUInt32(this.NormalAttackId[NormalAttackId_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.SkillId */
        {
            for (Int32 SkillId_i = 0; SkillId_i < 4; SkillId_i++)
            {
                ret = destBuf.writeUInt32(this.SkillId[SkillId_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.ExclusiveEquipID */
        {
            ret = destBuf.writeUInt32(this.ExclusiveEquipID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AIList */
        {
            /* record sizeinfo position */
            Int32 sizePos4AIList = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4AIList = destBuf.getUsedSize();

            Int32 realSize4AIList = TdrTypeUtil.cstrlen(this.AIList);

            if (realSize4AIList >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.AIList, realSize4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.AIList */
            Int32 size4AIList = destBuf.getUsedSize() - beginPos4AIList;
            ret = destBuf.writeUInt32((UInt32)(size4AIList), sizePos4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroBasicAttributes.CURRVERSION < cutVer)
        {
            cutVer = HeroBasicAttributes.CURRVERSION;
        }

        /* check cutversion */
        if (HeroBasicAttributes.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.heroID */
        {
            ret = srcBuf.readUInt32(ref this.heroID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroDesc */
        {
            /* get sizeinfo for this.HeroDesc */
            UInt32 size4HeroDesc = 0;
            ret = srcBuf.readUInt32(ref size4HeroDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HeroDesc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HeroDesc > this.HeroDesc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HeroDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HeroDesc, (int)size4HeroDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HeroDesc[(int)size4HeroDesc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HeroDesc = TdrTypeUtil.cstrlen(this.HeroDesc) + 1;
            if (size4HeroDesc != realSize4HeroDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ResId */
        {
            ret = srcBuf.readUInt32(ref this.ResId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ModelAmpliFactor */
        {
            ret = srcBuf.readFloat(ref this.ModelAmpliFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Name */
        {
            /* get sizeinfo for this.Name */
            UInt32 size4Name = 0;
            ret = srcBuf.readUInt32(ref size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Name > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Name > this.Name.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Name[(int)size4Name - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name) + 1;
            if (size4Name != realSize4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HeroType */
        {
            ret = srcBuf.readUInt8(ref this.HeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroCharacterDesc */
        {
            /* get sizeinfo for this.HeroCharacterDesc */
            UInt32 size4HeroCharacterDesc = 0;
            ret = srcBuf.readUInt32(ref size4HeroCharacterDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HeroCharacterDesc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HeroCharacterDesc > this.HeroCharacterDesc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HeroCharacterDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HeroCharacterDesc, (int)size4HeroCharacterDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HeroCharacterDesc[(int)size4HeroCharacterDesc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HeroCharacterDesc = TdrTypeUtil.cstrlen(this.HeroCharacterDesc) + 1;
            if (size4HeroCharacterDesc != realSize4HeroCharacterDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HeroCharacterType */
        {
            ret = srcBuf.readUInt8(ref this.HeroCharacterType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Aptitude */
        {
            /* get sizeinfo for this.Aptitude */
            UInt32 size4Aptitude = 0;
            ret = srcBuf.readUInt32(ref size4Aptitude);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Aptitude > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Aptitude > this.Aptitude.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Aptitude)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Aptitude, (int)size4Aptitude);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Aptitude[(int)size4Aptitude - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Aptitude = TdrTypeUtil.cstrlen(this.Aptitude) + 1;
            if (size4Aptitude != realSize4Aptitude)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Star */
        {
            ret = srcBuf.readUInt8(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AlertRange */
        {
            ret = srcBuf.readUInt8(ref this.AlertRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LostTargetRange */
        {
            ret = srcBuf.readUInt8(ref this.LostTargetRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StandType */
        {
            ret = srcBuf.readUInt8(ref this.StandType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AngerBase */
        {
            ret = srcBuf.readUInt32(ref this.AngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AngerStep */
        {
            ret = srcBuf.readUInt32(ref this.AngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.AttackAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.AttackAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HurtAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.HurtAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HurtAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.HurtAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WalkAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.WalkAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WalkAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.WalkAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WinAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.WinAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WinAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.WinAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SideStep */
        {
            ret = srcBuf.readFloat(ref this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Hit */
        {
            ret = srcBuf.readFloat(ref this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CriticalStrike */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrike);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CriticalStrikeDefence */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrikeDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.QuickNum */
        {
            ret = srcBuf.readFloat(ref this.QuickNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.QuickStepLength */
        {
            ret = srcBuf.readFloat(ref this.QuickStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StrengthNum */
        {
            ret = srcBuf.readFloat(ref this.StrengthNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StrengthStepLength */
        {
            ret = srcBuf.readFloat(ref this.StrengthStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IntellectNum */
        {
            ret = srcBuf.readFloat(ref this.IntellectNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IntellectStepLength */
        {
            ret = srcBuf.readFloat(ref this.IntellectStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BasicAttackLow */
        {
            ret = srcBuf.readUInt8(ref this.BasicAttackLow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BasicAttackHigh */
        {
            ret = srcBuf.readUInt8(ref this.BasicAttackHigh);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CriticalStrikeMultiple */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrikeMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackSpeed */
        {
            ret = srcBuf.readFloat(ref this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackDistance */
        {
            ret = srcBuf.readFloat(ref this.AttackDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnrushSpeed */
        {
            ret = srcBuf.readFloat(ref this.OnrushSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HealthRecoverySpeed */
        {
            ret = srcBuf.readFloat(ref this.HealthRecoverySpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NormalAttackInterval */
        {
            ret = srcBuf.readUInt32(ref this.NormalAttackInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NormalAttackId */
        {
            for (Int32 NormalAttackId_i = 0; NormalAttackId_i < 5; NormalAttackId_i++)
            {
                ret = srcBuf.readUInt32(ref this.NormalAttackId[NormalAttackId_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.SkillId */
        {
            for (Int32 SkillId_i = 0; SkillId_i < 4; SkillId_i++)
            {
                ret = srcBuf.readUInt32(ref this.SkillId[SkillId_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.ExclusiveEquipID */
        {
            ret = srcBuf.readUInt32(ref this.ExclusiveEquipID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AIList */
        {
            /* get sizeinfo for this.AIList */
            UInt32 size4AIList = 0;
            ret = srcBuf.readUInt32(ref size4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4AIList > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4AIList > this.AIList.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4AIList)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.AIList, (int)size4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.AIList[(int)size4AIList - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4AIList = TdrTypeUtil.cstrlen(this.AIList) + 1;
            if (size4AIList != realSize4AIList)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroBasicAttributes.CURRVERSION < cutVer)
        {
            cutVer = HeroBasicAttributes.CURRVERSION;
        }

        /* check cutversion */
        if (HeroBasicAttributes.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.heroID */
        {
            ret = srcBuf.readUInt32(ref this.heroID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroDesc */
        {
            Int32 size4HeroDesc = 800;

            /* load */
            ret = srcBuf.readCString(ref this.HeroDesc, (int)size4HeroDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ResId */
        {
            ret = srcBuf.readUInt32(ref this.ResId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ModelAmpliFactor */
        {
            ret = srcBuf.readFloat(ref this.ModelAmpliFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Name */
        {
            Int32 size4Name = 24;

            /* load */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HeroType */
        {
            ret = srcBuf.readUInt8(ref this.HeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroCharacterDesc */
        {
            Int32 size4HeroCharacterDesc = 90;

            /* load */
            ret = srcBuf.readCString(ref this.HeroCharacterDesc, (int)size4HeroCharacterDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HeroCharacterType */
        {
            ret = srcBuf.readUInt8(ref this.HeroCharacterType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Aptitude */
        {
            Int32 size4Aptitude = 24;

            /* load */
            ret = srcBuf.readCString(ref this.Aptitude, (int)size4Aptitude);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Star */
        {
            ret = srcBuf.readUInt8(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AlertRange */
        {
            ret = srcBuf.readUInt8(ref this.AlertRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LostTargetRange */
        {
            ret = srcBuf.readUInt8(ref this.LostTargetRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StandType */
        {
            ret = srcBuf.readUInt8(ref this.StandType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AngerBase */
        {
            ret = srcBuf.readUInt32(ref this.AngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AngerStep */
        {
            ret = srcBuf.readUInt32(ref this.AngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.AttackAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.AttackAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HurtAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.HurtAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HurtAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.HurtAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WalkAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.WalkAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WalkAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.WalkAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WinAngerBase */
        {
            ret = srcBuf.readUInt32(ref this.WinAngerBase);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WinAngerStep */
        {
            ret = srcBuf.readUInt32(ref this.WinAngerStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SideStep */
        {
            ret = srcBuf.readFloat(ref this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Hit */
        {
            ret = srcBuf.readFloat(ref this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CriticalStrike */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrike);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CriticalStrikeDefence */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrikeDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.QuickNum */
        {
            ret = srcBuf.readFloat(ref this.QuickNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.QuickStepLength */
        {
            ret = srcBuf.readFloat(ref this.QuickStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StrengthNum */
        {
            ret = srcBuf.readFloat(ref this.StrengthNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StrengthStepLength */
        {
            ret = srcBuf.readFloat(ref this.StrengthStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IntellectNum */
        {
            ret = srcBuf.readFloat(ref this.IntellectNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IntellectStepLength */
        {
            ret = srcBuf.readFloat(ref this.IntellectStepLength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BasicAttackLow */
        {
            ret = srcBuf.readUInt8(ref this.BasicAttackLow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BasicAttackHigh */
        {
            ret = srcBuf.readUInt8(ref this.BasicAttackHigh);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CriticalStrikeMultiple */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrikeMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackSpeed */
        {
            ret = srcBuf.readFloat(ref this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackDistance */
        {
            ret = srcBuf.readFloat(ref this.AttackDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnrushSpeed */
        {
            ret = srcBuf.readFloat(ref this.OnrushSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HealthRecoverySpeed */
        {
            ret = srcBuf.readFloat(ref this.HealthRecoverySpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NormalAttackInterval */
        {
            ret = srcBuf.readUInt32(ref this.NormalAttackInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NormalAttackId */
        {
            for (Int32 NormalAttackId_i = 0; NormalAttackId_i < 5; NormalAttackId_i++)
            {
                ret = srcBuf.readUInt32(ref this.NormalAttackId[NormalAttackId_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.SkillId */
        {
            for (Int32 SkillId_i = 0; SkillId_i < 4; SkillId_i++)
            {
                ret = srcBuf.readUInt32(ref this.SkillId[SkillId_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.ExclusiveEquipID */
        {
            ret = srcBuf.readUInt32(ref this.ExclusiveEquipID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AIList */
        {
            Int32 size4AIList = 128;

            /* load */
            ret = srcBuf.readCString(ref this.AIList, (int)size4AIList);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.heroID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[heroID]", "{0:d}", this.heroID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroDesc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HeroDesc]", this.HeroDesc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ResId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResId]", "{0:d}", this.ResId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ModelAmpliFactor */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ModelAmpliFactor]", "{0:g}", this.ModelAmpliFactor);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Name */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Name]", this.Name);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroType]", "0x{0:x2}", this.HeroType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroCharacterDesc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HeroCharacterDesc]", this.HeroCharacterDesc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroCharacterType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroCharacterType]", "0x{0:x2}", this.HeroCharacterType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Aptitude */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Aptitude]", this.Aptitude);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Star */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Star]", "0x{0:x2}", this.Star);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AlertRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AlertRange]", "0x{0:x2}", this.AlertRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LostTargetRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LostTargetRange]", "0x{0:x2}", this.LostTargetRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StandType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StandType]", "0x{0:x2}", this.StandType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AngerBase */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AngerBase]", "{0:d}", this.AngerBase);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AngerStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AngerStep]", "{0:d}", this.AngerStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackAngerBase */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackAngerBase]", "{0:d}", this.AttackAngerBase);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackAngerStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackAngerStep]", "{0:d}", this.AttackAngerStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HurtAngerBase */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HurtAngerBase]", "{0:d}", this.HurtAngerBase);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HurtAngerStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HurtAngerStep]", "{0:d}", this.HurtAngerStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WalkAngerBase */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WalkAngerBase]", "{0:d}", this.WalkAngerBase);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WalkAngerStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WalkAngerStep]", "{0:d}", this.WalkAngerStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WinAngerBase */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WinAngerBase]", "{0:d}", this.WinAngerBase);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WinAngerStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WinAngerStep]", "{0:d}", this.WinAngerStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SideStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SideStep]", "{0:g}", this.SideStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Hit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Hit]", "{0:g}", this.Hit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalStrike */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CriticalStrike]", "{0:g}", this.CriticalStrike);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalStrikeDefence */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CriticalStrikeDefence]", "{0:g}", this.CriticalStrikeDefence);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.QuickNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[QuickNum]", "{0:g}", this.QuickNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.QuickStepLength */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[QuickStepLength]", "{0:g}", this.QuickStepLength);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StrengthNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StrengthNum]", "{0:g}", this.StrengthNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StrengthStepLength */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StrengthStepLength]", "{0:g}", this.StrengthStepLength);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IntellectNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IntellectNum]", "{0:g}", this.IntellectNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IntellectStepLength */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IntellectStepLength]", "{0:g}", this.IntellectStepLength);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BasicAttackLow */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BasicAttackLow]", "0x{0:x2}", this.BasicAttackLow);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BasicAttackHigh */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BasicAttackHigh]", "0x{0:x2}", this.BasicAttackHigh);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalStrikeMultiple */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CriticalStrikeMultiple]", "{0:g}", this.CriticalStrikeMultiple);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackSpeed]", "{0:g}", this.AttackSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MoveSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MoveSpeed]", "{0:g}", this.MoveSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackDistance]", "{0:g}", this.AttackDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnrushSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnrushSpeed]", "{0:g}", this.OnrushSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HealthRecoverySpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HealthRecoverySpeed]", "{0:g}", this.HealthRecoverySpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NormalAttackInterval */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NormalAttackInterval]", "{0:d}", this.NormalAttackInterval);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NormalAttackId */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[NormalAttackId]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 NormalAttackId_i = 0; NormalAttackId_i < 5; NormalAttackId_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.NormalAttackId[NormalAttackId_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillId */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[SkillId]", 4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 SkillId_i = 0; SkillId_i < 4; SkillId_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.SkillId[SkillId_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ExclusiveEquipID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ExclusiveEquipID]", "{0:d}", this.ExclusiveEquipID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AIList */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[AIList]", this.AIList);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 升级 */
public class HeroUpgrade : tsf4g_csharp_interface
{
    /* public members */
    public byte Level; // 等级
    public UInt32 NeedExp; // 需要经验

    /* construct methods */
    public HeroUpgrade()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroUpgrade.CURRVERSION < cutVer)
        {
            cutVer = HeroUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (HeroUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeUInt8(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NeedExp */
        {
            ret = destBuf.writeUInt32(this.NeedExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroUpgrade.CURRVERSION < cutVer)
        {
            cutVer = HeroUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (HeroUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readUInt8(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NeedExp */
        {
            ret = srcBuf.readUInt32(ref this.NeedExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroUpgrade.CURRVERSION < cutVer)
        {
            cutVer = HeroUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (HeroUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readUInt8(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NeedExp */
        {
            ret = srcBuf.readUInt32(ref this.NeedExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "0x{0:x2}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NeedExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NeedExp]", "{0:d}", this.NeedExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 创建角色 */
public class RoleResources : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ID;
    public byte[] Name;
    public byte[] AvatarID;
    public byte[] BustID;

    /* construct methods */
    public RoleResources()
    {
        Name = new byte[24];
        AvatarID = new byte[24];
        BustID = new byte[24];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleResources.CURRVERSION < cutVer)
        {
            cutVer = RoleResources.CURRVERSION;
        }

        /* check cutversion */
        if (RoleResources.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ID */
        {
            ret = destBuf.writeUInt32(this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Name */
        {
            /* record sizeinfo position */
            Int32 sizePos4Name = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Name = destBuf.getUsedSize();

            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name);

            if (realSize4Name >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Name, realSize4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Name */
            Int32 size4Name = destBuf.getUsedSize() - beginPos4Name;
            ret = destBuf.writeUInt32((UInt32)(size4Name), sizePos4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AvatarID */
        {
            /* record sizeinfo position */
            Int32 sizePos4AvatarID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4AvatarID = destBuf.getUsedSize();

            Int32 realSize4AvatarID = TdrTypeUtil.cstrlen(this.AvatarID);

            if (realSize4AvatarID >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.AvatarID, realSize4AvatarID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.AvatarID */
            Int32 size4AvatarID = destBuf.getUsedSize() - beginPos4AvatarID;
            ret = destBuf.writeUInt32((UInt32)(size4AvatarID), sizePos4AvatarID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BustID */
        {
            /* record sizeinfo position */
            Int32 sizePos4BustID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4BustID = destBuf.getUsedSize();

            Int32 realSize4BustID = TdrTypeUtil.cstrlen(this.BustID);

            if (realSize4BustID >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.BustID, realSize4BustID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.BustID */
            Int32 size4BustID = destBuf.getUsedSize() - beginPos4BustID;
            ret = destBuf.writeUInt32((UInt32)(size4BustID), sizePos4BustID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleResources.CURRVERSION < cutVer)
        {
            cutVer = RoleResources.CURRVERSION;
        }

        /* check cutversion */
        if (RoleResources.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Name */
        {
            /* get sizeinfo for this.Name */
            UInt32 size4Name = 0;
            ret = srcBuf.readUInt32(ref size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Name > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Name > this.Name.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Name[(int)size4Name - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name) + 1;
            if (size4Name != realSize4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.AvatarID */
        {
            /* get sizeinfo for this.AvatarID */
            UInt32 size4AvatarID = 0;
            ret = srcBuf.readUInt32(ref size4AvatarID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4AvatarID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4AvatarID > this.AvatarID.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4AvatarID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.AvatarID, (int)size4AvatarID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.AvatarID[(int)size4AvatarID - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4AvatarID = TdrTypeUtil.cstrlen(this.AvatarID) + 1;
            if (size4AvatarID != realSize4AvatarID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BustID */
        {
            /* get sizeinfo for this.BustID */
            UInt32 size4BustID = 0;
            ret = srcBuf.readUInt32(ref size4BustID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4BustID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4BustID > this.BustID.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4BustID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.BustID, (int)size4BustID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.BustID[(int)size4BustID - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4BustID = TdrTypeUtil.cstrlen(this.BustID) + 1;
            if (size4BustID != realSize4BustID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleResources.CURRVERSION < cutVer)
        {
            cutVer = RoleResources.CURRVERSION;
        }

        /* check cutversion */
        if (RoleResources.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Name */
        {
            Int32 size4Name = 24;

            /* load */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.AvatarID */
        {
            Int32 size4AvatarID = 24;

            /* load */
            ret = srcBuf.readCString(ref this.AvatarID, (int)size4AvatarID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BustID */
        {
            Int32 size4BustID = 24;

            /* load */
            ret = srcBuf.readCString(ref this.BustID, (int)size4BustID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ID]", "{0:d}", this.ID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Name */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Name]", this.Name);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AvatarID */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[AvatarID]", this.AvatarID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BustID */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BustID]", this.BustID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 英雄合成 */
public class HeroCombine : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 HeroId; // 英雄ID
    public byte[] HeroName; // 英雄名称
    public byte Star; // 星级
    public UInt32 HeroPieceId; // 需求英雄魂ID
    public UInt32 Num;
    public UInt32 DecomposePieceNum;
    public byte CanCombine;

    /* construct methods */
    public HeroCombine()
    {
        HeroName = new byte[24];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroCombine.CURRVERSION < cutVer)
        {
            cutVer = HeroCombine.CURRVERSION;
        }

        /* check cutversion */
        if (HeroCombine.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroId */
        {
            ret = destBuf.writeUInt32(this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroName */
        {
            /* record sizeinfo position */
            Int32 sizePos4HeroName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HeroName = destBuf.getUsedSize();

            Int32 realSize4HeroName = TdrTypeUtil.cstrlen(this.HeroName);

            if (realSize4HeroName >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HeroName, realSize4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HeroName */
            Int32 size4HeroName = destBuf.getUsedSize() - beginPos4HeroName;
            ret = destBuf.writeUInt32((UInt32)(size4HeroName), sizePos4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Star */
        {
            ret = destBuf.writeUInt8(this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroPieceId */
        {
            ret = destBuf.writeUInt32(this.HeroPieceId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Num */
        {
            ret = destBuf.writeUInt32(this.Num);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DecomposePieceNum */
        {
            ret = destBuf.writeUInt32(this.DecomposePieceNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CanCombine */
        {
            ret = destBuf.writeUInt8(this.CanCombine);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroCombine.CURRVERSION < cutVer)
        {
            cutVer = HeroCombine.CURRVERSION;
        }

        /* check cutversion */
        if (HeroCombine.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroId */
        {
            ret = srcBuf.readUInt32(ref this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroName */
        {
            /* get sizeinfo for this.HeroName */
            UInt32 size4HeroName = 0;
            ret = srcBuf.readUInt32(ref size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HeroName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HeroName > this.HeroName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HeroName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HeroName, (int)size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HeroName[(int)size4HeroName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HeroName = TdrTypeUtil.cstrlen(this.HeroName) + 1;
            if (size4HeroName != realSize4HeroName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Star */
        {
            ret = srcBuf.readUInt8(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroPieceId */
        {
            ret = srcBuf.readUInt32(ref this.HeroPieceId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Num */
        {
            ret = srcBuf.readUInt32(ref this.Num);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DecomposePieceNum */
        {
            ret = srcBuf.readUInt32(ref this.DecomposePieceNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CanCombine */
        {
            ret = srcBuf.readUInt8(ref this.CanCombine);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroCombine.CURRVERSION < cutVer)
        {
            cutVer = HeroCombine.CURRVERSION;
        }

        /* check cutversion */
        if (HeroCombine.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroId */
        {
            ret = srcBuf.readUInt32(ref this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroName */
        {
            Int32 size4HeroName = 24;

            /* load */
            ret = srcBuf.readCString(ref this.HeroName, (int)size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Star */
        {
            ret = srcBuf.readUInt8(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroPieceId */
        {
            ret = srcBuf.readUInt32(ref this.HeroPieceId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Num */
        {
            ret = srcBuf.readUInt32(ref this.Num);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DecomposePieceNum */
        {
            ret = srcBuf.readUInt32(ref this.DecomposePieceNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CanCombine */
        {
            ret = srcBuf.readUInt8(ref this.CanCombine);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroId]", "{0:d}", this.HeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HeroName]", this.HeroName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Star */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Star]", "0x{0:x2}", this.Star);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroPieceId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroPieceId]", "{0:d}", this.HeroPieceId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Num */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Num]", "{0:d}", this.Num);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DecomposePieceNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DecomposePieceNum]", "{0:d}", this.DecomposePieceNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CanCombine */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CanCombine]", "0x{0:x2}", this.CanCombine);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 英雄升星 */
public class HeroRiseStar : tsf4g_csharp_interface
{
    /* public members */
    public byte Star; // 星级
    public UInt32 AttriAdd; // 属性加成
    public UInt32 CostHeroPieceNum; // 消耗魂石数量
    public UInt32 CostMaterialID; // 消耗材料ID
    public UInt32 CostMaterialNum; // 消耗材料数量

    /* construct methods */
    public HeroRiseStar()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRiseStar.CURRVERSION < cutVer)
        {
            cutVer = HeroRiseStar.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRiseStar.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Star */
        {
            ret = destBuf.writeUInt8(this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttriAdd */
        {
            ret = destBuf.writeUInt32(this.AttriAdd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostHeroPieceNum */
        {
            ret = destBuf.writeUInt32(this.CostHeroPieceNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialID */
        {
            ret = destBuf.writeUInt32(this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialNum */
        {
            ret = destBuf.writeUInt32(this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRiseStar.CURRVERSION < cutVer)
        {
            cutVer = HeroRiseStar.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRiseStar.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Star */
        {
            ret = srcBuf.readUInt8(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttriAdd */
        {
            ret = srcBuf.readUInt32(ref this.AttriAdd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostHeroPieceNum */
        {
            ret = srcBuf.readUInt32(ref this.CostHeroPieceNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRiseStar.CURRVERSION < cutVer)
        {
            cutVer = HeroRiseStar.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRiseStar.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Star */
        {
            ret = srcBuf.readUInt8(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttriAdd */
        {
            ret = srcBuf.readUInt32(ref this.AttriAdd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostHeroPieceNum */
        {
            ret = srcBuf.readUInt32(ref this.CostHeroPieceNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Star */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Star]", "0x{0:x2}", this.Star);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttriAdd */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttriAdd]", "{0:d}", this.AttriAdd);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostHeroPieceNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostHeroPieceNum]", "{0:d}", this.CostHeroPieceNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialID]", "{0:d}", this.CostMaterialID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialNum]", "{0:d}", this.CostMaterialNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 英雄升阶 */
public class HeroRiseColor : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Level; // 等级
    public byte Color; // 颜色
    public float PhysicalAttack; // 物理攻击
    public float PhysicalDefence; // 物理防御
    public float MagicAttack; // 魔法攻击
    public float MagicDefence; // 魔法防御
    public float CriticalStrike; // 暴击
    public float CriticalStrikeDefence; // 抗暴
    public float Hit; // 命中
    public float SideStep; // 闪避
    public float HP; // 血量

    /* construct methods */
    public HeroRiseColor()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRiseColor.CURRVERSION < cutVer)
        {
            cutVer = HeroRiseColor.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRiseColor.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeUInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Color */
        {
            ret = destBuf.writeUInt8(this.Color);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PhysicalAttack */
        {
            ret = destBuf.writeFloat(this.PhysicalAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PhysicalDefence */
        {
            ret = destBuf.writeFloat(this.PhysicalDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MagicAttack */
        {
            ret = destBuf.writeFloat(this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MagicDefence */
        {
            ret = destBuf.writeFloat(this.MagicDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalStrike */
        {
            ret = destBuf.writeFloat(this.CriticalStrike);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalStrikeDefence */
        {
            ret = destBuf.writeFloat(this.CriticalStrikeDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Hit */
        {
            ret = destBuf.writeFloat(this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SideStep */
        {
            ret = destBuf.writeFloat(this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HP */
        {
            ret = destBuf.writeFloat(this.HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRiseColor.CURRVERSION < cutVer)
        {
            cutVer = HeroRiseColor.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRiseColor.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Color */
        {
            ret = srcBuf.readUInt8(ref this.Color);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PhysicalAttack */
        {
            ret = srcBuf.readFloat(ref this.PhysicalAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PhysicalDefence */
        {
            ret = srcBuf.readFloat(ref this.PhysicalDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MagicAttack */
        {
            ret = srcBuf.readFloat(ref this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MagicDefence */
        {
            ret = srcBuf.readFloat(ref this.MagicDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CriticalStrike */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrike);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CriticalStrikeDefence */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrikeDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Hit */
        {
            ret = srcBuf.readFloat(ref this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SideStep */
        {
            ret = srcBuf.readFloat(ref this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HP */
        {
            ret = srcBuf.readFloat(ref this.HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRiseColor.CURRVERSION < cutVer)
        {
            cutVer = HeroRiseColor.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRiseColor.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Color */
        {
            ret = srcBuf.readUInt8(ref this.Color);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PhysicalAttack */
        {
            ret = srcBuf.readFloat(ref this.PhysicalAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PhysicalDefence */
        {
            ret = srcBuf.readFloat(ref this.PhysicalDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MagicAttack */
        {
            ret = srcBuf.readFloat(ref this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MagicDefence */
        {
            ret = srcBuf.readFloat(ref this.MagicDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CriticalStrike */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrike);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CriticalStrikeDefence */
        {
            ret = srcBuf.readFloat(ref this.CriticalStrikeDefence);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Hit */
        {
            ret = srcBuf.readFloat(ref this.Hit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SideStep */
        {
            ret = srcBuf.readFloat(ref this.SideStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HP */
        {
            ret = srcBuf.readFloat(ref this.HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Color */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Color]", "0x{0:x2}", this.Color);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PhysicalAttack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PhysicalAttack]", "{0:g}", this.PhysicalAttack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PhysicalDefence */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PhysicalDefence]", "{0:g}", this.PhysicalDefence);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MagicAttack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MagicAttack]", "{0:g}", this.MagicAttack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MagicDefence */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MagicDefence]", "{0:g}", this.MagicDefence);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalStrike */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CriticalStrike]", "{0:g}", this.CriticalStrike);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalStrikeDefence */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CriticalStrikeDefence]", "{0:g}", this.CriticalStrikeDefence);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Hit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Hit]", "{0:g}", this.Hit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SideStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SideStep]", "{0:g}", this.SideStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HP */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HP]", "{0:g}", this.HP);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 英雄装备穿戴 */
public class HeroWearEquip : tsf4g_csharp_interface
{
    /* public members */
    public byte HeroType; // 英雄类型
    public UInt32[] WearEquipID; // [穿戴装备ID]

    /* construct methods */
    public HeroWearEquip()
    {
        WearEquipID = new UInt32[5];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroWearEquip.CURRVERSION < cutVer)
        {
            cutVer = HeroWearEquip.CURRVERSION;
        }

        /* check cutversion */
        if (HeroWearEquip.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroType */
        {
            ret = destBuf.writeUInt8(this.HeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WearEquipID */
        {
            for (Int32 WearEquipID_i = 0; WearEquipID_i < 5; WearEquipID_i++)
            {
                ret = destBuf.writeUInt32(this.WearEquipID[WearEquipID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroWearEquip.CURRVERSION < cutVer)
        {
            cutVer = HeroWearEquip.CURRVERSION;
        }

        /* check cutversion */
        if (HeroWearEquip.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroType */
        {
            ret = srcBuf.readUInt8(ref this.HeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WearEquipID */
        {
            for (Int32 WearEquipID_i = 0; WearEquipID_i < 5; WearEquipID_i++)
            {
                ret = srcBuf.readUInt32(ref this.WearEquipID[WearEquipID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroWearEquip.CURRVERSION < cutVer)
        {
            cutVer = HeroWearEquip.CURRVERSION;
        }

        /* check cutversion */
        if (HeroWearEquip.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroType */
        {
            ret = srcBuf.readUInt8(ref this.HeroType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WearEquipID */
        {
            for (Int32 WearEquipID_i = 0; WearEquipID_i < 5; WearEquipID_i++)
            {
                ret = srcBuf.readUInt32(ref this.WearEquipID[WearEquipID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroType]", "0x{0:x2}", this.HeroType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WearEquipID */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[WearEquipID]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 WearEquipID_i = 0; WearEquipID_i < 5; WearEquipID_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.WearEquipID[WearEquipID_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 英雄升级限制 */
public class HeroUpgradeLimit : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 RoleLevel; // 角色等级
    public UInt32 HeroLevel; // 英雄等级

    /* construct methods */
    public HeroUpgradeLimit()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroUpgradeLimit.CURRVERSION < cutVer)
        {
            cutVer = HeroUpgradeLimit.CURRVERSION;
        }

        /* check cutversion */
        if (HeroUpgradeLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.RoleLevel */
        {
            ret = destBuf.writeUInt32(this.RoleLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroLevel */
        {
            ret = destBuf.writeUInt32(this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroUpgradeLimit.CURRVERSION < cutVer)
        {
            cutVer = HeroUpgradeLimit.CURRVERSION;
        }

        /* check cutversion */
        if (HeroUpgradeLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.RoleLevel */
        {
            ret = srcBuf.readUInt32(ref this.RoleLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroLevel */
        {
            ret = srcBuf.readUInt32(ref this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroUpgradeLimit.CURRVERSION < cutVer)
        {
            cutVer = HeroUpgradeLimit.CURRVERSION;
        }

        /* check cutversion */
        if (HeroUpgradeLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.RoleLevel */
        {
            ret = srcBuf.readUInt32(ref this.RoleLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroLevel */
        {
            ret = srcBuf.readUInt32(ref this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.RoleLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RoleLevel]", "{0:d}", this.RoleLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroLevel]", "{0:d}", this.HeroLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 组合推荐 */
public class HeroRecommend : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Index; // 序列
    public byte position; // 定位
    public UInt32[] HeroID; // [英雄ID]
    public byte[] Feature; // 特性描述
    public byte[] Fit; // 适合玩法

    /* construct methods */
    public HeroRecommend()
    {
        HeroID = new UInt32[4];
        Feature = new byte[24];
        Fit = new byte[24];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRecommend.CURRVERSION < cutVer)
        {
            cutVer = HeroRecommend.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRecommend.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Index */
        {
            ret = destBuf.writeUInt32(this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.position */
        {
            ret = destBuf.writeUInt8(this.position);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroID */
        {
            for (Int32 HeroID_i = 0; HeroID_i < 4; HeroID_i++)
            {
                ret = destBuf.writeUInt32(this.HeroID[HeroID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.Feature */
        {
            /* record sizeinfo position */
            Int32 sizePos4Feature = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Feature = destBuf.getUsedSize();

            Int32 realSize4Feature = TdrTypeUtil.cstrlen(this.Feature);

            if (realSize4Feature >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Feature, realSize4Feature);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Feature */
            Int32 size4Feature = destBuf.getUsedSize() - beginPos4Feature;
            ret = destBuf.writeUInt32((UInt32)(size4Feature), sizePos4Feature);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Fit */
        {
            /* record sizeinfo position */
            Int32 sizePos4Fit = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Fit = destBuf.getUsedSize();

            Int32 realSize4Fit = TdrTypeUtil.cstrlen(this.Fit);

            if (realSize4Fit >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Fit, realSize4Fit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Fit */
            Int32 size4Fit = destBuf.getUsedSize() - beginPos4Fit;
            ret = destBuf.writeUInt32((UInt32)(size4Fit), sizePos4Fit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRecommend.CURRVERSION < cutVer)
        {
            cutVer = HeroRecommend.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRecommend.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.position */
        {
            ret = srcBuf.readUInt8(ref this.position);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroID */
        {
            for (Int32 HeroID_i = 0; HeroID_i < 4; HeroID_i++)
            {
                ret = srcBuf.readUInt32(ref this.HeroID[HeroID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.Feature */
        {
            /* get sizeinfo for this.Feature */
            UInt32 size4Feature = 0;
            ret = srcBuf.readUInt32(ref size4Feature);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Feature > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Feature > this.Feature.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Feature)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Feature, (int)size4Feature);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Feature[(int)size4Feature - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Feature = TdrTypeUtil.cstrlen(this.Feature) + 1;
            if (size4Feature != realSize4Feature)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Fit */
        {
            /* get sizeinfo for this.Fit */
            UInt32 size4Fit = 0;
            ret = srcBuf.readUInt32(ref size4Fit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Fit > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Fit > this.Fit.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Fit)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Fit, (int)size4Fit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Fit[(int)size4Fit - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Fit = TdrTypeUtil.cstrlen(this.Fit) + 1;
            if (size4Fit != realSize4Fit)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRecommend.CURRVERSION < cutVer)
        {
            cutVer = HeroRecommend.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRecommend.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.position */
        {
            ret = srcBuf.readUInt8(ref this.position);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroID */
        {
            for (Int32 HeroID_i = 0; HeroID_i < 4; HeroID_i++)
            {
                ret = srcBuf.readUInt32(ref this.HeroID[HeroID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.Feature */
        {
            Int32 size4Feature = 24;

            /* load */
            ret = srcBuf.readCString(ref this.Feature, (int)size4Feature);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Fit */
        {
            Int32 size4Fit = 24;

            /* load */
            ret = srcBuf.readCString(ref this.Fit, (int)size4Fit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Index */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Index]", "{0:d}", this.Index);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.position */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[position]", "0x{0:x2}", this.position);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroID */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[HeroID]", 4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 HeroID_i = 0; HeroID_i < 4; HeroID_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.HeroID[HeroID_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Feature */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Feature]", this.Feature);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Fit */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Fit]", this.Fit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 战斗力特效 */
public class HeroFightCapacity : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 FightCapacityNumber; // 战斗力数值

    /* construct methods */
    public HeroFightCapacity()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroFightCapacity.CURRVERSION < cutVer)
        {
            cutVer = HeroFightCapacity.CURRVERSION;
        }

        /* check cutversion */
        if (HeroFightCapacity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.FightCapacityNumber */
        {
            ret = destBuf.writeUInt32(this.FightCapacityNumber);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroFightCapacity.CURRVERSION < cutVer)
        {
            cutVer = HeroFightCapacity.CURRVERSION;
        }

        /* check cutversion */
        if (HeroFightCapacity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.FightCapacityNumber */
        {
            ret = srcBuf.readUInt32(ref this.FightCapacityNumber);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroFightCapacity.CURRVERSION < cutVer)
        {
            cutVer = HeroFightCapacity.CURRVERSION;
        }

        /* check cutversion */
        if (HeroFightCapacity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.FightCapacityNumber */
        {
            ret = srcBuf.readUInt32(ref this.FightCapacityNumber);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.FightCapacityNumber */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FightCapacityNumber]", "{0:d}", this.FightCapacityNumber);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 能力星座图 */
public class HeroStarFigure : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 HeroId; // 英雄ID
    public byte[] HeroName; // 英雄名称
    public UInt32 Shields; // 肉盾
    public UInt32 Heal; // 治疗
    public UInt32 Assistant; // 辅助
    public UInt32 Control; // 控制
    public UInt32 Damage; // 输出

    /* construct methods */
    public HeroStarFigure()
    {
        HeroName = new byte[24];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroStarFigure.CURRVERSION < cutVer)
        {
            cutVer = HeroStarFigure.CURRVERSION;
        }

        /* check cutversion */
        if (HeroStarFigure.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroId */
        {
            ret = destBuf.writeUInt32(this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroName */
        {
            /* record sizeinfo position */
            Int32 sizePos4HeroName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HeroName = destBuf.getUsedSize();

            Int32 realSize4HeroName = TdrTypeUtil.cstrlen(this.HeroName);

            if (realSize4HeroName >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HeroName, realSize4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HeroName */
            Int32 size4HeroName = destBuf.getUsedSize() - beginPos4HeroName;
            ret = destBuf.writeUInt32((UInt32)(size4HeroName), sizePos4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Shields */
        {
            ret = destBuf.writeUInt32(this.Shields);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Heal */
        {
            ret = destBuf.writeUInt32(this.Heal);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Assistant */
        {
            ret = destBuf.writeUInt32(this.Assistant);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Control */
        {
            ret = destBuf.writeUInt32(this.Control);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Damage */
        {
            ret = destBuf.writeUInt32(this.Damage);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroStarFigure.CURRVERSION < cutVer)
        {
            cutVer = HeroStarFigure.CURRVERSION;
        }

        /* check cutversion */
        if (HeroStarFigure.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroId */
        {
            ret = srcBuf.readUInt32(ref this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroName */
        {
            /* get sizeinfo for this.HeroName */
            UInt32 size4HeroName = 0;
            ret = srcBuf.readUInt32(ref size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HeroName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HeroName > this.HeroName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HeroName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HeroName, (int)size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HeroName[(int)size4HeroName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HeroName = TdrTypeUtil.cstrlen(this.HeroName) + 1;
            if (size4HeroName != realSize4HeroName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Shields */
        {
            ret = srcBuf.readUInt32(ref this.Shields);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Heal */
        {
            ret = srcBuf.readUInt32(ref this.Heal);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Assistant */
        {
            ret = srcBuf.readUInt32(ref this.Assistant);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Control */
        {
            ret = srcBuf.readUInt32(ref this.Control);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Damage */
        {
            ret = srcBuf.readUInt32(ref this.Damage);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroStarFigure.CURRVERSION < cutVer)
        {
            cutVer = HeroStarFigure.CURRVERSION;
        }

        /* check cutversion */
        if (HeroStarFigure.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroId */
        {
            ret = srcBuf.readUInt32(ref this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroName */
        {
            Int32 size4HeroName = 24;

            /* load */
            ret = srcBuf.readCString(ref this.HeroName, (int)size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Shields */
        {
            ret = srcBuf.readUInt32(ref this.Shields);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Heal */
        {
            ret = srcBuf.readUInt32(ref this.Heal);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Assistant */
        {
            ret = srcBuf.readUInt32(ref this.Assistant);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Control */
        {
            ret = srcBuf.readUInt32(ref this.Control);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Damage */
        {
            ret = srcBuf.readUInt32(ref this.Damage);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroId]", "{0:d}", this.HeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HeroName]", this.HeroName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Shields */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Shields]", "{0:d}", this.Shields);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Heal */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Heal]", "{0:d}", this.Heal);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Assistant */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Assistant]", "{0:d}", this.Assistant);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Control */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Control]", "{0:d}", this.Control);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Damage */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Damage]", "{0:d}", this.Damage);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
