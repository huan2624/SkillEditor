/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: fa760df5ad86d4c7fa23fb34f88121c1 */

/* creation time: Sat May 16 16:30:13 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public class NextTask : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 NextTaskID;

    /* construct methods */
    public NextTask()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NextTask.CURRVERSION < cutVer)
        {
            cutVer = NextTask.CURRVERSION;
        }

        /* check cutversion */
        if (NextTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.NextTaskID */
        {
            ret = destBuf.writeUInt32(this.NextTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NextTask.CURRVERSION < cutVer)
        {
            cutVer = NextTask.CURRVERSION;
        }

        /* check cutversion */
        if (NextTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.NextTaskID */
        {
            ret = srcBuf.readUInt32(ref this.NextTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NextTask.CURRVERSION < cutVer)
        {
            cutVer = NextTask.CURRVERSION;
        }

        /* check cutversion */
        if (NextTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.NextTaskID */
        {
            ret = srcBuf.readUInt32(ref this.NextTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.NextTaskID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NextTaskID]", "{0:d}", this.NextTaskID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class MainTask : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 TaskId; // 任务ID
    public byte[] Atlas; // 图集
    public byte[] Icon; // 任务图标
    public byte[] Title; // 任务名称
    public byte[] Desc; // 任务描述
    public UInt32 Seq; // 序号
    public UInt32 EntranceType; // 任务入口类型
    public UInt32 EntranceGameLevelId; // 入口关卡ID
    public byte EntranceGameLevelDifficult; // 入口关卡难度
    public byte SubType; // 子类型
    public UInt32 Times; // 次数
    public UInt32 AppearType; // 出现条件
    public UInt32 AppearLevel; // 出现等级
    public UInt32 PreTaskID; // 前置任务ID
    public UInt32 PreTaskGameLevelId; // 前置关卡ID
    public byte PreTaskGameLevelDifficult; // 前置关卡难度
    public NextTask[] NextTaskID; // [下一任务]
    public UInt32 GiftBagId; // 奖励礼包ID
    public UInt32 GetExp; // 获得经验

    /* construct methods */
    public MainTask()
    {
        Atlas = new byte[80];
        Icon = new byte[80];
        Title = new byte[80];
        Desc = new byte[80];
        NextTaskID = new NextTask[3];
        for(int NextTaskID_i = 0; NextTaskID_i < 3; NextTaskID_i++)
        {
            NextTaskID[NextTaskID_i] = new NextTask();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MainTask.CURRVERSION < cutVer)
        {
            cutVer = MainTask.CURRVERSION;
        }

        /* check cutversion */
        if (MainTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.TaskId */
        {
            ret = destBuf.writeUInt32(this.TaskId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Atlas */
        {
            /* record sizeinfo position */
            Int32 sizePos4Atlas = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Atlas = destBuf.getUsedSize();

            Int32 realSize4Atlas = TdrTypeUtil.cstrlen(this.Atlas);

            if (realSize4Atlas >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Atlas, realSize4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Atlas */
            Int32 size4Atlas = destBuf.getUsedSize() - beginPos4Atlas;
            ret = destBuf.writeUInt32((UInt32)(size4Atlas), sizePos4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Icon */
        {
            /* record sizeinfo position */
            Int32 sizePos4Icon = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Icon = destBuf.getUsedSize();

            Int32 realSize4Icon = TdrTypeUtil.cstrlen(this.Icon);

            if (realSize4Icon >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Icon, realSize4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Icon */
            Int32 size4Icon = destBuf.getUsedSize() - beginPos4Icon;
            ret = destBuf.writeUInt32((UInt32)(size4Icon), sizePos4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Title */
        {
            /* record sizeinfo position */
            Int32 sizePos4Title = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Title = destBuf.getUsedSize();

            Int32 realSize4Title = TdrTypeUtil.cstrlen(this.Title);

            if (realSize4Title >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Title, realSize4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Title */
            Int32 size4Title = destBuf.getUsedSize() - beginPos4Title;
            ret = destBuf.writeUInt32((UInt32)(size4Title), sizePos4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Seq */
        {
            ret = destBuf.writeUInt32(this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EntranceType */
        {
            ret = destBuf.writeUInt32(this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EntranceGameLevelId */
        {
            ret = destBuf.writeUInt32(this.EntranceGameLevelId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EntranceGameLevelDifficult */
        {
            ret = destBuf.writeUInt8(this.EntranceGameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SubType */
        {
            ret = destBuf.writeUInt8(this.SubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Times */
        {
            ret = destBuf.writeUInt32(this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AppearType */
        {
            ret = destBuf.writeUInt32(this.AppearType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AppearLevel */
        {
            ret = destBuf.writeUInt32(this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PreTaskID */
        {
            ret = destBuf.writeUInt32(this.PreTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PreTaskGameLevelId */
        {
            ret = destBuf.writeUInt32(this.PreTaskGameLevelId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PreTaskGameLevelDifficult */
        {
            ret = destBuf.writeUInt8(this.PreTaskGameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NextTaskID */
        {
            for (Int32 NextTaskID_i = 0; NextTaskID_i < 3; NextTaskID_i++)
            {
                ret = this.NextTaskID[NextTaskID_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.GiftBagId */
        {
            ret = destBuf.writeUInt32(this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GetExp */
        {
            ret = destBuf.writeUInt32(this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MainTask.CURRVERSION < cutVer)
        {
            cutVer = MainTask.CURRVERSION;
        }

        /* check cutversion */
        if (MainTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.TaskId */
        {
            ret = srcBuf.readUInt32(ref this.TaskId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Atlas */
        {
            /* get sizeinfo for this.Atlas */
            UInt32 size4Atlas = 0;
            ret = srcBuf.readUInt32(ref size4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Atlas > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Atlas > this.Atlas.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Atlas)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Atlas, (int)size4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Atlas[(int)size4Atlas - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Atlas = TdrTypeUtil.cstrlen(this.Atlas) + 1;
            if (size4Atlas != realSize4Atlas)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Icon */
        {
            /* get sizeinfo for this.Icon */
            UInt32 size4Icon = 0;
            ret = srcBuf.readUInt32(ref size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Icon > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Icon > this.Icon.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Icon)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Icon, (int)size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Icon[(int)size4Icon - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Icon = TdrTypeUtil.cstrlen(this.Icon) + 1;
            if (size4Icon != realSize4Icon)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Title */
        {
            /* get sizeinfo for this.Title */
            UInt32 size4Title = 0;
            ret = srcBuf.readUInt32(ref size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Title > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Title > this.Title.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Title)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Title, (int)size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Title[(int)size4Title - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Title = TdrTypeUtil.cstrlen(this.Title) + 1;
            if (size4Title != realSize4Title)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Seq */
        {
            ret = srcBuf.readUInt32(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EntranceType */
        {
            ret = srcBuf.readUInt32(ref this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EntranceGameLevelId */
        {
            ret = srcBuf.readUInt32(ref this.EntranceGameLevelId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EntranceGameLevelDifficult */
        {
            ret = srcBuf.readUInt8(ref this.EntranceGameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SubType */
        {
            ret = srcBuf.readUInt8(ref this.SubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Times */
        {
            ret = srcBuf.readUInt32(ref this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AppearType */
        {
            ret = srcBuf.readUInt32(ref this.AppearType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AppearLevel */
        {
            ret = srcBuf.readUInt32(ref this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PreTaskID */
        {
            ret = srcBuf.readUInt32(ref this.PreTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PreTaskGameLevelId */
        {
            ret = srcBuf.readUInt32(ref this.PreTaskGameLevelId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PreTaskGameLevelDifficult */
        {
            ret = srcBuf.readUInt8(ref this.PreTaskGameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NextTaskID */
        {
            for (Int32 NextTaskID_i = 0; NextTaskID_i < 3; NextTaskID_i++)
            {
                ret = this.NextTaskID[NextTaskID_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.GiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GetExp */
        {
            ret = srcBuf.readUInt32(ref this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MainTask.CURRVERSION < cutVer)
        {
            cutVer = MainTask.CURRVERSION;
        }

        /* check cutversion */
        if (MainTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.TaskId */
        {
            ret = srcBuf.readUInt32(ref this.TaskId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Atlas */
        {
            Int32 size4Atlas = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Atlas, (int)size4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Icon */
        {
            Int32 size4Icon = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Icon, (int)size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Title */
        {
            Int32 size4Title = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Title, (int)size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Seq */
        {
            ret = srcBuf.readUInt32(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EntranceType */
        {
            ret = srcBuf.readUInt32(ref this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EntranceGameLevelId */
        {
            ret = srcBuf.readUInt32(ref this.EntranceGameLevelId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EntranceGameLevelDifficult */
        {
            ret = srcBuf.readUInt8(ref this.EntranceGameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SubType */
        {
            ret = srcBuf.readUInt8(ref this.SubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Times */
        {
            ret = srcBuf.readUInt32(ref this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AppearType */
        {
            ret = srcBuf.readUInt32(ref this.AppearType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AppearLevel */
        {
            ret = srcBuf.readUInt32(ref this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PreTaskID */
        {
            ret = srcBuf.readUInt32(ref this.PreTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PreTaskGameLevelId */
        {
            ret = srcBuf.readUInt32(ref this.PreTaskGameLevelId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PreTaskGameLevelDifficult */
        {
            ret = srcBuf.readUInt8(ref this.PreTaskGameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NextTaskID */
        {
            for (Int32 NextTaskID_i = 0; NextTaskID_i < 3; NextTaskID_i++)
            {
                ret = this.NextTaskID[NextTaskID_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.GiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GetExp */
        {
            ret = srcBuf.readUInt32(ref this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.TaskId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TaskId]", "{0:d}", this.TaskId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Atlas */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Atlas]", this.Atlas);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Icon */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Icon]", this.Icon);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Title */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Title]", this.Title);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Seq */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Seq]", "{0:d}", this.Seq);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EntranceType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EntranceType]", "{0:d}", this.EntranceType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EntranceGameLevelId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EntranceGameLevelId]", "{0:d}", this.EntranceGameLevelId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EntranceGameLevelDifficult */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EntranceGameLevelDifficult]", "0x{0:x2}", this.EntranceGameLevelDifficult);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SubType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SubType]", "0x{0:x2}", this.SubType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Times */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Times]", "{0:d}", this.Times);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AppearType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AppearType]", "{0:d}", this.AppearType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AppearLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AppearLevel]", "{0:d}", this.AppearLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PreTaskID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PreTaskID]", "{0:d}", this.PreTaskID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PreTaskGameLevelId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PreTaskGameLevelId]", "{0:d}", this.PreTaskGameLevelId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PreTaskGameLevelDifficult */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PreTaskGameLevelDifficult]", "0x{0:x2}", this.PreTaskGameLevelDifficult);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NextTaskID */
        for (Int32 NextTaskID_i = 0; NextTaskID_i < 3; NextTaskID_i++)
        {
            if (null == this.NextTaskID[NextTaskID_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NextTaskID]", NextTaskID_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.NextTaskID[NextTaskID_i] */
            if (0 > indent)
            {
                ret = this.NextTaskID[NextTaskID_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.NextTaskID[NextTaskID_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.GiftBagId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GiftBagId]", "{0:d}", this.GiftBagId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GetExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GetExp]", "{0:d}", this.GetExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class EverydayTask : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 TaskId; // 任务ID
    public byte[] Atlas; // 图集
    public byte[] Icon; // 任务图标
    public byte[] Title; // 任务名称
    public byte[] Desc; // 任务描述
    public UInt32 EntranceType; // 任务入口类型
    public byte SubType; // 子类型
    public byte GameLevelDifficult; // 关卡难度
    public UInt32 Times; // 次数
    public UInt32 AppearLevel; // 出现等级
    public UInt32 GiftBagId; // 奖励礼包ID
    public UInt32 GetExp; // 获得经验
    public UInt32 ActiveScore; // 活跃积分

    /* construct methods */
    public EverydayTask()
    {
        Atlas = new byte[80];
        Icon = new byte[80];
        Title = new byte[80];
        Desc = new byte[80];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EverydayTask.CURRVERSION < cutVer)
        {
            cutVer = EverydayTask.CURRVERSION;
        }

        /* check cutversion */
        if (EverydayTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.TaskId */
        {
            ret = destBuf.writeUInt32(this.TaskId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Atlas */
        {
            /* record sizeinfo position */
            Int32 sizePos4Atlas = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Atlas = destBuf.getUsedSize();

            Int32 realSize4Atlas = TdrTypeUtil.cstrlen(this.Atlas);

            if (realSize4Atlas >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Atlas, realSize4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Atlas */
            Int32 size4Atlas = destBuf.getUsedSize() - beginPos4Atlas;
            ret = destBuf.writeUInt32((UInt32)(size4Atlas), sizePos4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Icon */
        {
            /* record sizeinfo position */
            Int32 sizePos4Icon = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Icon = destBuf.getUsedSize();

            Int32 realSize4Icon = TdrTypeUtil.cstrlen(this.Icon);

            if (realSize4Icon >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Icon, realSize4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Icon */
            Int32 size4Icon = destBuf.getUsedSize() - beginPos4Icon;
            ret = destBuf.writeUInt32((UInt32)(size4Icon), sizePos4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Title */
        {
            /* record sizeinfo position */
            Int32 sizePos4Title = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Title = destBuf.getUsedSize();

            Int32 realSize4Title = TdrTypeUtil.cstrlen(this.Title);

            if (realSize4Title >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Title, realSize4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Title */
            Int32 size4Title = destBuf.getUsedSize() - beginPos4Title;
            ret = destBuf.writeUInt32((UInt32)(size4Title), sizePos4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EntranceType */
        {
            ret = destBuf.writeUInt32(this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SubType */
        {
            ret = destBuf.writeUInt8(this.SubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GameLevelDifficult */
        {
            ret = destBuf.writeUInt8(this.GameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Times */
        {
            ret = destBuf.writeUInt32(this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AppearLevel */
        {
            ret = destBuf.writeUInt32(this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GiftBagId */
        {
            ret = destBuf.writeUInt32(this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GetExp */
        {
            ret = destBuf.writeUInt32(this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActiveScore */
        {
            ret = destBuf.writeUInt32(this.ActiveScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EverydayTask.CURRVERSION < cutVer)
        {
            cutVer = EverydayTask.CURRVERSION;
        }

        /* check cutversion */
        if (EverydayTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.TaskId */
        {
            ret = srcBuf.readUInt32(ref this.TaskId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Atlas */
        {
            /* get sizeinfo for this.Atlas */
            UInt32 size4Atlas = 0;
            ret = srcBuf.readUInt32(ref size4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Atlas > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Atlas > this.Atlas.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Atlas)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Atlas, (int)size4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Atlas[(int)size4Atlas - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Atlas = TdrTypeUtil.cstrlen(this.Atlas) + 1;
            if (size4Atlas != realSize4Atlas)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Icon */
        {
            /* get sizeinfo for this.Icon */
            UInt32 size4Icon = 0;
            ret = srcBuf.readUInt32(ref size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Icon > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Icon > this.Icon.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Icon)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Icon, (int)size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Icon[(int)size4Icon - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Icon = TdrTypeUtil.cstrlen(this.Icon) + 1;
            if (size4Icon != realSize4Icon)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Title */
        {
            /* get sizeinfo for this.Title */
            UInt32 size4Title = 0;
            ret = srcBuf.readUInt32(ref size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Title > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Title > this.Title.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Title)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Title, (int)size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Title[(int)size4Title - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Title = TdrTypeUtil.cstrlen(this.Title) + 1;
            if (size4Title != realSize4Title)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EntranceType */
        {
            ret = srcBuf.readUInt32(ref this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SubType */
        {
            ret = srcBuf.readUInt8(ref this.SubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GameLevelDifficult */
        {
            ret = srcBuf.readUInt8(ref this.GameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Times */
        {
            ret = srcBuf.readUInt32(ref this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AppearLevel */
        {
            ret = srcBuf.readUInt32(ref this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GetExp */
        {
            ret = srcBuf.readUInt32(ref this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ActiveScore */
        {
            ret = srcBuf.readUInt32(ref this.ActiveScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EverydayTask.CURRVERSION < cutVer)
        {
            cutVer = EverydayTask.CURRVERSION;
        }

        /* check cutversion */
        if (EverydayTask.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.TaskId */
        {
            ret = srcBuf.readUInt32(ref this.TaskId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Atlas */
        {
            Int32 size4Atlas = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Atlas, (int)size4Atlas);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Icon */
        {
            Int32 size4Icon = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Icon, (int)size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Title */
        {
            Int32 size4Title = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Title, (int)size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EntranceType */
        {
            ret = srcBuf.readUInt32(ref this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SubType */
        {
            ret = srcBuf.readUInt8(ref this.SubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GameLevelDifficult */
        {
            ret = srcBuf.readUInt8(ref this.GameLevelDifficult);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Times */
        {
            ret = srcBuf.readUInt32(ref this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AppearLevel */
        {
            ret = srcBuf.readUInt32(ref this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GetExp */
        {
            ret = srcBuf.readUInt32(ref this.GetExp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ActiveScore */
        {
            ret = srcBuf.readUInt32(ref this.ActiveScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.TaskId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TaskId]", "{0:d}", this.TaskId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Atlas */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Atlas]", this.Atlas);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Icon */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Icon]", this.Icon);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Title */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Title]", this.Title);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EntranceType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EntranceType]", "{0:d}", this.EntranceType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SubType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SubType]", "0x{0:x2}", this.SubType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GameLevelDifficult */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GameLevelDifficult]", "0x{0:x2}", this.GameLevelDifficult);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Times */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Times]", "{0:d}", this.Times);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AppearLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AppearLevel]", "{0:d}", this.AppearLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GiftBagId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GiftBagId]", "{0:d}", this.GiftBagId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GetExp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GetExp]", "{0:d}", this.GetExp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActiveScore */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActiveScore]", "{0:d}", this.ActiveScore);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class Activity : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ActivityId; // 活动ID
    public byte[] Icon; // 任务图标
    public byte[] Title; // 任务名称
    public byte[] Desc; // 任务描述
    public UInt32 EntranceType; // 任务入口类型
    public UInt32 EntranceParam; // 任务入口参数
    public UInt32 Times; // 次数
    public UInt32 AppearLevel; // 出现等级
    public UInt32 GiftBagId; // 奖励礼包ID

    /* construct methods */
    public Activity()
    {
        Icon = new byte[80];
        Title = new byte[80];
        Desc = new byte[80];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Activity.CURRVERSION < cutVer)
        {
            cutVer = Activity.CURRVERSION;
        }

        /* check cutversion */
        if (Activity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ActivityId */
        {
            ret = destBuf.writeUInt32(this.ActivityId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Icon */
        {
            /* record sizeinfo position */
            Int32 sizePos4Icon = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Icon = destBuf.getUsedSize();

            Int32 realSize4Icon = TdrTypeUtil.cstrlen(this.Icon);

            if (realSize4Icon >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Icon, realSize4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Icon */
            Int32 size4Icon = destBuf.getUsedSize() - beginPos4Icon;
            ret = destBuf.writeUInt32((UInt32)(size4Icon), sizePos4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Title */
        {
            /* record sizeinfo position */
            Int32 sizePos4Title = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Title = destBuf.getUsedSize();

            Int32 realSize4Title = TdrTypeUtil.cstrlen(this.Title);

            if (realSize4Title >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Title, realSize4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Title */
            Int32 size4Title = destBuf.getUsedSize() - beginPos4Title;
            ret = destBuf.writeUInt32((UInt32)(size4Title), sizePos4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 80)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EntranceType */
        {
            ret = destBuf.writeUInt32(this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EntranceParam */
        {
            ret = destBuf.writeUInt32(this.EntranceParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Times */
        {
            ret = destBuf.writeUInt32(this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AppearLevel */
        {
            ret = destBuf.writeUInt32(this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GiftBagId */
        {
            ret = destBuf.writeUInt32(this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Activity.CURRVERSION < cutVer)
        {
            cutVer = Activity.CURRVERSION;
        }

        /* check cutversion */
        if (Activity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ActivityId */
        {
            ret = srcBuf.readUInt32(ref this.ActivityId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Icon */
        {
            /* get sizeinfo for this.Icon */
            UInt32 size4Icon = 0;
            ret = srcBuf.readUInt32(ref size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Icon > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Icon > this.Icon.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Icon)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Icon, (int)size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Icon[(int)size4Icon - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Icon = TdrTypeUtil.cstrlen(this.Icon) + 1;
            if (size4Icon != realSize4Icon)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Title */
        {
            /* get sizeinfo for this.Title */
            UInt32 size4Title = 0;
            ret = srcBuf.readUInt32(ref size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Title > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Title > this.Title.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Title)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Title, (int)size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Title[(int)size4Title - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Title = TdrTypeUtil.cstrlen(this.Title) + 1;
            if (size4Title != realSize4Title)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.EntranceType */
        {
            ret = srcBuf.readUInt32(ref this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EntranceParam */
        {
            ret = srcBuf.readUInt32(ref this.EntranceParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Times */
        {
            ret = srcBuf.readUInt32(ref this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AppearLevel */
        {
            ret = srcBuf.readUInt32(ref this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Activity.CURRVERSION < cutVer)
        {
            cutVer = Activity.CURRVERSION;
        }

        /* check cutversion */
        if (Activity.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ActivityId */
        {
            ret = srcBuf.readUInt32(ref this.ActivityId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Icon */
        {
            Int32 size4Icon = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Icon, (int)size4Icon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Title */
        {
            Int32 size4Title = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Title, (int)size4Title);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 80;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.EntranceType */
        {
            ret = srcBuf.readUInt32(ref this.EntranceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EntranceParam */
        {
            ret = srcBuf.readUInt32(ref this.EntranceParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Times */
        {
            ret = srcBuf.readUInt32(ref this.Times);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AppearLevel */
        {
            ret = srcBuf.readUInt32(ref this.AppearLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GiftBagId */
        {
            ret = srcBuf.readUInt32(ref this.GiftBagId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ActivityId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActivityId]", "{0:d}", this.ActivityId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Icon */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Icon]", this.Icon);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Title */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Title]", this.Title);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EntranceType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EntranceType]", "{0:d}", this.EntranceType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EntranceParam */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EntranceParam]", "{0:d}", this.EntranceParam);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Times */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Times]", "{0:d}", this.Times);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AppearLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AppearLevel]", "{0:d}", this.AppearLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GiftBagId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GiftBagId]", "{0:d}", this.GiftBagId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 活跃积分奖励 */
public class ActiveScoreAward : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 SeqNo; // 编号
    public UInt32 ActiveScore; // 需要积分
    public UInt32 ItemID; // 道具ID

    /* construct methods */
    public ActiveScoreAward()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActiveScoreAward.CURRVERSION < cutVer)
        {
            cutVer = ActiveScoreAward.CURRVERSION;
        }

        /* check cutversion */
        if (ActiveScoreAward.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.SeqNo */
        {
            ret = destBuf.writeUInt32(this.SeqNo);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ActiveScore */
        {
            ret = destBuf.writeUInt32(this.ActiveScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ItemID */
        {
            ret = destBuf.writeUInt32(this.ItemID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActiveScoreAward.CURRVERSION < cutVer)
        {
            cutVer = ActiveScoreAward.CURRVERSION;
        }

        /* check cutversion */
        if (ActiveScoreAward.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.SeqNo */
        {
            ret = srcBuf.readUInt32(ref this.SeqNo);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ActiveScore */
        {
            ret = srcBuf.readUInt32(ref this.ActiveScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ItemID */
        {
            ret = srcBuf.readUInt32(ref this.ItemID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActiveScoreAward.CURRVERSION < cutVer)
        {
            cutVer = ActiveScoreAward.CURRVERSION;
        }

        /* check cutversion */
        if (ActiveScoreAward.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.SeqNo */
        {
            ret = srcBuf.readUInt32(ref this.SeqNo);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ActiveScore */
        {
            ret = srcBuf.readUInt32(ref this.ActiveScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ItemID */
        {
            ret = srcBuf.readUInt32(ref this.ItemID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.SeqNo */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SeqNo]", "{0:d}", this.SeqNo);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ActiveScore */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ActiveScore]", "{0:d}", this.ActiveScore);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ItemID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ItemID]", "{0:d}", this.ItemID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
