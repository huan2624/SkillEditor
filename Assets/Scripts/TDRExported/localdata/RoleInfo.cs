/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 461212f8843dc294e51a7009289ae38c */

/* creation time: Wed Jul 16 17:37:32 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{




public enum  EnmRoleJobType
{
    ENM_ROLE_JOB_BLADE = 1,
    ENM_ROLE_JOB_BOW = 2,
    ENM_ROLE_JOB_SUMMON = 3,
    ENM_ROLE_JOB_SWARD = 4,
    ENM_ROLE_JOB_AXE = 5,
}
public enum  EnmRoleFightType
{
    ENM_ROLE_FIGHT_TYPE_ATTACK = 1,
    ENM_ROLE_FIGHT_TYPE_DEFENCE = 2,
    ENM_ROLE_FIGHT_TYPE_SUPPORT = 3,
    ENM_ROLE_FIGHT_TYPE_COMPLEX = 4,
}
public enum  EnmRoleCostType
{
    ENM_ROLE_COST_TYPE_GOLD = 1,
    ENM_ROLE_COST_TYPE_DIAMOND = 2,
}


public class RoleBaseInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Index;
    public byte[] RoleName;
    public byte RoleStarLevel;
    public UInt32 ResID;
    public byte StandType;
    public byte Job;
    public byte FightType;
    public byte CostType;
    public UInt32 Cost;
    public float Scale;
    public float GuardRange;
    public float LostTargetRange;
    public UInt32 Attack;
    public UInt32 Defense;
    public UInt32 Health;
    public UInt16 AttackStep;
    public UInt16 DefenseStep;
    public UInt16 HealthStep;
    public UInt16 Crit;
    public UInt16 Strong;
    public UInt16 OnGround;
    public UInt16 OnSky;
    public UInt16 CritDefense;
    public UInt16 StrongDefense;
    public UInt16 OnGroundDefense;
    public UInt16 OnSkyDefense;
    public byte StrongAvoid;
    public byte OnGroundAvoid;
    public byte OnSkyAvoid;
    public byte DefeatAvoid;
    public float AttackSpeed;
    public float MoveSpeed;
    public float MoveForwardSpeed;
    public float HPRecoverySpeed;
    public UInt32[] CommSkills;
    public byte[] IconClass;
    public UInt32[] Skills;

    /* construct methods */
    public RoleBaseInfo()
    {
        RoleName = new byte[20];
        CommSkills = new UInt32[5];
        IconClass = new byte[50];
        Skills = new UInt32[10];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleBaseInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleBaseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleBaseInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Index */
        {
            ret = destBuf.writeUInt32(this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RoleName */
        {
            /* record sizeinfo position */
            Int32 sizePos4RoleName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4RoleName = destBuf.getUsedSize();

            Int32 realSize4RoleName = TdrTypeUtil.cstrlen(this.RoleName);

            if (realSize4RoleName >= 20)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.RoleName, realSize4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.RoleName */
            Int32 size4RoleName = destBuf.getUsedSize() - beginPos4RoleName;
            ret = destBuf.writeUInt32((UInt32)(size4RoleName), sizePos4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RoleStarLevel */
        {
            ret = destBuf.writeUInt8(this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ResID */
        {
            ret = destBuf.writeUInt32(this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StandType */
        {
            ret = destBuf.writeUInt8(this.StandType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Job */
        {
            ret = destBuf.writeUInt8(this.Job);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FightType */
        {
            ret = destBuf.writeUInt8(this.FightType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Cost */
        {
            ret = destBuf.writeUInt32(this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Scale */
        {
            ret = destBuf.writeFloat(this.Scale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GuardRange */
        {
            ret = destBuf.writeFloat(this.GuardRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LostTargetRange */
        {
            ret = destBuf.writeFloat(this.LostTargetRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Attack */
        {
            ret = destBuf.writeUInt32(this.Attack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Defense */
        {
            ret = destBuf.writeUInt32(this.Defense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Health */
        {
            ret = destBuf.writeUInt32(this.Health);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackStep */
        {
            ret = destBuf.writeUInt16(this.AttackStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DefenseStep */
        {
            ret = destBuf.writeUInt16(this.DefenseStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HealthStep */
        {
            ret = destBuf.writeUInt16(this.HealthStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Crit */
        {
            ret = destBuf.writeUInt16(this.Crit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Strong */
        {
            ret = destBuf.writeUInt16(this.Strong);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnGround */
        {
            ret = destBuf.writeUInt16(this.OnGround);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnSky */
        {
            ret = destBuf.writeUInt16(this.OnSky);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CritDefense */
        {
            ret = destBuf.writeUInt16(this.CritDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StrongDefense */
        {
            ret = destBuf.writeUInt16(this.StrongDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnGroundDefense */
        {
            ret = destBuf.writeUInt16(this.OnGroundDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnSkyDefense */
        {
            ret = destBuf.writeUInt16(this.OnSkyDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StrongAvoid */
        {
            ret = destBuf.writeUInt8(this.StrongAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnGroundAvoid */
        {
            ret = destBuf.writeUInt8(this.OnGroundAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OnSkyAvoid */
        {
            ret = destBuf.writeUInt8(this.OnSkyAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DefeatAvoid */
        {
            ret = destBuf.writeUInt8(this.DefeatAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackSpeed */
        {
            ret = destBuf.writeFloat(this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MoveSpeed */
        {
            ret = destBuf.writeFloat(this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MoveForwardSpeed */
        {
            ret = destBuf.writeFloat(this.MoveForwardSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HPRecoverySpeed */
        {
            ret = destBuf.writeFloat(this.HPRecoverySpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CommSkills */
        {
            for (Int32 CommSkills_i = 0; CommSkills_i < 5; CommSkills_i++)
            {
                ret = destBuf.writeUInt32(this.CommSkills[CommSkills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.IconClass */
        {
            /* record sizeinfo position */
            Int32 sizePos4IconClass = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4IconClass = destBuf.getUsedSize();

            Int32 realSize4IconClass = TdrTypeUtil.cstrlen(this.IconClass);

            if (realSize4IconClass >= 50)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.IconClass, realSize4IconClass);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.IconClass */
            Int32 size4IconClass = destBuf.getUsedSize() - beginPos4IconClass;
            ret = destBuf.writeUInt32((UInt32)(size4IconClass), sizePos4IconClass);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Skills */
        {
            for (Int32 Skills_i = 0; Skills_i < 10; Skills_i++)
            {
                ret = destBuf.writeUInt32(this.Skills[Skills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleBaseInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleBaseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleBaseInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RoleName */
        {
            /* get sizeinfo for this.RoleName */
            UInt32 size4RoleName = 0;
            ret = srcBuf.readUInt32(ref size4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4RoleName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4RoleName > this.RoleName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4RoleName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.RoleName, (int)size4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.RoleName[(int)size4RoleName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4RoleName = TdrTypeUtil.cstrlen(this.RoleName) + 1;
            if (size4RoleName != realSize4RoleName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.RoleStarLevel */
        {
            ret = srcBuf.readUInt8(ref this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ResID */
        {
            ret = srcBuf.readUInt32(ref this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StandType */
        {
            ret = srcBuf.readUInt8(ref this.StandType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Job */
        {
            ret = srcBuf.readUInt8(ref this.Job);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FightType */
        {
            ret = srcBuf.readUInt8(ref this.FightType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Cost */
        {
            ret = srcBuf.readUInt32(ref this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Scale */
        {
            ret = srcBuf.readFloat(ref this.Scale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GuardRange */
        {
            ret = srcBuf.readFloat(ref this.GuardRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LostTargetRange */
        {
            ret = srcBuf.readFloat(ref this.LostTargetRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Attack */
        {
            ret = srcBuf.readUInt32(ref this.Attack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Defense */
        {
            ret = srcBuf.readUInt32(ref this.Defense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Health */
        {
            ret = srcBuf.readUInt32(ref this.Health);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackStep */
        {
            ret = srcBuf.readUInt16(ref this.AttackStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DefenseStep */
        {
            ret = srcBuf.readUInt16(ref this.DefenseStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HealthStep */
        {
            ret = srcBuf.readUInt16(ref this.HealthStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Crit */
        {
            ret = srcBuf.readUInt16(ref this.Crit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Strong */
        {
            ret = srcBuf.readUInt16(ref this.Strong);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnGround */
        {
            ret = srcBuf.readUInt16(ref this.OnGround);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnSky */
        {
            ret = srcBuf.readUInt16(ref this.OnSky);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CritDefense */
        {
            ret = srcBuf.readUInt16(ref this.CritDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StrongDefense */
        {
            ret = srcBuf.readUInt16(ref this.StrongDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnGroundDefense */
        {
            ret = srcBuf.readUInt16(ref this.OnGroundDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnSkyDefense */
        {
            ret = srcBuf.readUInt16(ref this.OnSkyDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StrongAvoid */
        {
            ret = srcBuf.readUInt8(ref this.StrongAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnGroundAvoid */
        {
            ret = srcBuf.readUInt8(ref this.OnGroundAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OnSkyAvoid */
        {
            ret = srcBuf.readUInt8(ref this.OnSkyAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DefeatAvoid */
        {
            ret = srcBuf.readUInt8(ref this.DefeatAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackSpeed */
        {
            ret = srcBuf.readFloat(ref this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MoveForwardSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveForwardSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HPRecoverySpeed */
        {
            ret = srcBuf.readFloat(ref this.HPRecoverySpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CommSkills */
        {
            for (Int32 CommSkills_i = 0; CommSkills_i < 5; CommSkills_i++)
            {
                ret = srcBuf.readUInt32(ref this.CommSkills[CommSkills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.IconClass */
        {
            /* get sizeinfo for this.IconClass */
            UInt32 size4IconClass = 0;
            ret = srcBuf.readUInt32(ref size4IconClass);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4IconClass > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4IconClass > this.IconClass.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4IconClass)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.IconClass, (int)size4IconClass);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.IconClass[(int)size4IconClass - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4IconClass = TdrTypeUtil.cstrlen(this.IconClass) + 1;
            if (size4IconClass != realSize4IconClass)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Skills */
        {
            for (Int32 Skills_i = 0; Skills_i < 10; Skills_i++)
            {
                ret = srcBuf.readUInt32(ref this.Skills[Skills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleBaseInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleBaseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleBaseInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Index */
        {
            ret = srcBuf.readUInt32(ref this.Index);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RoleName */
        {
            Int32 size4RoleName = 20;

            /* load */
            ret = srcBuf.readCString(ref this.RoleName, (int)size4RoleName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.RoleStarLevel */
        {
            ret = srcBuf.readUInt8(ref this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ResID */
        {
            ret = srcBuf.readUInt32(ref this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StandType */
        {
            ret = srcBuf.readUInt8(ref this.StandType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Job */
        {
            ret = srcBuf.readUInt8(ref this.Job);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FightType */
        {
            ret = srcBuf.readUInt8(ref this.FightType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Cost */
        {
            ret = srcBuf.readUInt32(ref this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Scale */
        {
            ret = srcBuf.readFloat(ref this.Scale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GuardRange */
        {
            ret = srcBuf.readFloat(ref this.GuardRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LostTargetRange */
        {
            ret = srcBuf.readFloat(ref this.LostTargetRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Attack */
        {
            ret = srcBuf.readUInt32(ref this.Attack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Defense */
        {
            ret = srcBuf.readUInt32(ref this.Defense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Health */
        {
            ret = srcBuf.readUInt32(ref this.Health);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackStep */
        {
            ret = srcBuf.readUInt16(ref this.AttackStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DefenseStep */
        {
            ret = srcBuf.readUInt16(ref this.DefenseStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HealthStep */
        {
            ret = srcBuf.readUInt16(ref this.HealthStep);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Crit */
        {
            ret = srcBuf.readUInt16(ref this.Crit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Strong */
        {
            ret = srcBuf.readUInt16(ref this.Strong);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnGround */
        {
            ret = srcBuf.readUInt16(ref this.OnGround);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnSky */
        {
            ret = srcBuf.readUInt16(ref this.OnSky);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CritDefense */
        {
            ret = srcBuf.readUInt16(ref this.CritDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StrongDefense */
        {
            ret = srcBuf.readUInt16(ref this.StrongDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnGroundDefense */
        {
            ret = srcBuf.readUInt16(ref this.OnGroundDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnSkyDefense */
        {
            ret = srcBuf.readUInt16(ref this.OnSkyDefense);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StrongAvoid */
        {
            ret = srcBuf.readUInt8(ref this.StrongAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnGroundAvoid */
        {
            ret = srcBuf.readUInt8(ref this.OnGroundAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OnSkyAvoid */
        {
            ret = srcBuf.readUInt8(ref this.OnSkyAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DefeatAvoid */
        {
            ret = srcBuf.readUInt8(ref this.DefeatAvoid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackSpeed */
        {
            ret = srcBuf.readFloat(ref this.AttackSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MoveForwardSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveForwardSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HPRecoverySpeed */
        {
            ret = srcBuf.readFloat(ref this.HPRecoverySpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CommSkills */
        {
            for (Int32 CommSkills_i = 0; CommSkills_i < 5; CommSkills_i++)
            {
                ret = srcBuf.readUInt32(ref this.CommSkills[CommSkills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.IconClass */
        {
            Int32 size4IconClass = 50;

            /* load */
            ret = srcBuf.readCString(ref this.IconClass, (int)size4IconClass);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Skills */
        {
            for (Int32 Skills_i = 0; Skills_i < 10; Skills_i++)
            {
                ret = srcBuf.readUInt32(ref this.Skills[Skills_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Index */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Index]", "{0:d}", this.Index);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RoleName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[RoleName]", this.RoleName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RoleStarLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RoleStarLevel]", "0x{0:x2}", this.RoleStarLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ResID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResID]", "{0:d}", this.ResID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StandType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StandType]", "0x{0:x2}", this.StandType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Job */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Job]", "0x{0:x2}", this.Job);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FightType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FightType]", "0x{0:x2}", this.FightType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Cost */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Cost]", "{0:d}", this.Cost);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Scale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Scale]", "{0:g}", this.Scale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GuardRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GuardRange]", "{0:g}", this.GuardRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LostTargetRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LostTargetRange]", "{0:g}", this.LostTargetRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Attack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Attack]", "{0:d}", this.Attack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Defense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Defense]", "{0:d}", this.Defense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Health */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Health]", "{0:d}", this.Health);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackStep]", "{0:d}", this.AttackStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DefenseStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DefenseStep]", "{0:d}", this.DefenseStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HealthStep */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HealthStep]", "{0:d}", this.HealthStep);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Crit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Crit]", "{0:d}", this.Crit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Strong */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Strong]", "{0:d}", this.Strong);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnGround */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnGround]", "{0:d}", this.OnGround);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnSky */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnSky]", "{0:d}", this.OnSky);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CritDefense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CritDefense]", "{0:d}", this.CritDefense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StrongDefense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StrongDefense]", "{0:d}", this.StrongDefense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnGroundDefense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnGroundDefense]", "{0:d}", this.OnGroundDefense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnSkyDefense */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnSkyDefense]", "{0:d}", this.OnSkyDefense);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StrongAvoid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StrongAvoid]", "0x{0:x2}", this.StrongAvoid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnGroundAvoid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnGroundAvoid]", "0x{0:x2}", this.OnGroundAvoid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OnSkyAvoid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[OnSkyAvoid]", "0x{0:x2}", this.OnSkyAvoid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DefeatAvoid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DefeatAvoid]", "0x{0:x2}", this.DefeatAvoid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackSpeed]", "{0:g}", this.AttackSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MoveSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MoveSpeed]", "{0:g}", this.MoveSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MoveForwardSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MoveForwardSpeed]", "{0:g}", this.MoveForwardSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HPRecoverySpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HPRecoverySpeed]", "{0:g}", this.HPRecoverySpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CommSkills */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[CommSkills]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 CommSkills_i = 0; CommSkills_i < 5; CommSkills_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.CommSkills[CommSkills_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IconClass */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[IconClass]", this.IconClass);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Skills */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Skills]", 10);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Skills_i = 0; Skills_i < 10; Skills_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.Skills[Skills_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class RoleStarInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte RoleStarLevel;
    public byte LevelLimit;
    public byte[] EquipSlotEnableFlag;

    /* construct methods */
    public RoleStarInfo()
    {
        EquipSlotEnableFlag = new byte[5];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleStarInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleStarInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleStarInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.RoleStarLevel */
        {
            ret = destBuf.writeUInt8(this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.LevelLimit */
        {
            ret = destBuf.writeUInt8(this.LevelLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EquipSlotEnableFlag */
        {
            for (Int32 EquipSlotEnableFlag_i = 0; EquipSlotEnableFlag_i < 5; EquipSlotEnableFlag_i++)
            {
                ret = destBuf.writeUInt8(this.EquipSlotEnableFlag[EquipSlotEnableFlag_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleStarInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleStarInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleStarInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.RoleStarLevel */
        {
            ret = srcBuf.readUInt8(ref this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.LevelLimit */
        {
            ret = srcBuf.readUInt8(ref this.LevelLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EquipSlotEnableFlag */
        {
            for (Int32 EquipSlotEnableFlag_i = 0; EquipSlotEnableFlag_i < 5; EquipSlotEnableFlag_i++)
            {
                ret = srcBuf.readUInt8(ref this.EquipSlotEnableFlag[EquipSlotEnableFlag_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleStarInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleStarInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleStarInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.RoleStarLevel */
        {
            ret = srcBuf.readUInt8(ref this.RoleStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.LevelLimit */
        {
            ret = srcBuf.readUInt8(ref this.LevelLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EquipSlotEnableFlag */
        {
            for (Int32 EquipSlotEnableFlag_i = 0; EquipSlotEnableFlag_i < 5; EquipSlotEnableFlag_i++)
            {
                ret = srcBuf.readUInt8(ref this.EquipSlotEnableFlag[EquipSlotEnableFlag_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.RoleStarLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RoleStarLevel]", "0x{0:x2}", this.RoleStarLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.LevelLimit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[LevelLimit]", "0x{0:x2}", this.LevelLimit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EquipSlotEnableFlag */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[EquipSlotEnableFlag]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 EquipSlotEnableFlag_i = 0; EquipSlotEnableFlag_i < 5; EquipSlotEnableFlag_i++)
        {
            ret = destBuf.sprintf("0x{0:x2}", this.EquipSlotEnableFlag[EquipSlotEnableFlag_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class RoleLevelExpInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte CurrLevel;
    public UInt32 Exp;
    public byte EnhanceLimit;

    /* construct methods */
    public RoleLevelExpInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleLevelExpInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleLevelExpInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleLevelExpInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.CurrLevel */
        {
            ret = destBuf.writeUInt8(this.CurrLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Exp */
        {
            ret = destBuf.writeUInt32(this.Exp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnhanceLimit */
        {
            ret = destBuf.writeUInt8(this.EnhanceLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleLevelExpInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleLevelExpInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleLevelExpInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.CurrLevel */
        {
            ret = srcBuf.readUInt8(ref this.CurrLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Exp */
        {
            ret = srcBuf.readUInt32(ref this.Exp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnhanceLimit */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleLevelExpInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleLevelExpInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleLevelExpInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.CurrLevel */
        {
            ret = srcBuf.readUInt8(ref this.CurrLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Exp */
        {
            ret = srcBuf.readUInt32(ref this.Exp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnhanceLimit */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.CurrLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CurrLevel]", "0x{0:x2}", this.CurrLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Exp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Exp]", "{0:d}", this.Exp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnhanceLimit */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnhanceLimit]", "0x{0:x2}", this.EnhanceLimit);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class CreateRoleInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 IndexID;
    public byte[] Des;

    /* construct methods */
    public CreateRoleInfo()
    {
        Des = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CreateRoleInfo.CURRVERSION < cutVer)
        {
            cutVer = CreateRoleInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CreateRoleInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.IndexID */
        {
            ret = destBuf.writeUInt32(this.IndexID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Des */
        {
            /* record sizeinfo position */
            Int32 sizePos4Des = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Des = destBuf.getUsedSize();

            Int32 realSize4Des = TdrTypeUtil.cstrlen(this.Des);

            if (realSize4Des >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Des, realSize4Des);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Des */
            Int32 size4Des = destBuf.getUsedSize() - beginPos4Des;
            ret = destBuf.writeUInt32((UInt32)(size4Des), sizePos4Des);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CreateRoleInfo.CURRVERSION < cutVer)
        {
            cutVer = CreateRoleInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CreateRoleInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.IndexID */
        {
            ret = srcBuf.readUInt32(ref this.IndexID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Des */
        {
            /* get sizeinfo for this.Des */
            UInt32 size4Des = 0;
            ret = srcBuf.readUInt32(ref size4Des);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Des > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Des > this.Des.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Des)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Des, (int)size4Des);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Des[(int)size4Des - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Des = TdrTypeUtil.cstrlen(this.Des) + 1;
            if (size4Des != realSize4Des)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CreateRoleInfo.CURRVERSION < cutVer)
        {
            cutVer = CreateRoleInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CreateRoleInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.IndexID */
        {
            ret = srcBuf.readUInt32(ref this.IndexID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Des */
        {
            Int32 size4Des = 256;

            /* load */
            ret = srcBuf.readCString(ref this.Des, (int)size4Des);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.IndexID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IndexID]", "{0:d}", this.IndexID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Des */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Des]", this.Des);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class RoleSellInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 IndexID;
    public byte CostType;
    public UInt32 Cost;

    /* construct methods */
    public RoleSellInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleSellInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleSellInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleSellInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.IndexID */
        {
            ret = destBuf.writeUInt32(this.IndexID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Cost */
        {
            ret = destBuf.writeUInt32(this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleSellInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleSellInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleSellInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.IndexID */
        {
            ret = srcBuf.readUInt32(ref this.IndexID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Cost */
        {
            ret = srcBuf.readUInt32(ref this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleSellInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleSellInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleSellInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.IndexID */
        {
            ret = srcBuf.readUInt32(ref this.IndexID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Cost */
        {
            ret = srcBuf.readUInt32(ref this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.IndexID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IndexID]", "{0:d}", this.IndexID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Cost */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Cost]", "{0:d}", this.Cost);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class RoleEnhanceInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte EnhanceLevel;
    public UInt16[] Attack;
    public UInt16[] Defence;
    public UInt16[] HP;
    public byte CostType;
    public UInt32 Cost;

    /* construct methods */
    public RoleEnhanceInfo()
    {
        Attack = new UInt16[4];
        Defence = new UInt16[4];
        HP = new UInt16[4];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleEnhanceInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleEnhanceInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleEnhanceInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.EnhanceLevel */
        {
            ret = destBuf.writeUInt8(this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Attack */
        {
            for (Int32 Attack_i = 0; Attack_i < 4; Attack_i++)
            {
                ret = destBuf.writeUInt16(this.Attack[Attack_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.Defence */
        {
            for (Int32 Defence_i = 0; Defence_i < 4; Defence_i++)
            {
                ret = destBuf.writeUInt16(this.Defence[Defence_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.HP */
        {
            for (Int32 HP_i = 0; HP_i < 4; HP_i++)
            {
                ret = destBuf.writeUInt16(this.HP[HP_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Cost */
        {
            ret = destBuf.writeUInt32(this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleEnhanceInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleEnhanceInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleEnhanceInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Attack */
        {
            for (Int32 Attack_i = 0; Attack_i < 4; Attack_i++)
            {
                ret = srcBuf.readUInt16(ref this.Attack[Attack_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.Defence */
        {
            for (Int32 Defence_i = 0; Defence_i < 4; Defence_i++)
            {
                ret = srcBuf.readUInt16(ref this.Defence[Defence_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.HP */
        {
            for (Int32 HP_i = 0; HP_i < 4; HP_i++)
            {
                ret = srcBuf.readUInt16(ref this.HP[HP_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Cost */
        {
            ret = srcBuf.readUInt32(ref this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleEnhanceInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleEnhanceInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleEnhanceInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Attack */
        {
            for (Int32 Attack_i = 0; Attack_i < 4; Attack_i++)
            {
                ret = srcBuf.readUInt16(ref this.Attack[Attack_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.Defence */
        {
            for (Int32 Defence_i = 0; Defence_i < 4; Defence_i++)
            {
                ret = srcBuf.readUInt16(ref this.Defence[Defence_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.HP */
        {
            for (Int32 HP_i = 0; HP_i < 4; HP_i++)
            {
                ret = srcBuf.readUInt16(ref this.HP[HP_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Cost */
        {
            ret = srcBuf.readUInt32(ref this.Cost);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.EnhanceLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnhanceLevel]", "0x{0:x2}", this.EnhanceLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Attack */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Attack]", 4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Attack_i = 0; Attack_i < 4; Attack_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.Attack[Attack_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Defence */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Defence]", 4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Defence_i = 0; Defence_i < 4; Defence_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.Defence[Defence_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HP */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[HP]", 4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 HP_i = 0; HP_i < 4; HP_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.HP[HP_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Cost */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Cost]", "{0:d}", this.Cost);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
