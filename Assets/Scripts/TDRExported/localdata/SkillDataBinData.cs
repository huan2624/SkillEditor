/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: c9c31701cbb9c67ed36efaee793c15ad */

/* creation time: Wed Jun 10 15:39:25 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public enum  SKILL_TARGET_TYPE
{
    E_STT_CASTER = 1, // 对施法者
    E_STT_ENEMY = 2, // 对敌方
    E_STT_FRIEND = 3, // 对友方
    E_STT_ALL = 4, // 对全体单位
}
public enum  SKILL_EFFECT
{
    E_SE_NO_EFFECT = 0, // 没有任何效果
    E_SE_HURT = 1, // 伤害
    E_SE_GAIN = 2, // 加血
    E_SE_HURT_GAIN = 3, // 对敌伤害对友方回血
}
public enum  SKILL_HALT_TYPE
{
    E_ST_HURT = 1, // 伤害
    E_ST_GAIN = 2, // 增益
    E_ST_SPECIAL = 4, // 特殊效果
}


/* 技能槽限制 */
public class SkillSlotLimit : tsf4g_csharp_interface
{
    /* public members */
    public byte HeroLevel;
    public byte SlotNum;

    /* construct methods */
    public SkillSlotLimit()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillSlotLimit.CURRVERSION < cutVer)
        {
            cutVer = SkillSlotLimit.CURRVERSION;
        }

        /* check cutversion */
        if (SkillSlotLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroLevel */
        {
            ret = destBuf.writeUInt8(this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SlotNum */
        {
            ret = destBuf.writeUInt8(this.SlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillSlotLimit.CURRVERSION < cutVer)
        {
            cutVer = SkillSlotLimit.CURRVERSION;
        }

        /* check cutversion */
        if (SkillSlotLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroLevel */
        {
            ret = srcBuf.readUInt8(ref this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SlotNum */
        {
            ret = srcBuf.readUInt8(ref this.SlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillSlotLimit.CURRVERSION < cutVer)
        {
            cutVer = SkillSlotLimit.CURRVERSION;
        }

        /* check cutversion */
        if (SkillSlotLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroLevel */
        {
            ret = srcBuf.readUInt8(ref this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SlotNum */
        {
            ret = srcBuf.readUInt8(ref this.SlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroLevel]", "0x{0:x2}", this.HeroLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SlotNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SlotNum]", "0x{0:x2}", this.SlotNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class SkillDataInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 SkillID;
    public byte[] szSkillName;
    public byte SkillLevel; // 技能等级
    public byte IsActiveSkill;
    public UInt32 SkillDispID;
    public UInt16 SkillNum; // 技能数
    public byte[] SkillIconID;
    public byte[] szSkillDesc;
    public Int16 bShowByUI; // 是否UI显示
    public Int16 TriigerCondition; // 释放条件
    public UInt32 SkillDisturbLv; // 技能打断
    public Int16 SkillTarget; // 释放目标
    public Int16 ImpactType; // 伤害类型
    public float ColdDownPct; // 技能硬直率
    public Int16 ChangeState; // 改变对方状态
    public UInt32 MarkHitEffect; // 屏蔽受击特效
    public UInt32 MarkHitSound; // 屏蔽受击音效
    public UInt32 SkillMaterialID; // 技能材质
    public float FirstCastLowThrote_HP; // 优先-对生命值低于
    public UInt16 SkillStackCnt; // 技能叠加数
    public float PhysicalAttackMultiple; // 物理攻击倍数
    public float MagicAttackMultiple; // 魔法攻击倍数
    public UInt32 PhysicalAttack; // 物理攻击
    public UInt32 MagicAttack; // 魔法攻击
    public float GrowBlood; // 回血
    public UInt32 HolyHurt; // 神圣伤害
    public float SkillCD;
    public float MaxRange;
    public float MinRange;
    public UInt32 ToSelfBuffID;
    public UInt32 ToOtherBuffID;
    public byte EjectionedNum; // 弹射次数
    public float EjectionedDistance; // 弹射距离
    public byte IsOverEjectioned; // 是否回弹
    public Int32 MaxTargetNum; // 多重射击目标个数
    public UInt32 SummerID; // 召唤怪物ID
    public float SummerLifeTime; // 怪物生存时间
    public Int32 SummerNum; // 召唤怪物数量
    public Int32 AddWeight; // 技能增重
    public Int32 Strength; // 技能强度
    public Int32 HitOdds; // 受击概率
    public Int32 HitType; // 受击类型
    public float HitDistance; // 受击距离
    public Int32 SkillEffect; // 技能效果
    public Int32 HaltType; // 打断类型
    public Int32 DurTime; // 持续时长
    public byte CanSpellNoTarget; // 是否允许空放

    /* construct methods */
    public SkillDataInfo()
    {
        szSkillName = new byte[24];
        SkillIconID = new byte[64];
        szSkillDesc = new byte[300];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillDataInfo.CURRVERSION < cutVer)
        {
            cutVer = SkillDataInfo.CURRVERSION;
        }

        /* check cutversion */
        if (SkillDataInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.SkillID */
        {
            ret = destBuf.writeUInt32(this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szSkillName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szSkillName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szSkillName = destBuf.getUsedSize();

            Int32 realSize4szSkillName = TdrTypeUtil.cstrlen(this.szSkillName);

            if (realSize4szSkillName >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szSkillName, realSize4szSkillName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szSkillName */
            Int32 size4szSkillName = destBuf.getUsedSize() - beginPos4szSkillName;
            ret = destBuf.writeUInt32((UInt32)(size4szSkillName), sizePos4szSkillName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillLevel */
        {
            ret = destBuf.writeUInt8(this.SkillLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsActiveSkill */
        {
            ret = destBuf.writeUInt8(this.IsActiveSkill);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillDispID */
        {
            ret = destBuf.writeUInt32(this.SkillDispID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillNum */
        {
            ret = destBuf.writeUInt16(this.SkillNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillIconID */
        {
            /* record sizeinfo position */
            Int32 sizePos4SkillIconID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4SkillIconID = destBuf.getUsedSize();

            Int32 realSize4SkillIconID = TdrTypeUtil.cstrlen(this.SkillIconID);

            if (realSize4SkillIconID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.SkillIconID, realSize4SkillIconID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.SkillIconID */
            Int32 size4SkillIconID = destBuf.getUsedSize() - beginPos4SkillIconID;
            ret = destBuf.writeUInt32((UInt32)(size4SkillIconID), sizePos4SkillIconID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szSkillDesc */
        {
            /* record sizeinfo position */
            Int32 sizePos4szSkillDesc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szSkillDesc = destBuf.getUsedSize();

            Int32 realSize4szSkillDesc = TdrTypeUtil.cstrlen(this.szSkillDesc);

            if (realSize4szSkillDesc >= 300)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szSkillDesc, realSize4szSkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.szSkillDesc */
            Int32 size4szSkillDesc = destBuf.getUsedSize() - beginPos4szSkillDesc;
            ret = destBuf.writeUInt32((UInt32)(size4szSkillDesc), sizePos4szSkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bShowByUI */
        {
            ret = destBuf.writeInt16(this.bShowByUI);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TriigerCondition */
        {
            ret = destBuf.writeInt16(this.TriigerCondition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillDisturbLv */
        {
            ret = destBuf.writeUInt32(this.SkillDisturbLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillTarget */
        {
            ret = destBuf.writeInt16(this.SkillTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ImpactType */
        {
            ret = destBuf.writeInt16(this.ImpactType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ColdDownPct */
        {
            ret = destBuf.writeFloat(this.ColdDownPct);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChangeState */
        {
            ret = destBuf.writeInt16(this.ChangeState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MarkHitEffect */
        {
            ret = destBuf.writeUInt32(this.MarkHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MarkHitSound */
        {
            ret = destBuf.writeUInt32(this.MarkHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillMaterialID */
        {
            ret = destBuf.writeUInt32(this.SkillMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FirstCastLowThrote_HP */
        {
            ret = destBuf.writeFloat(this.FirstCastLowThrote_HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillStackCnt */
        {
            ret = destBuf.writeUInt16(this.SkillStackCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PhysicalAttackMultiple */
        {
            ret = destBuf.writeFloat(this.PhysicalAttackMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MagicAttackMultiple */
        {
            ret = destBuf.writeFloat(this.MagicAttackMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PhysicalAttack */
        {
            ret = destBuf.writeUInt32(this.PhysicalAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MagicAttack */
        {
            ret = destBuf.writeUInt32(this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GrowBlood */
        {
            ret = destBuf.writeFloat(this.GrowBlood);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HolyHurt */
        {
            ret = destBuf.writeUInt32(this.HolyHurt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillCD */
        {
            ret = destBuf.writeFloat(this.SkillCD);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MaxRange */
        {
            ret = destBuf.writeFloat(this.MaxRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MinRange */
        {
            ret = destBuf.writeFloat(this.MinRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ToSelfBuffID */
        {
            ret = destBuf.writeUInt32(this.ToSelfBuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ToOtherBuffID */
        {
            ret = destBuf.writeUInt32(this.ToOtherBuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EjectionedNum */
        {
            ret = destBuf.writeUInt8(this.EjectionedNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EjectionedDistance */
        {
            ret = destBuf.writeFloat(this.EjectionedDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IsOverEjectioned */
        {
            ret = destBuf.writeUInt8(this.IsOverEjectioned);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MaxTargetNum */
        {
            ret = destBuf.writeInt32(this.MaxTargetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SummerID */
        {
            ret = destBuf.writeUInt32(this.SummerID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SummerLifeTime */
        {
            ret = destBuf.writeFloat(this.SummerLifeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SummerNum */
        {
            ret = destBuf.writeInt32(this.SummerNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AddWeight */
        {
            ret = destBuf.writeInt32(this.AddWeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Strength */
        {
            ret = destBuf.writeInt32(this.Strength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitOdds */
        {
            ret = destBuf.writeInt32(this.HitOdds);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitType */
        {
            ret = destBuf.writeInt32(this.HitType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitDistance */
        {
            ret = destBuf.writeFloat(this.HitDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillEffect */
        {
            ret = destBuf.writeInt32(this.SkillEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HaltType */
        {
            ret = destBuf.writeInt32(this.HaltType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DurTime */
        {
            ret = destBuf.writeInt32(this.DurTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CanSpellNoTarget */
        {
            ret = destBuf.writeUInt8(this.CanSpellNoTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillDataInfo.CURRVERSION < cutVer)
        {
            cutVer = SkillDataInfo.CURRVERSION;
        }

        /* check cutversion */
        if (SkillDataInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.SkillID */
        {
            ret = srcBuf.readUInt32(ref this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szSkillName */
        {
            /* get sizeinfo for this.szSkillName */
            UInt32 size4szSkillName = 0;
            ret = srcBuf.readUInt32(ref size4szSkillName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szSkillName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szSkillName > this.szSkillName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szSkillName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szSkillName, (int)size4szSkillName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szSkillName[(int)size4szSkillName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szSkillName = TdrTypeUtil.cstrlen(this.szSkillName) + 1;
            if (size4szSkillName != realSize4szSkillName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.SkillLevel */
        {
            ret = srcBuf.readUInt8(ref this.SkillLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsActiveSkill */
        {
            ret = srcBuf.readUInt8(ref this.IsActiveSkill);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillDispID */
        {
            ret = srcBuf.readUInt32(ref this.SkillDispID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillNum */
        {
            ret = srcBuf.readUInt16(ref this.SkillNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillIconID */
        {
            /* get sizeinfo for this.SkillIconID */
            UInt32 size4SkillIconID = 0;
            ret = srcBuf.readUInt32(ref size4SkillIconID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4SkillIconID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4SkillIconID > this.SkillIconID.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4SkillIconID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.SkillIconID, (int)size4SkillIconID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.SkillIconID[(int)size4SkillIconID - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4SkillIconID = TdrTypeUtil.cstrlen(this.SkillIconID) + 1;
            if (size4SkillIconID != realSize4SkillIconID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szSkillDesc */
        {
            /* get sizeinfo for this.szSkillDesc */
            UInt32 size4szSkillDesc = 0;
            ret = srcBuf.readUInt32(ref size4szSkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szSkillDesc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szSkillDesc > this.szSkillDesc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szSkillDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szSkillDesc, (int)size4szSkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szSkillDesc[(int)size4szSkillDesc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szSkillDesc = TdrTypeUtil.cstrlen(this.szSkillDesc) + 1;
            if (size4szSkillDesc != realSize4szSkillDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bShowByUI */
        {
            ret = srcBuf.readInt16(ref this.bShowByUI);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TriigerCondition */
        {
            ret = srcBuf.readInt16(ref this.TriigerCondition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillDisturbLv */
        {
            ret = srcBuf.readUInt32(ref this.SkillDisturbLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillTarget */
        {
            ret = srcBuf.readInt16(ref this.SkillTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ImpactType */
        {
            ret = srcBuf.readInt16(ref this.ImpactType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ColdDownPct */
        {
            ret = srcBuf.readFloat(ref this.ColdDownPct);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ChangeState */
        {
            ret = srcBuf.readInt16(ref this.ChangeState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MarkHitEffect */
        {
            ret = srcBuf.readUInt32(ref this.MarkHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MarkHitSound */
        {
            ret = srcBuf.readUInt32(ref this.MarkHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.SkillMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FirstCastLowThrote_HP */
        {
            ret = srcBuf.readFloat(ref this.FirstCastLowThrote_HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillStackCnt */
        {
            ret = srcBuf.readUInt16(ref this.SkillStackCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PhysicalAttackMultiple */
        {
            ret = srcBuf.readFloat(ref this.PhysicalAttackMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MagicAttackMultiple */
        {
            ret = srcBuf.readFloat(ref this.MagicAttackMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PhysicalAttack */
        {
            ret = srcBuf.readUInt32(ref this.PhysicalAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MagicAttack */
        {
            ret = srcBuf.readUInt32(ref this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GrowBlood */
        {
            ret = srcBuf.readFloat(ref this.GrowBlood);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HolyHurt */
        {
            ret = srcBuf.readUInt32(ref this.HolyHurt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillCD */
        {
            ret = srcBuf.readFloat(ref this.SkillCD);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MaxRange */
        {
            ret = srcBuf.readFloat(ref this.MaxRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MinRange */
        {
            ret = srcBuf.readFloat(ref this.MinRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ToSelfBuffID */
        {
            ret = srcBuf.readUInt32(ref this.ToSelfBuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ToOtherBuffID */
        {
            ret = srcBuf.readUInt32(ref this.ToOtherBuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EjectionedNum */
        {
            ret = srcBuf.readUInt8(ref this.EjectionedNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EjectionedDistance */
        {
            ret = srcBuf.readFloat(ref this.EjectionedDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IsOverEjectioned */
        {
            ret = srcBuf.readUInt8(ref this.IsOverEjectioned);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MaxTargetNum */
        {
            ret = srcBuf.readInt32(ref this.MaxTargetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SummerID */
        {
            ret = srcBuf.readUInt32(ref this.SummerID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SummerLifeTime */
        {
            ret = srcBuf.readFloat(ref this.SummerLifeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SummerNum */
        {
            ret = srcBuf.readInt32(ref this.SummerNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AddWeight */
        {
            ret = srcBuf.readInt32(ref this.AddWeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Strength */
        {
            ret = srcBuf.readInt32(ref this.Strength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitOdds */
        {
            ret = srcBuf.readInt32(ref this.HitOdds);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitType */
        {
            ret = srcBuf.readInt32(ref this.HitType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitDistance */
        {
            ret = srcBuf.readFloat(ref this.HitDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillEffect */
        {
            ret = srcBuf.readInt32(ref this.SkillEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HaltType */
        {
            ret = srcBuf.readInt32(ref this.HaltType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DurTime */
        {
            ret = srcBuf.readInt32(ref this.DurTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CanSpellNoTarget */
        {
            ret = srcBuf.readUInt8(ref this.CanSpellNoTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillDataInfo.CURRVERSION < cutVer)
        {
            cutVer = SkillDataInfo.CURRVERSION;
        }

        /* check cutversion */
        if (SkillDataInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.SkillID */
        {
            ret = srcBuf.readUInt32(ref this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szSkillName */
        {
            Int32 size4szSkillName = 24;

            /* load */
            ret = srcBuf.readCString(ref this.szSkillName, (int)size4szSkillName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.SkillLevel */
        {
            ret = srcBuf.readUInt8(ref this.SkillLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsActiveSkill */
        {
            ret = srcBuf.readUInt8(ref this.IsActiveSkill);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillDispID */
        {
            ret = srcBuf.readUInt32(ref this.SkillDispID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillNum */
        {
            ret = srcBuf.readUInt16(ref this.SkillNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillIconID */
        {
            Int32 size4SkillIconID = 64;

            /* load */
            ret = srcBuf.readCString(ref this.SkillIconID, (int)size4SkillIconID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.szSkillDesc */
        {
            Int32 size4szSkillDesc = 300;

            /* load */
            ret = srcBuf.readCString(ref this.szSkillDesc, (int)size4szSkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.bShowByUI */
        {
            ret = srcBuf.readInt16(ref this.bShowByUI);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TriigerCondition */
        {
            ret = srcBuf.readInt16(ref this.TriigerCondition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillDisturbLv */
        {
            ret = srcBuf.readUInt32(ref this.SkillDisturbLv);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillTarget */
        {
            ret = srcBuf.readInt16(ref this.SkillTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ImpactType */
        {
            ret = srcBuf.readInt16(ref this.ImpactType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ColdDownPct */
        {
            ret = srcBuf.readFloat(ref this.ColdDownPct);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ChangeState */
        {
            ret = srcBuf.readInt16(ref this.ChangeState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MarkHitEffect */
        {
            ret = srcBuf.readUInt32(ref this.MarkHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MarkHitSound */
        {
            ret = srcBuf.readUInt32(ref this.MarkHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.SkillMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FirstCastLowThrote_HP */
        {
            ret = srcBuf.readFloat(ref this.FirstCastLowThrote_HP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillStackCnt */
        {
            ret = srcBuf.readUInt16(ref this.SkillStackCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PhysicalAttackMultiple */
        {
            ret = srcBuf.readFloat(ref this.PhysicalAttackMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MagicAttackMultiple */
        {
            ret = srcBuf.readFloat(ref this.MagicAttackMultiple);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PhysicalAttack */
        {
            ret = srcBuf.readUInt32(ref this.PhysicalAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MagicAttack */
        {
            ret = srcBuf.readUInt32(ref this.MagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GrowBlood */
        {
            ret = srcBuf.readFloat(ref this.GrowBlood);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HolyHurt */
        {
            ret = srcBuf.readUInt32(ref this.HolyHurt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillCD */
        {
            ret = srcBuf.readFloat(ref this.SkillCD);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MaxRange */
        {
            ret = srcBuf.readFloat(ref this.MaxRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MinRange */
        {
            ret = srcBuf.readFloat(ref this.MinRange);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ToSelfBuffID */
        {
            ret = srcBuf.readUInt32(ref this.ToSelfBuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ToOtherBuffID */
        {
            ret = srcBuf.readUInt32(ref this.ToOtherBuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EjectionedNum */
        {
            ret = srcBuf.readUInt8(ref this.EjectionedNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EjectionedDistance */
        {
            ret = srcBuf.readFloat(ref this.EjectionedDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IsOverEjectioned */
        {
            ret = srcBuf.readUInt8(ref this.IsOverEjectioned);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MaxTargetNum */
        {
            ret = srcBuf.readInt32(ref this.MaxTargetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SummerID */
        {
            ret = srcBuf.readUInt32(ref this.SummerID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SummerLifeTime */
        {
            ret = srcBuf.readFloat(ref this.SummerLifeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SummerNum */
        {
            ret = srcBuf.readInt32(ref this.SummerNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AddWeight */
        {
            ret = srcBuf.readInt32(ref this.AddWeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Strength */
        {
            ret = srcBuf.readInt32(ref this.Strength);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitOdds */
        {
            ret = srcBuf.readInt32(ref this.HitOdds);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitType */
        {
            ret = srcBuf.readInt32(ref this.HitType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitDistance */
        {
            ret = srcBuf.readFloat(ref this.HitDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillEffect */
        {
            ret = srcBuf.readInt32(ref this.SkillEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HaltType */
        {
            ret = srcBuf.readInt32(ref this.HaltType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DurTime */
        {
            ret = srcBuf.readInt32(ref this.DurTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CanSpellNoTarget */
        {
            ret = srcBuf.readUInt8(ref this.CanSpellNoTarget);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.SkillID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillID]", "{0:d}", this.SkillID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szSkillName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSkillName]", this.szSkillName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillLevel]", "0x{0:x2}", this.SkillLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsActiveSkill */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsActiveSkill]", "0x{0:x2}", this.IsActiveSkill);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillDispID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillDispID]", "{0:d}", this.SkillDispID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillNum]", "{0:d}", this.SkillNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillIconID */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[SkillIconID]", this.SkillIconID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szSkillDesc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSkillDesc]", this.szSkillDesc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.bShowByUI */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bShowByUI]", "{0:d}", this.bShowByUI);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TriigerCondition */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TriigerCondition]", "{0:d}", this.TriigerCondition);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillDisturbLv */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillDisturbLv]", "{0:d}", this.SkillDisturbLv);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillTarget */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillTarget]", "{0:d}", this.SkillTarget);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ImpactType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ImpactType]", "{0:d}", this.ImpactType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ColdDownPct */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ColdDownPct]", "{0:g}", this.ColdDownPct);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChangeState */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ChangeState]", "{0:d}", this.ChangeState);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MarkHitEffect */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MarkHitEffect]", "{0:d}", this.MarkHitEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MarkHitSound */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MarkHitSound]", "{0:d}", this.MarkHitSound);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillMaterialID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillMaterialID]", "{0:d}", this.SkillMaterialID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FirstCastLowThrote_HP */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FirstCastLowThrote_HP]", "{0:g}", this.FirstCastLowThrote_HP);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillStackCnt */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillStackCnt]", "{0:d}", this.SkillStackCnt);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PhysicalAttackMultiple */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PhysicalAttackMultiple]", "{0:g}", this.PhysicalAttackMultiple);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MagicAttackMultiple */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MagicAttackMultiple]", "{0:g}", this.MagicAttackMultiple);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PhysicalAttack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PhysicalAttack]", "{0:d}", this.PhysicalAttack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MagicAttack */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MagicAttack]", "{0:d}", this.MagicAttack);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GrowBlood */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GrowBlood]", "{0:g}", this.GrowBlood);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HolyHurt */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HolyHurt]", "{0:d}", this.HolyHurt);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillCD */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillCD]", "{0:g}", this.SkillCD);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MaxRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MaxRange]", "{0:g}", this.MaxRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MinRange */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MinRange]", "{0:g}", this.MinRange);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ToSelfBuffID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ToSelfBuffID]", "{0:d}", this.ToSelfBuffID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ToOtherBuffID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ToOtherBuffID]", "{0:d}", this.ToOtherBuffID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EjectionedNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EjectionedNum]", "{0:d}", this.EjectionedNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EjectionedDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EjectionedDistance]", "{0:g}", this.EjectionedDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IsOverEjectioned */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[IsOverEjectioned]", "{0:d}", this.IsOverEjectioned);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MaxTargetNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MaxTargetNum]", "{0:d}", this.MaxTargetNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SummerID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SummerID]", "{0:d}", this.SummerID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SummerLifeTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SummerLifeTime]", "{0:g}", this.SummerLifeTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SummerNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SummerNum]", "{0:d}", this.SummerNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AddWeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AddWeight]", "{0:d}", this.AddWeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Strength */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Strength]", "{0:d}", this.Strength);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitOdds */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitOdds]", "{0:d}", this.HitOdds);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitType]", "{0:d}", this.HitType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitDistance]", "{0:g}", this.HitDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillEffect */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillEffect]", "{0:d}", this.SkillEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HaltType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HaltType]", "{0:d}", this.HaltType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DurTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DurTime]", "{0:d}", this.DurTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CanSpellNoTarget */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CanSpellNoTarget]", "{0:d}", this.CanSpellNoTarget);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 加成参数 */
public class ExclusiveAddtionParam : tsf4g_csharp_interface
{
    /* public members */
    public byte AddType; // 加成
    public byte ChangeType; // 修改
    public Int32 Param; // 参数

    /* construct methods */
    public ExclusiveAddtionParam()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ExclusiveAddtionParam.CURRVERSION < cutVer)
        {
            cutVer = ExclusiveAddtionParam.CURRVERSION;
        }

        /* check cutversion */
        if (ExclusiveAddtionParam.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.AddType */
        {
            ret = destBuf.writeUInt8(this.AddType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChangeType */
        {
            ret = destBuf.writeUInt8(this.ChangeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Param */
        {
            ret = destBuf.writeInt32(this.Param);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ExclusiveAddtionParam.CURRVERSION < cutVer)
        {
            cutVer = ExclusiveAddtionParam.CURRVERSION;
        }

        /* check cutversion */
        if (ExclusiveAddtionParam.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.AddType */
        {
            ret = srcBuf.readUInt8(ref this.AddType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ChangeType */
        {
            ret = srcBuf.readUInt8(ref this.ChangeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Param */
        {
            ret = srcBuf.readInt32(ref this.Param);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ExclusiveAddtionParam.CURRVERSION < cutVer)
        {
            cutVer = ExclusiveAddtionParam.CURRVERSION;
        }

        /* check cutversion */
        if (ExclusiveAddtionParam.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.AddType */
        {
            ret = srcBuf.readUInt8(ref this.AddType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ChangeType */
        {
            ret = srcBuf.readUInt8(ref this.ChangeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Param */
        {
            ret = srcBuf.readInt32(ref this.Param);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.AddType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AddType]", "0x{0:x2}", this.AddType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChangeType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ChangeType]", "0x{0:x2}", this.ChangeType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Param */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Param]", "{0:d}", this.Param);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 专属装备加成 */
public class ExclusiveEquipAddtion : tsf4g_csharp_interface
{
    /* public members */
    public byte[] HeroName; // 英雄名称
    public UInt32 HeroID; // 英雄ID
    public UInt32 ExclusiveEquipID; // 专属装备ID
    public UInt32 SkillID; // 技能ID
    public ExclusiveAddtionParam[] AddtionArray;

    /* construct methods */
    public ExclusiveEquipAddtion()
    {
        HeroName = new byte[24];
        AddtionArray = new ExclusiveAddtionParam[4];
        for(int AddtionArray_i = 0; AddtionArray_i < 4; AddtionArray_i++)
        {
            AddtionArray[AddtionArray_i] = new ExclusiveAddtionParam();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ExclusiveEquipAddtion.CURRVERSION < cutVer)
        {
            cutVer = ExclusiveEquipAddtion.CURRVERSION;
        }

        /* check cutversion */
        if (ExclusiveEquipAddtion.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroName */
        {
            /* record sizeinfo position */
            Int32 sizePos4HeroName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HeroName = destBuf.getUsedSize();

            Int32 realSize4HeroName = TdrTypeUtil.cstrlen(this.HeroName);

            if (realSize4HeroName >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HeroName, realSize4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HeroName */
            Int32 size4HeroName = destBuf.getUsedSize() - beginPos4HeroName;
            ret = destBuf.writeUInt32((UInt32)(size4HeroName), sizePos4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroID */
        {
            ret = destBuf.writeUInt32(this.HeroID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ExclusiveEquipID */
        {
            ret = destBuf.writeUInt32(this.ExclusiveEquipID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillID */
        {
            ret = destBuf.writeUInt32(this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AddtionArray */
        {
            for (Int32 AddtionArray_i = 0; AddtionArray_i < 4; AddtionArray_i++)
            {
                ret = this.AddtionArray[AddtionArray_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ExclusiveEquipAddtion.CURRVERSION < cutVer)
        {
            cutVer = ExclusiveEquipAddtion.CURRVERSION;
        }

        /* check cutversion */
        if (ExclusiveEquipAddtion.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroName */
        {
            /* get sizeinfo for this.HeroName */
            UInt32 size4HeroName = 0;
            ret = srcBuf.readUInt32(ref size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HeroName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HeroName > this.HeroName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HeroName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HeroName, (int)size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HeroName[(int)size4HeroName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HeroName = TdrTypeUtil.cstrlen(this.HeroName) + 1;
            if (size4HeroName != realSize4HeroName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HeroID */
        {
            ret = srcBuf.readUInt32(ref this.HeroID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ExclusiveEquipID */
        {
            ret = srcBuf.readUInt32(ref this.ExclusiveEquipID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillID */
        {
            ret = srcBuf.readUInt32(ref this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AddtionArray */
        {
            for (Int32 AddtionArray_i = 0; AddtionArray_i < 4; AddtionArray_i++)
            {
                ret = this.AddtionArray[AddtionArray_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ExclusiveEquipAddtion.CURRVERSION < cutVer)
        {
            cutVer = ExclusiveEquipAddtion.CURRVERSION;
        }

        /* check cutversion */
        if (ExclusiveEquipAddtion.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroName */
        {
            Int32 size4HeroName = 24;

            /* load */
            ret = srcBuf.readCString(ref this.HeroName, (int)size4HeroName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HeroID */
        {
            ret = srcBuf.readUInt32(ref this.HeroID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ExclusiveEquipID */
        {
            ret = srcBuf.readUInt32(ref this.ExclusiveEquipID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillID */
        {
            ret = srcBuf.readUInt32(ref this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AddtionArray */
        {
            for (Int32 AddtionArray_i = 0; AddtionArray_i < 4; AddtionArray_i++)
            {
                ret = this.AddtionArray[AddtionArray_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HeroName]", this.HeroName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroID]", "{0:d}", this.HeroID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ExclusiveEquipID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ExclusiveEquipID]", "{0:d}", this.ExclusiveEquipID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillID]", "{0:d}", this.SkillID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AddtionArray */
        for (Int32 AddtionArray_i = 0; AddtionArray_i < 4; AddtionArray_i++)
        {
            if (null == this.AddtionArray[AddtionArray_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AddtionArray]", AddtionArray_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.AddtionArray[AddtionArray_i] */
            if (0 > indent)
            {
                ret = this.AddtionArray[AddtionArray_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.AddtionArray[AddtionArray_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 技能学习 */
public class SkillLearn : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 SkillID; // 技能ID
    public byte CostType; // 消耗货币类型
    public UInt16 CostNum; // 消耗货币数量
    public UInt16 HeroLevel; // 英雄等级

    /* construct methods */
    public SkillLearn()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillLearn.CURRVERSION < cutVer)
        {
            cutVer = SkillLearn.CURRVERSION;
        }

        /* check cutversion */
        if (SkillLearn.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.SkillID */
        {
            ret = destBuf.writeUInt32(this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt16(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroLevel */
        {
            ret = destBuf.writeUInt16(this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillLearn.CURRVERSION < cutVer)
        {
            cutVer = SkillLearn.CURRVERSION;
        }

        /* check cutversion */
        if (SkillLearn.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.SkillID */
        {
            ret = srcBuf.readUInt32(ref this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroLevel */
        {
            ret = srcBuf.readUInt16(ref this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillLearn.CURRVERSION < cutVer)
        {
            cutVer = SkillLearn.CURRVERSION;
        }

        /* check cutversion */
        if (SkillLearn.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.SkillID */
        {
            ret = srcBuf.readUInt32(ref this.SkillID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroLevel */
        {
            ret = srcBuf.readUInt16(ref this.HeroLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.SkillID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillID]", "{0:d}", this.SkillID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroLevel]", "{0:d}", this.HeroLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 技能升级 */
public class SkillUpgrade : tsf4g_csharp_interface
{
    /* public members */
    public byte level; // 技能升级前等级
    public byte CostType; // 消耗货币类型
    public UInt32 CostNum; // 消耗货币数量

    /* construct methods */
    public SkillUpgrade()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillUpgrade.CURRVERSION < cutVer)
        {
            cutVer = SkillUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (SkillUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.level */
        {
            ret = destBuf.writeUInt8(this.level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt32(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillUpgrade.CURRVERSION < cutVer)
        {
            cutVer = SkillUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (SkillUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.level */
        {
            ret = srcBuf.readUInt8(ref this.level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt32(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillUpgrade.CURRVERSION < cutVer)
        {
            cutVer = SkillUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (SkillUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.level */
        {
            ret = srcBuf.readUInt8(ref this.level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt32(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[level]", "0x{0:x2}", this.level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 天赋 */
public class Talent : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 TalentID; // 天赋ID
    public byte[] Name; // 天赋名字
    public UInt32 BuffID; // BuffID
    public byte BuffEffect; // Buff效果
    public float EffectPercent; // 效果百分比

    /* construct methods */
    public Talent()
    {
        Name = new byte[60];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Talent.CURRVERSION < cutVer)
        {
            cutVer = Talent.CURRVERSION;
        }

        /* check cutversion */
        if (Talent.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.TalentID */
        {
            ret = destBuf.writeUInt32(this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Name */
        {
            /* record sizeinfo position */
            Int32 sizePos4Name = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Name = destBuf.getUsedSize();

            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name);

            if (realSize4Name >= 60)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Name, realSize4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Name */
            Int32 size4Name = destBuf.getUsedSize() - beginPos4Name;
            ret = destBuf.writeUInt32((UInt32)(size4Name), sizePos4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BuffID */
        {
            ret = destBuf.writeUInt32(this.BuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BuffEffect */
        {
            ret = destBuf.writeUInt8(this.BuffEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectPercent */
        {
            ret = destBuf.writeFloat(this.EffectPercent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Talent.CURRVERSION < cutVer)
        {
            cutVer = Talent.CURRVERSION;
        }

        /* check cutversion */
        if (Talent.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.TalentID */
        {
            ret = srcBuf.readUInt32(ref this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Name */
        {
            /* get sizeinfo for this.Name */
            UInt32 size4Name = 0;
            ret = srcBuf.readUInt32(ref size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Name > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Name > this.Name.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Name[(int)size4Name - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name) + 1;
            if (size4Name != realSize4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BuffID */
        {
            ret = srcBuf.readUInt32(ref this.BuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BuffEffect */
        {
            ret = srcBuf.readUInt8(ref this.BuffEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectPercent */
        {
            ret = srcBuf.readFloat(ref this.EffectPercent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Talent.CURRVERSION < cutVer)
        {
            cutVer = Talent.CURRVERSION;
        }

        /* check cutversion */
        if (Talent.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.TalentID */
        {
            ret = srcBuf.readUInt32(ref this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Name */
        {
            Int32 size4Name = 60;

            /* load */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BuffID */
        {
            ret = srcBuf.readUInt32(ref this.BuffID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BuffEffect */
        {
            ret = srcBuf.readUInt8(ref this.BuffEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectPercent */
        {
            ret = srcBuf.readFloat(ref this.EffectPercent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.TalentID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TalentID]", "{0:d}", this.TalentID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Name */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Name]", this.Name);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BuffID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BuffID]", "{0:d}", this.BuffID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BuffEffect */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BuffEffect]", "0x{0:x2}", this.BuffEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectPercent */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectPercent]", "{0:g}", this.EffectPercent);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 默认赠送天赋 */
public class SystemGiftTalent : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 GiftTalentID; // 赠送天赋ID

    /* construct methods */
    public SystemGiftTalent()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SystemGiftTalent.CURRVERSION < cutVer)
        {
            cutVer = SystemGiftTalent.CURRVERSION;
        }

        /* check cutversion */
        if (SystemGiftTalent.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.GiftTalentID */
        {
            ret = destBuf.writeUInt32(this.GiftTalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SystemGiftTalent.CURRVERSION < cutVer)
        {
            cutVer = SystemGiftTalent.CURRVERSION;
        }

        /* check cutversion */
        if (SystemGiftTalent.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.GiftTalentID */
        {
            ret = srcBuf.readUInt32(ref this.GiftTalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SystemGiftTalent.CURRVERSION < cutVer)
        {
            cutVer = SystemGiftTalent.CURRVERSION;
        }

        /* check cutversion */
        if (SystemGiftTalent.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.GiftTalentID */
        {
            ret = srcBuf.readUInt32(ref this.GiftTalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.GiftTalentID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GiftTalentID]", "{0:d}", this.GiftTalentID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 天赋槽限制 */
public class TalentSlotLimit : tsf4g_csharp_interface
{
    /* public members */
    public byte HeroStar;
    public byte TalentSlotNum;

    /* construct methods */
    public TalentSlotLimit()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentSlotLimit.CURRVERSION < cutVer)
        {
            cutVer = TalentSlotLimit.CURRVERSION;
        }

        /* check cutversion */
        if (TalentSlotLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroStar */
        {
            ret = destBuf.writeUInt8(this.HeroStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TalentSlotNum */
        {
            ret = destBuf.writeUInt8(this.TalentSlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentSlotLimit.CURRVERSION < cutVer)
        {
            cutVer = TalentSlotLimit.CURRVERSION;
        }

        /* check cutversion */
        if (TalentSlotLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroStar */
        {
            ret = srcBuf.readUInt8(ref this.HeroStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TalentSlotNum */
        {
            ret = srcBuf.readUInt8(ref this.TalentSlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentSlotLimit.CURRVERSION < cutVer)
        {
            cutVer = TalentSlotLimit.CURRVERSION;
        }

        /* check cutversion */
        if (TalentSlotLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroStar */
        {
            ret = srcBuf.readUInt8(ref this.HeroStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TalentSlotNum */
        {
            ret = srcBuf.readUInt8(ref this.TalentSlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroStar */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroStar]", "0x{0:x2}", this.HeroStar);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TalentSlotNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TalentSlotNum]", "0x{0:x2}", this.TalentSlotNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 天赋槽扩展 */
public class TalentSlotExtend : tsf4g_csharp_interface
{
    /* public members */
    public byte SlotNum; // 扩前天赋槽数量
    public byte CostType; // 消耗货币类型
    public UInt16 CostNum; // 消耗货币数量

    /* construct methods */
    public TalentSlotExtend()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentSlotExtend.CURRVERSION < cutVer)
        {
            cutVer = TalentSlotExtend.CURRVERSION;
        }

        /* check cutversion */
        if (TalentSlotExtend.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.SlotNum */
        {
            ret = destBuf.writeUInt8(this.SlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt16(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentSlotExtend.CURRVERSION < cutVer)
        {
            cutVer = TalentSlotExtend.CURRVERSION;
        }

        /* check cutversion */
        if (TalentSlotExtend.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.SlotNum */
        {
            ret = srcBuf.readUInt8(ref this.SlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentSlotExtend.CURRVERSION < cutVer)
        {
            cutVer = TalentSlotExtend.CURRVERSION;
        }

        /* check cutversion */
        if (TalentSlotExtend.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.SlotNum */
        {
            ret = srcBuf.readUInt8(ref this.SlotNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.SlotNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SlotNum]", "0x{0:x2}", this.SlotNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 天赋学习 */
public class TalentLearn : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 TalentID; // 天赋ID
    public byte CostType; // 消耗货币类型
    public UInt16 CostNum; // 消耗货币数量

    /* construct methods */
    public TalentLearn()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentLearn.CURRVERSION < cutVer)
        {
            cutVer = TalentLearn.CURRVERSION;
        }

        /* check cutversion */
        if (TalentLearn.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.TalentID */
        {
            ret = destBuf.writeUInt32(this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt16(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentLearn.CURRVERSION < cutVer)
        {
            cutVer = TalentLearn.CURRVERSION;
        }

        /* check cutversion */
        if (TalentLearn.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.TalentID */
        {
            ret = srcBuf.readUInt32(ref this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentLearn.CURRVERSION < cutVer)
        {
            cutVer = TalentLearn.CURRVERSION;
        }

        /* check cutversion */
        if (TalentLearn.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.TalentID */
        {
            ret = srcBuf.readUInt32(ref this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.TalentID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TalentID]", "{0:d}", this.TalentID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 天赋替换 */
public class TalentReplace : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 TalentID; // 天赋ID
    public byte CostType; // 消耗货币类型
    public UInt16 CostNum; // 消耗货币数量
    public UInt32 CostMaterialID; // 消耗道具ID
    public UInt16 CostMaterialNum; // 消耗道具数量

    /* construct methods */
    public TalentReplace()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentReplace.CURRVERSION < cutVer)
        {
            cutVer = TalentReplace.CURRVERSION;
        }

        /* check cutversion */
        if (TalentReplace.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.TalentID */
        {
            ret = destBuf.writeUInt32(this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostType */
        {
            ret = destBuf.writeUInt8(this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostNum */
        {
            ret = destBuf.writeUInt16(this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialID */
        {
            ret = destBuf.writeUInt32(this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialNum */
        {
            ret = destBuf.writeUInt16(this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentReplace.CURRVERSION < cutVer)
        {
            cutVer = TalentReplace.CURRVERSION;
        }

        /* check cutversion */
        if (TalentReplace.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.TalentID */
        {
            ret = srcBuf.readUInt32(ref this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt16(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TalentReplace.CURRVERSION < cutVer)
        {
            cutVer = TalentReplace.CURRVERSION;
        }

        /* check cutversion */
        if (TalentReplace.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.TalentID */
        {
            ret = srcBuf.readUInt32(ref this.TalentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostType */
        {
            ret = srcBuf.readUInt8(ref this.CostType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostNum */
        {
            ret = srcBuf.readUInt16(ref this.CostNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt16(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.TalentID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TalentID]", "{0:d}", this.TalentID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostType]", "0x{0:x2}", this.CostType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostNum]", "{0:d}", this.CostNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialID]", "{0:d}", this.CostMaterialID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialNum]", "{0:d}", this.CostMaterialNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class QTEInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Id; // ID
    public UInt32 SkillGroup; // 技能组
    public UInt32 Level; // 等级
    public byte[] Name; // 名称
    public byte[] Desc; // 描述
    public UInt32 Type; // QTE类型
    public byte[] SkillDesc; // 技能描述描述
    public byte[] Pic; // 图标
    public byte[] Sound; // 音效
    public UInt32 ConsumeAnger; // 消耗怒气点
    public UInt32 HeroNum; // 英雄数
    public UInt32[] Heros; // 英雄
    public UInt32 ScriptId; // 脚本ID
    public float Range; // 距离范围
    public UInt32 PAaddition; // 物攻加成
    public UInt32 MAaddition; // 魔攻加成
    public float HurtFactor; // 伤害系数
    public float ExtraFactor; // 额外系数
    public UInt32 Buff; // BUFF
    public byte[] effects; // 特效

    /* construct methods */
    public QTEInfo()
    {
        Name = new byte[64];
        Desc = new byte[64];
        SkillDesc = new byte[256];
        Pic = new byte[64];
        Sound = new byte[64];
        Heros = new UInt32[4];
        effects = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QTEInfo.CURRVERSION < cutVer)
        {
            cutVer = QTEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (QTEInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Id */
        {
            ret = destBuf.writeUInt32(this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillGroup */
        {
            ret = destBuf.writeUInt32(this.SkillGroup);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeUInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Name */
        {
            /* record sizeinfo position */
            Int32 sizePos4Name = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Name = destBuf.getUsedSize();

            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name);

            if (realSize4Name >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Name, realSize4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Name */
            Int32 size4Name = destBuf.getUsedSize() - beginPos4Name;
            ret = destBuf.writeUInt32((UInt32)(size4Name), sizePos4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Type */
        {
            ret = destBuf.writeUInt32(this.Type);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SkillDesc */
        {
            /* record sizeinfo position */
            Int32 sizePos4SkillDesc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4SkillDesc = destBuf.getUsedSize();

            Int32 realSize4SkillDesc = TdrTypeUtil.cstrlen(this.SkillDesc);

            if (realSize4SkillDesc >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.SkillDesc, realSize4SkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.SkillDesc */
            Int32 size4SkillDesc = destBuf.getUsedSize() - beginPos4SkillDesc;
            ret = destBuf.writeUInt32((UInt32)(size4SkillDesc), sizePos4SkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Pic */
        {
            /* record sizeinfo position */
            Int32 sizePos4Pic = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Pic = destBuf.getUsedSize();

            Int32 realSize4Pic = TdrTypeUtil.cstrlen(this.Pic);

            if (realSize4Pic >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Pic, realSize4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Pic */
            Int32 size4Pic = destBuf.getUsedSize() - beginPos4Pic;
            ret = destBuf.writeUInt32((UInt32)(size4Pic), sizePos4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Sound */
        {
            /* record sizeinfo position */
            Int32 sizePos4Sound = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Sound = destBuf.getUsedSize();

            Int32 realSize4Sound = TdrTypeUtil.cstrlen(this.Sound);

            if (realSize4Sound >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Sound, realSize4Sound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Sound */
            Int32 size4Sound = destBuf.getUsedSize() - beginPos4Sound;
            ret = destBuf.writeUInt32((UInt32)(size4Sound), sizePos4Sound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ConsumeAnger */
        {
            ret = destBuf.writeUInt32(this.ConsumeAnger);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroNum */
        {
            ret = destBuf.writeUInt32(this.HeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Heros */
        {
            for (Int32 Heros_i = 0; Heros_i < 4; Heros_i++)
            {
                ret = destBuf.writeUInt32(this.Heros[Heros_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.ScriptId */
        {
            ret = destBuf.writeUInt32(this.ScriptId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Range */
        {
            ret = destBuf.writeFloat(this.Range);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PAaddition */
        {
            ret = destBuf.writeUInt32(this.PAaddition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MAaddition */
        {
            ret = destBuf.writeUInt32(this.MAaddition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HurtFactor */
        {
            ret = destBuf.writeFloat(this.HurtFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ExtraFactor */
        {
            ret = destBuf.writeFloat(this.ExtraFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Buff */
        {
            ret = destBuf.writeUInt32(this.Buff);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.effects */
        {
            /* record sizeinfo position */
            Int32 sizePos4effects = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4effects = destBuf.getUsedSize();

            Int32 realSize4effects = TdrTypeUtil.cstrlen(this.effects);

            if (realSize4effects >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.effects, realSize4effects);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.effects */
            Int32 size4effects = destBuf.getUsedSize() - beginPos4effects;
            ret = destBuf.writeUInt32((UInt32)(size4effects), sizePos4effects);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QTEInfo.CURRVERSION < cutVer)
        {
            cutVer = QTEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (QTEInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillGroup */
        {
            ret = srcBuf.readUInt32(ref this.SkillGroup);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Name */
        {
            /* get sizeinfo for this.Name */
            UInt32 size4Name = 0;
            ret = srcBuf.readUInt32(ref size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Name > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Name > this.Name.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Name[(int)size4Name - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name) + 1;
            if (size4Name != realSize4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Type */
        {
            ret = srcBuf.readUInt32(ref this.Type);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SkillDesc */
        {
            /* get sizeinfo for this.SkillDesc */
            UInt32 size4SkillDesc = 0;
            ret = srcBuf.readUInt32(ref size4SkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4SkillDesc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4SkillDesc > this.SkillDesc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4SkillDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.SkillDesc, (int)size4SkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.SkillDesc[(int)size4SkillDesc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4SkillDesc = TdrTypeUtil.cstrlen(this.SkillDesc) + 1;
            if (size4SkillDesc != realSize4SkillDesc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Pic */
        {
            /* get sizeinfo for this.Pic */
            UInt32 size4Pic = 0;
            ret = srcBuf.readUInt32(ref size4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Pic > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Pic > this.Pic.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Pic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Pic, (int)size4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Pic[(int)size4Pic - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Pic = TdrTypeUtil.cstrlen(this.Pic) + 1;
            if (size4Pic != realSize4Pic)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Sound */
        {
            /* get sizeinfo for this.Sound */
            UInt32 size4Sound = 0;
            ret = srcBuf.readUInt32(ref size4Sound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Sound > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Sound > this.Sound.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Sound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Sound, (int)size4Sound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Sound[(int)size4Sound - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Sound = TdrTypeUtil.cstrlen(this.Sound) + 1;
            if (size4Sound != realSize4Sound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ConsumeAnger */
        {
            ret = srcBuf.readUInt32(ref this.ConsumeAnger);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroNum */
        {
            ret = srcBuf.readUInt32(ref this.HeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Heros */
        {
            for (Int32 Heros_i = 0; Heros_i < 4; Heros_i++)
            {
                ret = srcBuf.readUInt32(ref this.Heros[Heros_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.ScriptId */
        {
            ret = srcBuf.readUInt32(ref this.ScriptId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Range */
        {
            ret = srcBuf.readFloat(ref this.Range);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PAaddition */
        {
            ret = srcBuf.readUInt32(ref this.PAaddition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MAaddition */
        {
            ret = srcBuf.readUInt32(ref this.MAaddition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HurtFactor */
        {
            ret = srcBuf.readFloat(ref this.HurtFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ExtraFactor */
        {
            ret = srcBuf.readFloat(ref this.ExtraFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Buff */
        {
            ret = srcBuf.readUInt32(ref this.Buff);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.effects */
        {
            /* get sizeinfo for this.effects */
            UInt32 size4effects = 0;
            ret = srcBuf.readUInt32(ref size4effects);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4effects > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4effects > this.effects.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4effects)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.effects, (int)size4effects);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.effects[(int)size4effects - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4effects = TdrTypeUtil.cstrlen(this.effects) + 1;
            if (size4effects != realSize4effects)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QTEInfo.CURRVERSION < cutVer)
        {
            cutVer = QTEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (QTEInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillGroup */
        {
            ret = srcBuf.readUInt32(ref this.SkillGroup);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Name */
        {
            Int32 size4Name = 64;

            /* load */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 64;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Type */
        {
            ret = srcBuf.readUInt32(ref this.Type);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SkillDesc */
        {
            Int32 size4SkillDesc = 256;

            /* load */
            ret = srcBuf.readCString(ref this.SkillDesc, (int)size4SkillDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Pic */
        {
            Int32 size4Pic = 64;

            /* load */
            ret = srcBuf.readCString(ref this.Pic, (int)size4Pic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Sound */
        {
            Int32 size4Sound = 64;

            /* load */
            ret = srcBuf.readCString(ref this.Sound, (int)size4Sound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ConsumeAnger */
        {
            ret = srcBuf.readUInt32(ref this.ConsumeAnger);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroNum */
        {
            ret = srcBuf.readUInt32(ref this.HeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Heros */
        {
            for (Int32 Heros_i = 0; Heros_i < 4; Heros_i++)
            {
                ret = srcBuf.readUInt32(ref this.Heros[Heros_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.ScriptId */
        {
            ret = srcBuf.readUInt32(ref this.ScriptId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Range */
        {
            ret = srcBuf.readFloat(ref this.Range);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PAaddition */
        {
            ret = srcBuf.readUInt32(ref this.PAaddition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MAaddition */
        {
            ret = srcBuf.readUInt32(ref this.MAaddition);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HurtFactor */
        {
            ret = srcBuf.readFloat(ref this.HurtFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ExtraFactor */
        {
            ret = srcBuf.readFloat(ref this.ExtraFactor);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Buff */
        {
            ret = srcBuf.readUInt32(ref this.Buff);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.effects */
        {
            Int32 size4effects = 64;

            /* load */
            ret = srcBuf.readCString(ref this.effects, (int)size4effects);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Id */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Id]", "{0:d}", this.Id);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillGroup */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillGroup]", "{0:d}", this.SkillGroup);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Name */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Name]", this.Name);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Type */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Type]", "{0:d}", this.Type);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SkillDesc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[SkillDesc]", this.SkillDesc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Pic */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Pic]", this.Pic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Sound */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Sound]", this.Sound);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ConsumeAnger */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ConsumeAnger]", "{0:d}", this.ConsumeAnger);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroNum]", "{0:d}", this.HeroNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Heros */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Heros]", 4);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Heros_i = 0; Heros_i < 4; Heros_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.Heros[Heros_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ScriptId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ScriptId]", "{0:d}", this.ScriptId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Range */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Range]", "{0:g}", this.Range);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PAaddition */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PAaddition]", "{0:d}", this.PAaddition);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MAaddition */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MAaddition]", "{0:d}", this.MAaddition);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HurtFactor */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HurtFactor]", "{0:g}", this.HurtFactor);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ExtraFactor */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ExtraFactor]", "{0:g}", this.ExtraFactor);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Buff */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Buff]", "{0:d}", this.Buff);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.effects */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[effects]", this.effects);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class QteBuff : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Id; // 序列ID
    public byte[][] Res; // 特效
    public byte[][] BindPos; // 挂载点
    public float TimeOut; // 作用时间
    public byte[] BuffType; // 效果
    public Int32[] Param; // 参数

    /* construct methods */
    public QteBuff()
    {
        Res = new byte[2][];
        for (int Res_i = 0;Res_i < 2;Res_i++)
        {
            Res[Res_i] = new byte[64];
        }
        BindPos = new byte[2][];
        for (int BindPos_i = 0;BindPos_i < 2;BindPos_i++)
        {
            BindPos[BindPos_i] = new byte[32];
        }
        BuffType = new byte[5];
        Param = new Int32[5];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QteBuff.CURRVERSION < cutVer)
        {
            cutVer = QteBuff.CURRVERSION;
        }

        /* check cutversion */
        if (QteBuff.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Id */
        {
            ret = destBuf.writeUInt32(this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Res */
        {
            for (Int32 Res_i = 0; Res_i < 2; Res_i++)
            {
                /* record sizeinfo position */
                Int32 sizePos4Res = destBuf.getUsedSize();

                /* reserve space for sizeinfo */
                ret = destBuf.reserve(sizeof(UInt32));
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* record real-data's begin postion in buf */
                Int32 beginPos4Res = destBuf.getUsedSize();

                Int32 realSize4Res = TdrTypeUtil.cstrlen(this.Res[Res_i]);

                if (realSize4Res >= 64)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }

                /* pack */
                ret = destBuf.writeCString(this.Res[Res_i], realSize4Res);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* gurantee string or wstring terminated with null character */
                ret = destBuf.writeUInt8(0x00);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* set sizeinfo for this.Res[Res_i] */
                Int32 size4Res = destBuf.getUsedSize() - beginPos4Res;
                ret = destBuf.writeUInt32((UInt32)(size4Res), sizePos4Res);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.BindPos */
        {
            for (Int32 BindPos_i = 0; BindPos_i < 2; BindPos_i++)
            {
                /* record sizeinfo position */
                Int32 sizePos4BindPos = destBuf.getUsedSize();

                /* reserve space for sizeinfo */
                ret = destBuf.reserve(sizeof(UInt32));
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* record real-data's begin postion in buf */
                Int32 beginPos4BindPos = destBuf.getUsedSize();

                Int32 realSize4BindPos = TdrTypeUtil.cstrlen(this.BindPos[BindPos_i]);

                if (realSize4BindPos >= 32)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }

                /* pack */
                ret = destBuf.writeCString(this.BindPos[BindPos_i], realSize4BindPos);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* gurantee string or wstring terminated with null character */
                ret = destBuf.writeUInt8(0x00);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* set sizeinfo for this.BindPos[BindPos_i] */
                Int32 size4BindPos = destBuf.getUsedSize() - beginPos4BindPos;
                ret = destBuf.writeUInt32((UInt32)(size4BindPos), sizePos4BindPos);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.TimeOut */
        {
            ret = destBuf.writeFloat(this.TimeOut);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BuffType */
        {
            for (Int32 BuffType_i = 0; BuffType_i < 5; BuffType_i++)
            {
                ret = destBuf.writeUInt8(this.BuffType[BuffType_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.Param */
        {
            for (Int32 Param_i = 0; Param_i < 5; Param_i++)
            {
                ret = destBuf.writeInt32(this.Param[Param_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QteBuff.CURRVERSION < cutVer)
        {
            cutVer = QteBuff.CURRVERSION;
        }

        /* check cutversion */
        if (QteBuff.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Res */
        {
            for (Int32 Res_i = 0; Res_i < 2; Res_i++)
            {
                /* get sizeinfo for this.Res[Res_i] */
                UInt32 size4Res = 0;
                ret = srcBuf.readUInt32(ref size4Res);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* check whether data in buffer are enough */
                if ((int)size4Res > srcBuf.getLeftSize())
                {
                    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
                }

                /* check whether sizeinfo is valid */
                if ((int)size4Res > this.Res[Res_i].GetLength(0))
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }

                /* string or wstring must contains a null character */
                if (1 > size4Res)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
                }

                /* unpack */
                ret = srcBuf.readCString(ref this.Res[Res_i], (int)size4Res);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* check whether string-content is consistent with sizeinfo */
                if (0 != this.Res[Res_i][(int)size4Res - 1])
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
                }
                Int32 realSize4Res = TdrTypeUtil.cstrlen(this.Res[Res_i]) + 1;
                if (size4Res != realSize4Res)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
                }
            }
        }

        /* unpack member: this.BindPos */
        {
            for (Int32 BindPos_i = 0; BindPos_i < 2; BindPos_i++)
            {
                /* get sizeinfo for this.BindPos[BindPos_i] */
                UInt32 size4BindPos = 0;
                ret = srcBuf.readUInt32(ref size4BindPos);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* check whether data in buffer are enough */
                if ((int)size4BindPos > srcBuf.getLeftSize())
                {
                    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
                }

                /* check whether sizeinfo is valid */
                if ((int)size4BindPos > this.BindPos[BindPos_i].GetLength(0))
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }

                /* string or wstring must contains a null character */
                if (1 > size4BindPos)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
                }

                /* unpack */
                ret = srcBuf.readCString(ref this.BindPos[BindPos_i], (int)size4BindPos);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* check whether string-content is consistent with sizeinfo */
                if (0 != this.BindPos[BindPos_i][(int)size4BindPos - 1])
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
                }
                Int32 realSize4BindPos = TdrTypeUtil.cstrlen(this.BindPos[BindPos_i]) + 1;
                if (size4BindPos != realSize4BindPos)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
                }
            }
        }

        /* unpack member: this.TimeOut */
        {
            ret = srcBuf.readFloat(ref this.TimeOut);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BuffType */
        {
            for (Int32 BuffType_i = 0; BuffType_i < 5; BuffType_i++)
            {
                ret = srcBuf.readUInt8(ref this.BuffType[BuffType_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.Param */
        {
            for (Int32 Param_i = 0; Param_i < 5; Param_i++)
            {
                ret = srcBuf.readInt32(ref this.Param[Param_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QteBuff.CURRVERSION < cutVer)
        {
            cutVer = QteBuff.CURRVERSION;
        }

        /* check cutversion */
        if (QteBuff.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Id */
        {
            ret = srcBuf.readUInt32(ref this.Id);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Res */
        {
            for (Int32 Res_i = 0; Res_i < 2; Res_i++)
            {
                Int32 size4Res = 64;

                /* load */
                ret = srcBuf.readCString(ref this.Res[Res_i], (int)size4Res);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

            }
        }

        /* load member: this.BindPos */
        {
            for (Int32 BindPos_i = 0; BindPos_i < 2; BindPos_i++)
            {
                Int32 size4BindPos = 32;

                /* load */
                ret = srcBuf.readCString(ref this.BindPos[BindPos_i], (int)size4BindPos);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

            }
        }

        /* load member: this.TimeOut */
        {
            ret = srcBuf.readFloat(ref this.TimeOut);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BuffType */
        {
            for (Int32 BuffType_i = 0; BuffType_i < 5; BuffType_i++)
            {
                ret = srcBuf.readUInt8(ref this.BuffType[BuffType_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.Param */
        {
            for (Int32 Param_i = 0; Param_i < 5; Param_i++)
            {
                ret = srcBuf.readInt32(ref this.Param[Param_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Id */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Id]", "{0:d}", this.Id);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Res */
        for (Int32 Res_i = 0; Res_i < 2; Res_i++)
        {
            ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Res]", Res_i, this.Res[Res_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.BindPos */
        for (Int32 BindPos_i = 0; BindPos_i < 2; BindPos_i++)
        {
            ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BindPos]", BindPos_i, this.BindPos[BindPos_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.TimeOut */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TimeOut]", "{0:g}", this.TimeOut);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BuffType */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[BuffType]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 BuffType_i = 0; BuffType_i < 5; BuffType_i++)
        {
            ret = destBuf.sprintf("0x{0:x2}", this.BuffType[BuffType_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Param */
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Param]", 5);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Param_i = 0; Param_i < 5; Param_i++)
        {
            ret = destBuf.sprintf("{0:d}", this.Param[Param_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* QTE升级 */
public class QteUpgrade : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ID; // ID
    public UInt32 UpgradeID; // 升级后ID
    public UInt32 CostMaterialID; // 消耗材料ID
    public UInt32 CostMaterialNum; // 消耗材料数量
    public UInt32 CostGoldNum; // 消耗金币数量

    /* construct methods */
    public QteUpgrade()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QteUpgrade.CURRVERSION < cutVer)
        {
            cutVer = QteUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (QteUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ID */
        {
            ret = destBuf.writeUInt32(this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.UpgradeID */
        {
            ret = destBuf.writeUInt32(this.UpgradeID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialID */
        {
            ret = destBuf.writeUInt32(this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialNum */
        {
            ret = destBuf.writeUInt32(this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostGoldNum */
        {
            ret = destBuf.writeUInt32(this.CostGoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QteUpgrade.CURRVERSION < cutVer)
        {
            cutVer = QteUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (QteUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UpgradeID */
        {
            ret = srcBuf.readUInt32(ref this.UpgradeID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostGoldNum */
        {
            ret = srcBuf.readUInt32(ref this.CostGoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QteUpgrade.CURRVERSION < cutVer)
        {
            cutVer = QteUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (QteUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.UpgradeID */
        {
            ret = srcBuf.readUInt32(ref this.UpgradeID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostGoldNum */
        {
            ret = srcBuf.readUInt32(ref this.CostGoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ID]", "{0:d}", this.ID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.UpgradeID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[UpgradeID]", "{0:d}", this.UpgradeID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialID]", "{0:d}", this.CostMaterialID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialNum]", "{0:d}", this.CostMaterialNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostGoldNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostGoldNum]", "{0:d}", this.CostGoldNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class NaturalEnemyHero : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 AttackHeroId; // 攻击英雄ID
    public UInt32 UnderAttackHeroId; // 受击英雄ID
    public byte TargetType; // 作用目标
    public byte EffectType; // 效果
    public Int32 EffectParm; // 效果参数

    /* construct methods */
    public NaturalEnemyHero()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NaturalEnemyHero.CURRVERSION < cutVer)
        {
            cutVer = NaturalEnemyHero.CURRVERSION;
        }

        /* check cutversion */
        if (NaturalEnemyHero.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.AttackHeroId */
        {
            ret = destBuf.writeUInt32(this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.UnderAttackHeroId */
        {
            ret = destBuf.writeUInt32(this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TargetType */
        {
            ret = destBuf.writeUInt8(this.TargetType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType */
        {
            ret = destBuf.writeUInt8(this.EffectType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParm */
        {
            ret = destBuf.writeInt32(this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NaturalEnemyHero.CURRVERSION < cutVer)
        {
            cutVer = NaturalEnemyHero.CURRVERSION;
        }

        /* check cutversion */
        if (NaturalEnemyHero.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.AttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UnderAttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TargetType */
        {
            ret = srcBuf.readUInt8(ref this.TargetType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectType */
        {
            ret = srcBuf.readUInt8(ref this.EffectType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParm */
        {
            ret = srcBuf.readInt32(ref this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NaturalEnemyHero.CURRVERSION < cutVer)
        {
            cutVer = NaturalEnemyHero.CURRVERSION;
        }

        /* check cutversion */
        if (NaturalEnemyHero.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.AttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.UnderAttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TargetType */
        {
            ret = srcBuf.readUInt8(ref this.TargetType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectType */
        {
            ret = srcBuf.readUInt8(ref this.EffectType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParm */
        {
            ret = srcBuf.readInt32(ref this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.AttackHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackHeroId]", "{0:d}", this.AttackHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.UnderAttackHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[UnderAttackHeroId]", "{0:d}", this.UnderAttackHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TargetType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TargetType]", "{0:d}", this.TargetType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType]", "{0:d}", this.EffectType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParm */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectParm]", "{0:d}", this.EffectParm);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class PartnerHero : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 HeroId; // 英雄ID
    public UInt32 PartnerHeroId; // 拍档英雄ID
    public Int32 EffectType; // 效果
    public Int32 EffectParm; // 效果参数
    public byte[] Desc; // 描述

    /* construct methods */
    public PartnerHero()
    {
        Desc = new byte[100];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PartnerHero.CURRVERSION < cutVer)
        {
            cutVer = PartnerHero.CURRVERSION;
        }

        /* check cutversion */
        if (PartnerHero.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.HeroId */
        {
            ret = destBuf.writeUInt32(this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.PartnerHeroId */
        {
            ret = destBuf.writeUInt32(this.PartnerHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectType */
        {
            ret = destBuf.writeInt32(this.EffectType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParm */
        {
            ret = destBuf.writeInt32(this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PartnerHero.CURRVERSION < cutVer)
        {
            cutVer = PartnerHero.CURRVERSION;
        }

        /* check cutversion */
        if (PartnerHero.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.HeroId */
        {
            ret = srcBuf.readUInt32(ref this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.PartnerHeroId */
        {
            ret = srcBuf.readUInt32(ref this.PartnerHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectType */
        {
            ret = srcBuf.readInt32(ref this.EffectType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParm */
        {
            ret = srcBuf.readInt32(ref this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PartnerHero.CURRVERSION < cutVer)
        {
            cutVer = PartnerHero.CURRVERSION;
        }

        /* check cutversion */
        if (PartnerHero.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.HeroId */
        {
            ret = srcBuf.readUInt32(ref this.HeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.PartnerHeroId */
        {
            ret = srcBuf.readUInt32(ref this.PartnerHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectType */
        {
            ret = srcBuf.readInt32(ref this.EffectType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParm */
        {
            ret = srcBuf.readInt32(ref this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 100;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.HeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroId]", "{0:d}", this.HeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.PartnerHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PartnerHeroId]", "{0:d}", this.PartnerHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectType]", "{0:d}", this.EffectType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParm */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectParm]", "{0:d}", this.EffectParm);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class NaturalEnemyHeroDesc : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 AttackHeroId; // 攻击英雄ID
    public UInt32 UnderAttackHeroId; // 受击英雄ID
    public byte[] Desc; // 描述

    /* construct methods */
    public NaturalEnemyHeroDesc()
    {
        Desc = new byte[100];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NaturalEnemyHeroDesc.CURRVERSION < cutVer)
        {
            cutVer = NaturalEnemyHeroDesc.CURRVERSION;
        }

        /* check cutversion */
        if (NaturalEnemyHeroDesc.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.AttackHeroId */
        {
            ret = destBuf.writeUInt32(this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.UnderAttackHeroId */
        {
            ret = destBuf.writeUInt32(this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NaturalEnemyHeroDesc.CURRVERSION < cutVer)
        {
            cutVer = NaturalEnemyHeroDesc.CURRVERSION;
        }

        /* check cutversion */
        if (NaturalEnemyHeroDesc.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.AttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UnderAttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NaturalEnemyHeroDesc.CURRVERSION < cutVer)
        {
            cutVer = NaturalEnemyHeroDesc.CURRVERSION;
        }

        /* check cutversion */
        if (NaturalEnemyHeroDesc.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.AttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.UnderAttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 100;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.AttackHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackHeroId]", "{0:d}", this.AttackHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.UnderAttackHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[UnderAttackHeroId]", "{0:d}", this.UnderAttackHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class PredatorRelationship : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ID; // 关系
    public UInt32 AttackHeroId; // 攻击英雄ID
    public UInt32 UnderAttackHeroId; // 受击英雄ID
    public byte TargetType; // 作用目标
    public byte[] Desc; // 升级条件描述
    public UInt32 CostMaterialID; // 材料ID

    /* construct methods */
    public PredatorRelationship()
    {
        Desc = new byte[100];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorRelationship.CURRVERSION < cutVer)
        {
            cutVer = PredatorRelationship.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorRelationship.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ID */
        {
            ret = destBuf.writeUInt32(this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.AttackHeroId */
        {
            ret = destBuf.writeUInt32(this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.UnderAttackHeroId */
        {
            ret = destBuf.writeUInt32(this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TargetType */
        {
            ret = destBuf.writeUInt8(this.TargetType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialID */
        {
            ret = destBuf.writeUInt32(this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorRelationship.CURRVERSION < cutVer)
        {
            cutVer = PredatorRelationship.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorRelationship.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UnderAttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TargetType */
        {
            ret = srcBuf.readUInt8(ref this.TargetType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorRelationship.CURRVERSION < cutVer)
        {
            cutVer = PredatorRelationship.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorRelationship.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.AttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.AttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.UnderAttackHeroId */
        {
            ret = srcBuf.readUInt32(ref this.UnderAttackHeroId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TargetType */
        {
            ret = srcBuf.readUInt8(ref this.TargetType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 100;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.CostMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ID]", "{0:d}", this.ID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.AttackHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[AttackHeroId]", "{0:d}", this.AttackHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.UnderAttackHeroId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[UnderAttackHeroId]", "{0:d}", this.UnderAttackHeroId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TargetType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TargetType]", "{0:d}", this.TargetType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialID]", "{0:d}", this.CostMaterialID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class PredatorUpgrade : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ID; // 序号
    public UInt32 RelationId; // 关系id
    public Int32 Level; // 境界等级
    public Int32 EffectParm; // 效果参数
    public Int32 Effect; // 效果
    public byte[] Desc; // 描述（只对目标英雄产生效果）
    public byte[] Name; // 名称

    /* construct methods */
    public PredatorUpgrade()
    {
        Desc = new byte[100];
        Name = new byte[100];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorUpgrade.CURRVERSION < cutVer)
        {
            cutVer = PredatorUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ID */
        {
            ret = destBuf.writeUInt32(this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RelationId */
        {
            ret = destBuf.writeUInt32(this.RelationId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EffectParm */
        {
            ret = destBuf.writeInt32(this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Effect */
        {
            ret = destBuf.writeInt32(this.Effect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Desc */
        {
            /* record sizeinfo position */
            Int32 sizePos4Desc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Desc = destBuf.getUsedSize();

            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc);

            if (realSize4Desc >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Desc, realSize4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Desc */
            Int32 size4Desc = destBuf.getUsedSize() - beginPos4Desc;
            ret = destBuf.writeUInt32((UInt32)(size4Desc), sizePos4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Name */
        {
            /* record sizeinfo position */
            Int32 sizePos4Name = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Name = destBuf.getUsedSize();

            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name);

            if (realSize4Name >= 100)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Name, realSize4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Name */
            Int32 size4Name = destBuf.getUsedSize() - beginPos4Name;
            ret = destBuf.writeUInt32((UInt32)(size4Name), sizePos4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorUpgrade.CURRVERSION < cutVer)
        {
            cutVer = PredatorUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RelationId */
        {
            ret = srcBuf.readUInt32(ref this.RelationId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EffectParm */
        {
            ret = srcBuf.readInt32(ref this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Effect */
        {
            ret = srcBuf.readInt32(ref this.Effect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Desc */
        {
            /* get sizeinfo for this.Desc */
            UInt32 size4Desc = 0;
            ret = srcBuf.readUInt32(ref size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Desc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Desc > this.Desc.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Desc[(int)size4Desc - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Desc = TdrTypeUtil.cstrlen(this.Desc) + 1;
            if (size4Desc != realSize4Desc)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Name */
        {
            /* get sizeinfo for this.Name */
            UInt32 size4Name = 0;
            ret = srcBuf.readUInt32(ref size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Name > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Name > this.Name.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Name[(int)size4Name - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Name = TdrTypeUtil.cstrlen(this.Name) + 1;
            if (size4Name != realSize4Name)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorUpgrade.CURRVERSION < cutVer)
        {
            cutVer = PredatorUpgrade.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorUpgrade.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ID */
        {
            ret = srcBuf.readUInt32(ref this.ID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RelationId */
        {
            ret = srcBuf.readUInt32(ref this.RelationId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EffectParm */
        {
            ret = srcBuf.readInt32(ref this.EffectParm);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Effect */
        {
            ret = srcBuf.readInt32(ref this.Effect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Desc */
        {
            Int32 size4Desc = 100;

            /* load */
            ret = srcBuf.readCString(ref this.Desc, (int)size4Desc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Name */
        {
            Int32 size4Name = 100;

            /* load */
            ret = srcBuf.readCString(ref this.Name, (int)size4Name);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ID]", "{0:d}", this.ID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RelationId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RelationId]", "{0:d}", this.RelationId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EffectParm */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EffectParm]", "{0:d}", this.EffectParm);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Effect */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Effect]", "{0:d}", this.Effect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Desc */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Desc]", this.Desc);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Name */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Name]", this.Name);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class PredatorUpgradeCondition : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Level; // 等级
    public UInt32 Star; // 英雄星级
    public UInt32 CostMaterialNum; // 消耗材料数量
    public UInt32 CostGoldNum; // 消耗金币数

    /* construct methods */
    public PredatorUpgradeCondition()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorUpgradeCondition.CURRVERSION < cutVer)
        {
            cutVer = PredatorUpgradeCondition.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorUpgradeCondition.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeUInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Star */
        {
            ret = destBuf.writeUInt32(this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostMaterialNum */
        {
            ret = destBuf.writeUInt32(this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CostGoldNum */
        {
            ret = destBuf.writeUInt32(this.CostGoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorUpgradeCondition.CURRVERSION < cutVer)
        {
            cutVer = PredatorUpgradeCondition.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorUpgradeCondition.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Star */
        {
            ret = srcBuf.readUInt32(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CostGoldNum */
        {
            ret = srcBuf.readUInt32(ref this.CostGoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PredatorUpgradeCondition.CURRVERSION < cutVer)
        {
            cutVer = PredatorUpgradeCondition.CURRVERSION;
        }

        /* check cutversion */
        if (PredatorUpgradeCondition.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readUInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Star */
        {
            ret = srcBuf.readUInt32(ref this.Star);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostMaterialNum */
        {
            ret = srcBuf.readUInt32(ref this.CostMaterialNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CostGoldNum */
        {
            ret = srcBuf.readUInt32(ref this.CostGoldNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Star */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Star]", "{0:d}", this.Star);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostMaterialNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostMaterialNum]", "{0:d}", this.CostMaterialNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CostGoldNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CostGoldNum]", "{0:d}", this.CostGoldNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class MultiAttackInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 SkillId; // 技能ID
    public float StartTriggerTime; // 下段起始触发时间
    public float EndTriggerTime; // 下段结束触发时间

    /* construct methods */
    public MultiAttackInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MultiAttackInfo.CURRVERSION < cutVer)
        {
            cutVer = MultiAttackInfo.CURRVERSION;
        }

        /* check cutversion */
        if (MultiAttackInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.SkillId */
        {
            ret = destBuf.writeUInt32(this.SkillId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StartTriggerTime */
        {
            ret = destBuf.writeFloat(this.StartTriggerTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EndTriggerTime */
        {
            ret = destBuf.writeFloat(this.EndTriggerTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MultiAttackInfo.CURRVERSION < cutVer)
        {
            cutVer = MultiAttackInfo.CURRVERSION;
        }

        /* check cutversion */
        if (MultiAttackInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.SkillId */
        {
            ret = srcBuf.readUInt32(ref this.SkillId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StartTriggerTime */
        {
            ret = srcBuf.readFloat(ref this.StartTriggerTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EndTriggerTime */
        {
            ret = srcBuf.readFloat(ref this.EndTriggerTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MultiAttackInfo.CURRVERSION < cutVer)
        {
            cutVer = MultiAttackInfo.CURRVERSION;
        }

        /* check cutversion */
        if (MultiAttackInfo.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.SkillId */
        {
            ret = srcBuf.readUInt32(ref this.SkillId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StartTriggerTime */
        {
            ret = srcBuf.readFloat(ref this.StartTriggerTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EndTriggerTime */
        {
            ret = srcBuf.readFloat(ref this.EndTriggerTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.SkillId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SkillId]", "{0:d}", this.SkillId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StartTriggerTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[StartTriggerTime]", "{0:g}", this.StartTriggerTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EndTriggerTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EndTriggerTime]", "{0:g}", this.EndTriggerTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
