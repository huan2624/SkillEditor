/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 075b141647ef1952a676e88743acfb27 */

/* creation time: Sat Dec 13 15:31:19 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


public class HeroRelated : tsf4g_csharp_interface
{
    /* public members */
    public byte[] Voice;

    /* construct methods */
    public HeroRelated()
    {
        Voice = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRelated.CURRVERSION < cutVer)
        {
            cutVer = HeroRelated.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRelated.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Voice */
        {
            /* record sizeinfo position */
            Int32 sizePos4Voice = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4Voice = destBuf.getUsedSize();

            Int32 realSize4Voice = TdrTypeUtil.cstrlen(this.Voice);

            if (realSize4Voice >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.Voice, realSize4Voice);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.Voice */
            Int32 size4Voice = destBuf.getUsedSize() - beginPos4Voice;
            ret = destBuf.writeUInt32((UInt32)(size4Voice), sizePos4Voice);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRelated.CURRVERSION < cutVer)
        {
            cutVer = HeroRelated.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRelated.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Voice */
        {
            /* get sizeinfo for this.Voice */
            UInt32 size4Voice = 0;
            ret = srcBuf.readUInt32(ref size4Voice);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4Voice > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4Voice > this.Voice.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4Voice)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.Voice, (int)size4Voice);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.Voice[(int)size4Voice - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4Voice = TdrTypeUtil.cstrlen(this.Voice) + 1;
            if (size4Voice != realSize4Voice)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroRelated.CURRVERSION < cutVer)
        {
            cutVer = HeroRelated.CURRVERSION;
        }

        /* check cutversion */
        if (HeroRelated.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Voice */
        {
            Int32 size4Voice = 64;

            /* load */
            ret = srcBuf.readCString(ref this.Voice, (int)size4Voice);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Voice */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[Voice]", this.Voice);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class ResConfig : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ResID;
    public byte[] ModelFile;
    public float MoveSpeed;
    public float CapsuleRadius;
    public float CapsuleHeight;
    public byte[] IconFile;
    public float ModelScale;
    public float ModelHeight;
    public HeroRelated[] HeroRelated;
    public UInt32 BodyMaterialID;
    public byte[] HitEffect;
    public float HitEffectScale;
    public byte[] CriticalHitEffect;
    public float CriticalHitEffectScale;
    public float HitFlashColorR;
    public float HitFlashColorG;
    public float HitFlashColorB;
    public byte[] BloodyEffect;
    public float BloodyEffectScale;
    public byte[] BleedDecalTexture;
    public float BleedDecalScale;
    public byte[] DeathEffect;
    public float DeathEffectScale;
    public byte[] DeathEffectSound;
    public byte[] DeadBodyEffect;
    public float DeadBodyEffectScale;
    public byte[] DeadBodyEffectSound;
    public byte[] CriticalHitSound;
    public byte[] HitScreamSound;
    public UInt32 BigBackOffXZCurveID;
    public UInt32 BigBackOffYCurveID;
    public float BigBackOffXZDistance;
    public float BigBackOffYHeight;
    public UInt32 SmallBackOffXZCurveID;
    public UInt32 SmallBackOffYCurveID;
    public float SmallBackOffXZDistance;
    public float SmallBackOffYHeight;
    public UInt32 BackOffDieXZCurveID;
    public UInt32 BackOffDieYCurveID;
    public float BackOffDieXZDistance;
    public float BackOffDieYHeight;
    public float NormalHitFlyAwayDieRate;
    public UInt32 FlyAwayDieXZCurveID;
    public UInt32 FlyAwayDieYCurveID;
    public float FlyAwayDieXZDistance;
    public float FlyAwayDieYHeight;
    public byte[] StepSoundEffect;
    public byte[] StepVisualEffect;

    /* construct methods */
    public ResConfig()
    {
        ModelFile = new byte[64];
        IconFile = new byte[64];
        HeroRelated = new HeroRelated[3];
        for(int HeroRelated_i = 0; HeroRelated_i < 3; HeroRelated_i++)
        {
            HeroRelated[HeroRelated_i] = new HeroRelated();
        }

        HitEffect = new byte[64];
        CriticalHitEffect = new byte[64];
        BloodyEffect = new byte[64];
        BleedDecalTexture = new byte[64];
        DeathEffect = new byte[64];
        DeathEffectSound = new byte[64];
        DeadBodyEffect = new byte[64];
        DeadBodyEffectSound = new byte[64];
        CriticalHitSound = new byte[64];
        HitScreamSound = new byte[64];
        StepSoundEffect = new byte[64];
        StepVisualEffect = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ResConfig.CURRVERSION < cutVer)
        {
            cutVer = ResConfig.CURRVERSION;
        }

        /* check cutversion */
        if (ResConfig.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ResID */
        {
            ret = destBuf.writeUInt32(this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ModelFile */
        {
            /* record sizeinfo position */
            Int32 sizePos4ModelFile = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4ModelFile = destBuf.getUsedSize();

            Int32 realSize4ModelFile = TdrTypeUtil.cstrlen(this.ModelFile);

            if (realSize4ModelFile >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.ModelFile, realSize4ModelFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.ModelFile */
            Int32 size4ModelFile = destBuf.getUsedSize() - beginPos4ModelFile;
            ret = destBuf.writeUInt32((UInt32)(size4ModelFile), sizePos4ModelFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MoveSpeed */
        {
            ret = destBuf.writeFloat(this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CapsuleRadius */
        {
            ret = destBuf.writeFloat(this.CapsuleRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CapsuleHeight */
        {
            ret = destBuf.writeFloat(this.CapsuleHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.IconFile */
        {
            /* record sizeinfo position */
            Int32 sizePos4IconFile = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4IconFile = destBuf.getUsedSize();

            Int32 realSize4IconFile = TdrTypeUtil.cstrlen(this.IconFile);

            if (realSize4IconFile >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.IconFile, realSize4IconFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.IconFile */
            Int32 size4IconFile = destBuf.getUsedSize() - beginPos4IconFile;
            ret = destBuf.writeUInt32((UInt32)(size4IconFile), sizePos4IconFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ModelScale */
        {
            ret = destBuf.writeFloat(this.ModelScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ModelHeight */
        {
            ret = destBuf.writeFloat(this.ModelHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HeroRelated */
        {
            for (Int32 HeroRelated_i = 0; HeroRelated_i < 3; HeroRelated_i++)
            {
                ret = this.HeroRelated[HeroRelated_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.BodyMaterialID */
        {
            ret = destBuf.writeUInt32(this.BodyMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4HitEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HitEffect = destBuf.getUsedSize();

            Int32 realSize4HitEffect = TdrTypeUtil.cstrlen(this.HitEffect);

            if (realSize4HitEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HitEffect, realSize4HitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HitEffect */
            Int32 size4HitEffect = destBuf.getUsedSize() - beginPos4HitEffect;
            ret = destBuf.writeUInt32((UInt32)(size4HitEffect), sizePos4HitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitEffectScale */
        {
            ret = destBuf.writeFloat(this.HitEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalHitEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4CriticalHitEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4CriticalHitEffect = destBuf.getUsedSize();

            Int32 realSize4CriticalHitEffect = TdrTypeUtil.cstrlen(this.CriticalHitEffect);

            if (realSize4CriticalHitEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.CriticalHitEffect, realSize4CriticalHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.CriticalHitEffect */
            Int32 size4CriticalHitEffect = destBuf.getUsedSize() - beginPos4CriticalHitEffect;
            ret = destBuf.writeUInt32((UInt32)(size4CriticalHitEffect), sizePos4CriticalHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalHitEffectScale */
        {
            ret = destBuf.writeFloat(this.CriticalHitEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitFlashColorR */
        {
            ret = destBuf.writeFloat(this.HitFlashColorR);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitFlashColorG */
        {
            ret = destBuf.writeFloat(this.HitFlashColorG);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitFlashColorB */
        {
            ret = destBuf.writeFloat(this.HitFlashColorB);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BloodyEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4BloodyEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4BloodyEffect = destBuf.getUsedSize();

            Int32 realSize4BloodyEffect = TdrTypeUtil.cstrlen(this.BloodyEffect);

            if (realSize4BloodyEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.BloodyEffect, realSize4BloodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.BloodyEffect */
            Int32 size4BloodyEffect = destBuf.getUsedSize() - beginPos4BloodyEffect;
            ret = destBuf.writeUInt32((UInt32)(size4BloodyEffect), sizePos4BloodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BloodyEffectScale */
        {
            ret = destBuf.writeFloat(this.BloodyEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BleedDecalTexture */
        {
            /* record sizeinfo position */
            Int32 sizePos4BleedDecalTexture = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4BleedDecalTexture = destBuf.getUsedSize();

            Int32 realSize4BleedDecalTexture = TdrTypeUtil.cstrlen(this.BleedDecalTexture);

            if (realSize4BleedDecalTexture >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.BleedDecalTexture, realSize4BleedDecalTexture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.BleedDecalTexture */
            Int32 size4BleedDecalTexture = destBuf.getUsedSize() - beginPos4BleedDecalTexture;
            ret = destBuf.writeUInt32((UInt32)(size4BleedDecalTexture), sizePos4BleedDecalTexture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BleedDecalScale */
        {
            ret = destBuf.writeFloat(this.BleedDecalScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DeathEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4DeathEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4DeathEffect = destBuf.getUsedSize();

            Int32 realSize4DeathEffect = TdrTypeUtil.cstrlen(this.DeathEffect);

            if (realSize4DeathEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.DeathEffect, realSize4DeathEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.DeathEffect */
            Int32 size4DeathEffect = destBuf.getUsedSize() - beginPos4DeathEffect;
            ret = destBuf.writeUInt32((UInt32)(size4DeathEffect), sizePos4DeathEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DeathEffectScale */
        {
            ret = destBuf.writeFloat(this.DeathEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DeathEffectSound */
        {
            /* record sizeinfo position */
            Int32 sizePos4DeathEffectSound = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4DeathEffectSound = destBuf.getUsedSize();

            Int32 realSize4DeathEffectSound = TdrTypeUtil.cstrlen(this.DeathEffectSound);

            if (realSize4DeathEffectSound >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.DeathEffectSound, realSize4DeathEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.DeathEffectSound */
            Int32 size4DeathEffectSound = destBuf.getUsedSize() - beginPos4DeathEffectSound;
            ret = destBuf.writeUInt32((UInt32)(size4DeathEffectSound), sizePos4DeathEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DeadBodyEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4DeadBodyEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4DeadBodyEffect = destBuf.getUsedSize();

            Int32 realSize4DeadBodyEffect = TdrTypeUtil.cstrlen(this.DeadBodyEffect);

            if (realSize4DeadBodyEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.DeadBodyEffect, realSize4DeadBodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.DeadBodyEffect */
            Int32 size4DeadBodyEffect = destBuf.getUsedSize() - beginPos4DeadBodyEffect;
            ret = destBuf.writeUInt32((UInt32)(size4DeadBodyEffect), sizePos4DeadBodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DeadBodyEffectScale */
        {
            ret = destBuf.writeFloat(this.DeadBodyEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.DeadBodyEffectSound */
        {
            /* record sizeinfo position */
            Int32 sizePos4DeadBodyEffectSound = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4DeadBodyEffectSound = destBuf.getUsedSize();

            Int32 realSize4DeadBodyEffectSound = TdrTypeUtil.cstrlen(this.DeadBodyEffectSound);

            if (realSize4DeadBodyEffectSound >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.DeadBodyEffectSound, realSize4DeadBodyEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.DeadBodyEffectSound */
            Int32 size4DeadBodyEffectSound = destBuf.getUsedSize() - beginPos4DeadBodyEffectSound;
            ret = destBuf.writeUInt32((UInt32)(size4DeadBodyEffectSound), sizePos4DeadBodyEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.CriticalHitSound */
        {
            /* record sizeinfo position */
            Int32 sizePos4CriticalHitSound = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4CriticalHitSound = destBuf.getUsedSize();

            Int32 realSize4CriticalHitSound = TdrTypeUtil.cstrlen(this.CriticalHitSound);

            if (realSize4CriticalHitSound >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.CriticalHitSound, realSize4CriticalHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.CriticalHitSound */
            Int32 size4CriticalHitSound = destBuf.getUsedSize() - beginPos4CriticalHitSound;
            ret = destBuf.writeUInt32((UInt32)(size4CriticalHitSound), sizePos4CriticalHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HitScreamSound */
        {
            /* record sizeinfo position */
            Int32 sizePos4HitScreamSound = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4HitScreamSound = destBuf.getUsedSize();

            Int32 realSize4HitScreamSound = TdrTypeUtil.cstrlen(this.HitScreamSound);

            if (realSize4HitScreamSound >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.HitScreamSound, realSize4HitScreamSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.HitScreamSound */
            Int32 size4HitScreamSound = destBuf.getUsedSize() - beginPos4HitScreamSound;
            ret = destBuf.writeUInt32((UInt32)(size4HitScreamSound), sizePos4HitScreamSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BigBackOffXZCurveID */
        {
            ret = destBuf.writeUInt32(this.BigBackOffXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BigBackOffYCurveID */
        {
            ret = destBuf.writeUInt32(this.BigBackOffYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BigBackOffXZDistance */
        {
            ret = destBuf.writeFloat(this.BigBackOffXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BigBackOffYHeight */
        {
            ret = destBuf.writeFloat(this.BigBackOffYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SmallBackOffXZCurveID */
        {
            ret = destBuf.writeUInt32(this.SmallBackOffXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SmallBackOffYCurveID */
        {
            ret = destBuf.writeUInt32(this.SmallBackOffYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SmallBackOffXZDistance */
        {
            ret = destBuf.writeFloat(this.SmallBackOffXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.SmallBackOffYHeight */
        {
            ret = destBuf.writeFloat(this.SmallBackOffYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BackOffDieXZCurveID */
        {
            ret = destBuf.writeUInt32(this.BackOffDieXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BackOffDieYCurveID */
        {
            ret = destBuf.writeUInt32(this.BackOffDieYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BackOffDieXZDistance */
        {
            ret = destBuf.writeFloat(this.BackOffDieXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BackOffDieYHeight */
        {
            ret = destBuf.writeFloat(this.BackOffDieYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NormalHitFlyAwayDieRate */
        {
            ret = destBuf.writeFloat(this.NormalHitFlyAwayDieRate);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FlyAwayDieXZCurveID */
        {
            ret = destBuf.writeUInt32(this.FlyAwayDieXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FlyAwayDieYCurveID */
        {
            ret = destBuf.writeUInt32(this.FlyAwayDieYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FlyAwayDieXZDistance */
        {
            ret = destBuf.writeFloat(this.FlyAwayDieXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FlyAwayDieYHeight */
        {
            ret = destBuf.writeFloat(this.FlyAwayDieYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StepSoundEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4StepSoundEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4StepSoundEffect = destBuf.getUsedSize();

            Int32 realSize4StepSoundEffect = TdrTypeUtil.cstrlen(this.StepSoundEffect);

            if (realSize4StepSoundEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.StepSoundEffect, realSize4StepSoundEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.StepSoundEffect */
            Int32 size4StepSoundEffect = destBuf.getUsedSize() - beginPos4StepSoundEffect;
            ret = destBuf.writeUInt32((UInt32)(size4StepSoundEffect), sizePos4StepSoundEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.StepVisualEffect */
        {
            /* record sizeinfo position */
            Int32 sizePos4StepVisualEffect = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4StepVisualEffect = destBuf.getUsedSize();

            Int32 realSize4StepVisualEffect = TdrTypeUtil.cstrlen(this.StepVisualEffect);

            if (realSize4StepVisualEffect >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.StepVisualEffect, realSize4StepVisualEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.StepVisualEffect */
            Int32 size4StepVisualEffect = destBuf.getUsedSize() - beginPos4StepVisualEffect;
            ret = destBuf.writeUInt32((UInt32)(size4StepVisualEffect), sizePos4StepVisualEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ResConfig.CURRVERSION < cutVer)
        {
            cutVer = ResConfig.CURRVERSION;
        }

        /* check cutversion */
        if (ResConfig.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ResID */
        {
            ret = srcBuf.readUInt32(ref this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ModelFile */
        {
            /* get sizeinfo for this.ModelFile */
            UInt32 size4ModelFile = 0;
            ret = srcBuf.readUInt32(ref size4ModelFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4ModelFile > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4ModelFile > this.ModelFile.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4ModelFile)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.ModelFile, (int)size4ModelFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.ModelFile[(int)size4ModelFile - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4ModelFile = TdrTypeUtil.cstrlen(this.ModelFile) + 1;
            if (size4ModelFile != realSize4ModelFile)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CapsuleRadius */
        {
            ret = srcBuf.readFloat(ref this.CapsuleRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CapsuleHeight */
        {
            ret = srcBuf.readFloat(ref this.CapsuleHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.IconFile */
        {
            /* get sizeinfo for this.IconFile */
            UInt32 size4IconFile = 0;
            ret = srcBuf.readUInt32(ref size4IconFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4IconFile > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4IconFile > this.IconFile.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4IconFile)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.IconFile, (int)size4IconFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.IconFile[(int)size4IconFile - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4IconFile = TdrTypeUtil.cstrlen(this.IconFile) + 1;
            if (size4IconFile != realSize4IconFile)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ModelScale */
        {
            ret = srcBuf.readFloat(ref this.ModelScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ModelHeight */
        {
            ret = srcBuf.readFloat(ref this.ModelHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HeroRelated */
        {
            for (Int32 HeroRelated_i = 0; HeroRelated_i < 3; HeroRelated_i++)
            {
                ret = this.HeroRelated[HeroRelated_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.BodyMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.BodyMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitEffect */
        {
            /* get sizeinfo for this.HitEffect */
            UInt32 size4HitEffect = 0;
            ret = srcBuf.readUInt32(ref size4HitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HitEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HitEffect > this.HitEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HitEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HitEffect, (int)size4HitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HitEffect[(int)size4HitEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HitEffect = TdrTypeUtil.cstrlen(this.HitEffect) + 1;
            if (size4HitEffect != realSize4HitEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HitEffectScale */
        {
            ret = srcBuf.readFloat(ref this.HitEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.CriticalHitEffect */
        {
            /* get sizeinfo for this.CriticalHitEffect */
            UInt32 size4CriticalHitEffect = 0;
            ret = srcBuf.readUInt32(ref size4CriticalHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4CriticalHitEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4CriticalHitEffect > this.CriticalHitEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4CriticalHitEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.CriticalHitEffect, (int)size4CriticalHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.CriticalHitEffect[(int)size4CriticalHitEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4CriticalHitEffect = TdrTypeUtil.cstrlen(this.CriticalHitEffect) + 1;
            if (size4CriticalHitEffect != realSize4CriticalHitEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.CriticalHitEffectScale */
        {
            ret = srcBuf.readFloat(ref this.CriticalHitEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitFlashColorR */
        {
            ret = srcBuf.readFloat(ref this.HitFlashColorR);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitFlashColorG */
        {
            ret = srcBuf.readFloat(ref this.HitFlashColorG);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HitFlashColorB */
        {
            ret = srcBuf.readFloat(ref this.HitFlashColorB);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BloodyEffect */
        {
            /* get sizeinfo for this.BloodyEffect */
            UInt32 size4BloodyEffect = 0;
            ret = srcBuf.readUInt32(ref size4BloodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4BloodyEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4BloodyEffect > this.BloodyEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4BloodyEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.BloodyEffect, (int)size4BloodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.BloodyEffect[(int)size4BloodyEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4BloodyEffect = TdrTypeUtil.cstrlen(this.BloodyEffect) + 1;
            if (size4BloodyEffect != realSize4BloodyEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BloodyEffectScale */
        {
            ret = srcBuf.readFloat(ref this.BloodyEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BleedDecalTexture */
        {
            /* get sizeinfo for this.BleedDecalTexture */
            UInt32 size4BleedDecalTexture = 0;
            ret = srcBuf.readUInt32(ref size4BleedDecalTexture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4BleedDecalTexture > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4BleedDecalTexture > this.BleedDecalTexture.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4BleedDecalTexture)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.BleedDecalTexture, (int)size4BleedDecalTexture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.BleedDecalTexture[(int)size4BleedDecalTexture - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4BleedDecalTexture = TdrTypeUtil.cstrlen(this.BleedDecalTexture) + 1;
            if (size4BleedDecalTexture != realSize4BleedDecalTexture)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BleedDecalScale */
        {
            ret = srcBuf.readFloat(ref this.BleedDecalScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DeathEffect */
        {
            /* get sizeinfo for this.DeathEffect */
            UInt32 size4DeathEffect = 0;
            ret = srcBuf.readUInt32(ref size4DeathEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4DeathEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4DeathEffect > this.DeathEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4DeathEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.DeathEffect, (int)size4DeathEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.DeathEffect[(int)size4DeathEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4DeathEffect = TdrTypeUtil.cstrlen(this.DeathEffect) + 1;
            if (size4DeathEffect != realSize4DeathEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.DeathEffectScale */
        {
            ret = srcBuf.readFloat(ref this.DeathEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DeathEffectSound */
        {
            /* get sizeinfo for this.DeathEffectSound */
            UInt32 size4DeathEffectSound = 0;
            ret = srcBuf.readUInt32(ref size4DeathEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4DeathEffectSound > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4DeathEffectSound > this.DeathEffectSound.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4DeathEffectSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.DeathEffectSound, (int)size4DeathEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.DeathEffectSound[(int)size4DeathEffectSound - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4DeathEffectSound = TdrTypeUtil.cstrlen(this.DeathEffectSound) + 1;
            if (size4DeathEffectSound != realSize4DeathEffectSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.DeadBodyEffect */
        {
            /* get sizeinfo for this.DeadBodyEffect */
            UInt32 size4DeadBodyEffect = 0;
            ret = srcBuf.readUInt32(ref size4DeadBodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4DeadBodyEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4DeadBodyEffect > this.DeadBodyEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4DeadBodyEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.DeadBodyEffect, (int)size4DeadBodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.DeadBodyEffect[(int)size4DeadBodyEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4DeadBodyEffect = TdrTypeUtil.cstrlen(this.DeadBodyEffect) + 1;
            if (size4DeadBodyEffect != realSize4DeadBodyEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.DeadBodyEffectScale */
        {
            ret = srcBuf.readFloat(ref this.DeadBodyEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.DeadBodyEffectSound */
        {
            /* get sizeinfo for this.DeadBodyEffectSound */
            UInt32 size4DeadBodyEffectSound = 0;
            ret = srcBuf.readUInt32(ref size4DeadBodyEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4DeadBodyEffectSound > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4DeadBodyEffectSound > this.DeadBodyEffectSound.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4DeadBodyEffectSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.DeadBodyEffectSound, (int)size4DeadBodyEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.DeadBodyEffectSound[(int)size4DeadBodyEffectSound - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4DeadBodyEffectSound = TdrTypeUtil.cstrlen(this.DeadBodyEffectSound) + 1;
            if (size4DeadBodyEffectSound != realSize4DeadBodyEffectSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.CriticalHitSound */
        {
            /* get sizeinfo for this.CriticalHitSound */
            UInt32 size4CriticalHitSound = 0;
            ret = srcBuf.readUInt32(ref size4CriticalHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4CriticalHitSound > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4CriticalHitSound > this.CriticalHitSound.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4CriticalHitSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.CriticalHitSound, (int)size4CriticalHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.CriticalHitSound[(int)size4CriticalHitSound - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4CriticalHitSound = TdrTypeUtil.cstrlen(this.CriticalHitSound) + 1;
            if (size4CriticalHitSound != realSize4CriticalHitSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.HitScreamSound */
        {
            /* get sizeinfo for this.HitScreamSound */
            UInt32 size4HitScreamSound = 0;
            ret = srcBuf.readUInt32(ref size4HitScreamSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4HitScreamSound > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4HitScreamSound > this.HitScreamSound.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4HitScreamSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.HitScreamSound, (int)size4HitScreamSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.HitScreamSound[(int)size4HitScreamSound - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4HitScreamSound = TdrTypeUtil.cstrlen(this.HitScreamSound) + 1;
            if (size4HitScreamSound != realSize4HitScreamSound)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.BigBackOffXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BigBackOffXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BigBackOffYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BigBackOffYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BigBackOffXZDistance */
        {
            ret = srcBuf.readFloat(ref this.BigBackOffXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BigBackOffYHeight */
        {
            ret = srcBuf.readFloat(ref this.BigBackOffYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SmallBackOffXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.SmallBackOffXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SmallBackOffYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.SmallBackOffYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SmallBackOffXZDistance */
        {
            ret = srcBuf.readFloat(ref this.SmallBackOffXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.SmallBackOffYHeight */
        {
            ret = srcBuf.readFloat(ref this.SmallBackOffYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BackOffDieXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BackOffDieXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BackOffDieYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BackOffDieYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BackOffDieXZDistance */
        {
            ret = srcBuf.readFloat(ref this.BackOffDieXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BackOffDieYHeight */
        {
            ret = srcBuf.readFloat(ref this.BackOffDieYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NormalHitFlyAwayDieRate */
        {
            ret = srcBuf.readFloat(ref this.NormalHitFlyAwayDieRate);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FlyAwayDieXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.FlyAwayDieXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FlyAwayDieYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.FlyAwayDieYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FlyAwayDieXZDistance */
        {
            ret = srcBuf.readFloat(ref this.FlyAwayDieXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FlyAwayDieYHeight */
        {
            ret = srcBuf.readFloat(ref this.FlyAwayDieYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.StepSoundEffect */
        {
            /* get sizeinfo for this.StepSoundEffect */
            UInt32 size4StepSoundEffect = 0;
            ret = srcBuf.readUInt32(ref size4StepSoundEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4StepSoundEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4StepSoundEffect > this.StepSoundEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4StepSoundEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.StepSoundEffect, (int)size4StepSoundEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.StepSoundEffect[(int)size4StepSoundEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4StepSoundEffect = TdrTypeUtil.cstrlen(this.StepSoundEffect) + 1;
            if (size4StepSoundEffect != realSize4StepSoundEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.StepVisualEffect */
        {
            /* get sizeinfo for this.StepVisualEffect */
            UInt32 size4StepVisualEffect = 0;
            ret = srcBuf.readUInt32(ref size4StepVisualEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4StepVisualEffect > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4StepVisualEffect > this.StepVisualEffect.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4StepVisualEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.StepVisualEffect, (int)size4StepVisualEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.StepVisualEffect[(int)size4StepVisualEffect - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4StepVisualEffect = TdrTypeUtil.cstrlen(this.StepVisualEffect) + 1;
            if (size4StepVisualEffect != realSize4StepVisualEffect)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ResConfig.CURRVERSION < cutVer)
        {
            cutVer = ResConfig.CURRVERSION;
        }

        /* check cutversion */
        if (ResConfig.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ResID */
        {
            ret = srcBuf.readUInt32(ref this.ResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ModelFile */
        {
            Int32 size4ModelFile = 64;

            /* load */
            ret = srcBuf.readCString(ref this.ModelFile, (int)size4ModelFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.MoveSpeed */
        {
            ret = srcBuf.readFloat(ref this.MoveSpeed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CapsuleRadius */
        {
            ret = srcBuf.readFloat(ref this.CapsuleRadius);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CapsuleHeight */
        {
            ret = srcBuf.readFloat(ref this.CapsuleHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.IconFile */
        {
            Int32 size4IconFile = 64;

            /* load */
            ret = srcBuf.readCString(ref this.IconFile, (int)size4IconFile);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.ModelScale */
        {
            ret = srcBuf.readFloat(ref this.ModelScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ModelHeight */
        {
            ret = srcBuf.readFloat(ref this.ModelHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HeroRelated */
        {
            for (Int32 HeroRelated_i = 0; HeroRelated_i < 3; HeroRelated_i++)
            {
                ret = this.HeroRelated[HeroRelated_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.BodyMaterialID */
        {
            ret = srcBuf.readUInt32(ref this.BodyMaterialID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitEffect */
        {
            Int32 size4HitEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.HitEffect, (int)size4HitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HitEffectScale */
        {
            ret = srcBuf.readFloat(ref this.HitEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.CriticalHitEffect */
        {
            Int32 size4CriticalHitEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.CriticalHitEffect, (int)size4CriticalHitEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.CriticalHitEffectScale */
        {
            ret = srcBuf.readFloat(ref this.CriticalHitEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitFlashColorR */
        {
            ret = srcBuf.readFloat(ref this.HitFlashColorR);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitFlashColorG */
        {
            ret = srcBuf.readFloat(ref this.HitFlashColorG);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HitFlashColorB */
        {
            ret = srcBuf.readFloat(ref this.HitFlashColorB);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BloodyEffect */
        {
            Int32 size4BloodyEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.BloodyEffect, (int)size4BloodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BloodyEffectScale */
        {
            ret = srcBuf.readFloat(ref this.BloodyEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BleedDecalTexture */
        {
            Int32 size4BleedDecalTexture = 64;

            /* load */
            ret = srcBuf.readCString(ref this.BleedDecalTexture, (int)size4BleedDecalTexture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BleedDecalScale */
        {
            ret = srcBuf.readFloat(ref this.BleedDecalScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DeathEffect */
        {
            Int32 size4DeathEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.DeathEffect, (int)size4DeathEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.DeathEffectScale */
        {
            ret = srcBuf.readFloat(ref this.DeathEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DeathEffectSound */
        {
            Int32 size4DeathEffectSound = 64;

            /* load */
            ret = srcBuf.readCString(ref this.DeathEffectSound, (int)size4DeathEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.DeadBodyEffect */
        {
            Int32 size4DeadBodyEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.DeadBodyEffect, (int)size4DeadBodyEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.DeadBodyEffectScale */
        {
            ret = srcBuf.readFloat(ref this.DeadBodyEffectScale);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.DeadBodyEffectSound */
        {
            Int32 size4DeadBodyEffectSound = 64;

            /* load */
            ret = srcBuf.readCString(ref this.DeadBodyEffectSound, (int)size4DeadBodyEffectSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.CriticalHitSound */
        {
            Int32 size4CriticalHitSound = 64;

            /* load */
            ret = srcBuf.readCString(ref this.CriticalHitSound, (int)size4CriticalHitSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.HitScreamSound */
        {
            Int32 size4HitScreamSound = 64;

            /* load */
            ret = srcBuf.readCString(ref this.HitScreamSound, (int)size4HitScreamSound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.BigBackOffXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BigBackOffXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BigBackOffYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BigBackOffYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BigBackOffXZDistance */
        {
            ret = srcBuf.readFloat(ref this.BigBackOffXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BigBackOffYHeight */
        {
            ret = srcBuf.readFloat(ref this.BigBackOffYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SmallBackOffXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.SmallBackOffXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SmallBackOffYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.SmallBackOffYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SmallBackOffXZDistance */
        {
            ret = srcBuf.readFloat(ref this.SmallBackOffXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.SmallBackOffYHeight */
        {
            ret = srcBuf.readFloat(ref this.SmallBackOffYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BackOffDieXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BackOffDieXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BackOffDieYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.BackOffDieYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BackOffDieXZDistance */
        {
            ret = srcBuf.readFloat(ref this.BackOffDieXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BackOffDieYHeight */
        {
            ret = srcBuf.readFloat(ref this.BackOffDieYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NormalHitFlyAwayDieRate */
        {
            ret = srcBuf.readFloat(ref this.NormalHitFlyAwayDieRate);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FlyAwayDieXZCurveID */
        {
            ret = srcBuf.readUInt32(ref this.FlyAwayDieXZCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FlyAwayDieYCurveID */
        {
            ret = srcBuf.readUInt32(ref this.FlyAwayDieYCurveID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FlyAwayDieXZDistance */
        {
            ret = srcBuf.readFloat(ref this.FlyAwayDieXZDistance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FlyAwayDieYHeight */
        {
            ret = srcBuf.readFloat(ref this.FlyAwayDieYHeight);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.StepSoundEffect */
        {
            Int32 size4StepSoundEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.StepSoundEffect, (int)size4StepSoundEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.StepVisualEffect */
        {
            Int32 size4StepVisualEffect = 64;

            /* load */
            ret = srcBuf.readCString(ref this.StepVisualEffect, (int)size4StepVisualEffect);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ResID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResID]", "{0:d}", this.ResID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ModelFile */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[ModelFile]", this.ModelFile);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MoveSpeed */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MoveSpeed]", "{0:g}", this.MoveSpeed);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CapsuleRadius */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CapsuleRadius]", "{0:g}", this.CapsuleRadius);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CapsuleHeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CapsuleHeight]", "{0:g}", this.CapsuleHeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.IconFile */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[IconFile]", this.IconFile);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ModelScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ModelScale]", "{0:g}", this.ModelScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ModelHeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ModelHeight]", "{0:g}", this.ModelHeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HeroRelated */
        for (Int32 HeroRelated_i = 0; HeroRelated_i < 3; HeroRelated_i++)
        {
            if (null == this.HeroRelated[HeroRelated_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HeroRelated]", HeroRelated_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.HeroRelated[HeroRelated_i] */
            if (0 > indent)
            {
                ret = this.HeroRelated[HeroRelated_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.HeroRelated[HeroRelated_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.BodyMaterialID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BodyMaterialID]", "{0:d}", this.BodyMaterialID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HitEffect]", this.HitEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitEffectScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitEffectScale]", "{0:g}", this.HitEffectScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalHitEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[CriticalHitEffect]", this.CriticalHitEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalHitEffectScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[CriticalHitEffectScale]", "{0:g}", this.CriticalHitEffectScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitFlashColorR */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitFlashColorR]", "{0:g}", this.HitFlashColorR);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitFlashColorG */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitFlashColorG]", "{0:g}", this.HitFlashColorG);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitFlashColorB */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HitFlashColorB]", "{0:g}", this.HitFlashColorB);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BloodyEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BloodyEffect]", this.BloodyEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BloodyEffectScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BloodyEffectScale]", "{0:g}", this.BloodyEffectScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BleedDecalTexture */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[BleedDecalTexture]", this.BleedDecalTexture);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BleedDecalScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BleedDecalScale]", "{0:g}", this.BleedDecalScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DeathEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[DeathEffect]", this.DeathEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DeathEffectScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DeathEffectScale]", "{0:g}", this.DeathEffectScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DeathEffectSound */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[DeathEffectSound]", this.DeathEffectSound);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DeadBodyEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[DeadBodyEffect]", this.DeadBodyEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DeadBodyEffectScale */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[DeadBodyEffectScale]", "{0:g}", this.DeadBodyEffectScale);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.DeadBodyEffectSound */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[DeadBodyEffectSound]", this.DeadBodyEffectSound);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.CriticalHitSound */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[CriticalHitSound]", this.CriticalHitSound);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HitScreamSound */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[HitScreamSound]", this.HitScreamSound);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BigBackOffXZCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BigBackOffXZCurveID]", "{0:d}", this.BigBackOffXZCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BigBackOffYCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BigBackOffYCurveID]", "{0:d}", this.BigBackOffYCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BigBackOffXZDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BigBackOffXZDistance]", "{0:g}", this.BigBackOffXZDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BigBackOffYHeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BigBackOffYHeight]", "{0:g}", this.BigBackOffYHeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SmallBackOffXZCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SmallBackOffXZCurveID]", "{0:d}", this.SmallBackOffXZCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SmallBackOffYCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SmallBackOffYCurveID]", "{0:d}", this.SmallBackOffYCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SmallBackOffXZDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SmallBackOffXZDistance]", "{0:g}", this.SmallBackOffXZDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.SmallBackOffYHeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[SmallBackOffYHeight]", "{0:g}", this.SmallBackOffYHeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BackOffDieXZCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BackOffDieXZCurveID]", "{0:d}", this.BackOffDieXZCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BackOffDieYCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BackOffDieYCurveID]", "{0:d}", this.BackOffDieYCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BackOffDieXZDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BackOffDieXZDistance]", "{0:g}", this.BackOffDieXZDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BackOffDieYHeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BackOffDieYHeight]", "{0:g}", this.BackOffDieYHeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NormalHitFlyAwayDieRate */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NormalHitFlyAwayDieRate]", "{0:g}", this.NormalHitFlyAwayDieRate);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FlyAwayDieXZCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FlyAwayDieXZCurveID]", "{0:d}", this.FlyAwayDieXZCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FlyAwayDieYCurveID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FlyAwayDieYCurveID]", "{0:d}", this.FlyAwayDieYCurveID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FlyAwayDieXZDistance */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FlyAwayDieXZDistance]", "{0:g}", this.FlyAwayDieXZDistance);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FlyAwayDieYHeight */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FlyAwayDieYHeight]", "{0:g}", this.FlyAwayDieYHeight);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StepSoundEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[StepSoundEffect]", this.StepSoundEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.StepVisualEffect */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[StepVisualEffect]", this.StepVisualEffect);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class MaterialSound : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 MaterialSoundID;
    public byte[] MaterialSoundName;

    /* construct methods */
    public MaterialSound()
    {
        MaterialSoundName = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MaterialSound.CURRVERSION < cutVer)
        {
            cutVer = MaterialSound.CURRVERSION;
        }

        /* check cutversion */
        if (MaterialSound.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.MaterialSoundID */
        {
            ret = destBuf.writeUInt32(this.MaterialSoundID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MaterialSoundName */
        {
            /* record sizeinfo position */
            Int32 sizePos4MaterialSoundName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4MaterialSoundName = destBuf.getUsedSize();

            Int32 realSize4MaterialSoundName = TdrTypeUtil.cstrlen(this.MaterialSoundName);

            if (realSize4MaterialSoundName >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.MaterialSoundName, realSize4MaterialSoundName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.MaterialSoundName */
            Int32 size4MaterialSoundName = destBuf.getUsedSize() - beginPos4MaterialSoundName;
            ret = destBuf.writeUInt32((UInt32)(size4MaterialSoundName), sizePos4MaterialSoundName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MaterialSound.CURRVERSION < cutVer)
        {
            cutVer = MaterialSound.CURRVERSION;
        }

        /* check cutversion */
        if (MaterialSound.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.MaterialSoundID */
        {
            ret = srcBuf.readUInt32(ref this.MaterialSoundID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MaterialSoundName */
        {
            /* get sizeinfo for this.MaterialSoundName */
            UInt32 size4MaterialSoundName = 0;
            ret = srcBuf.readUInt32(ref size4MaterialSoundName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4MaterialSoundName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4MaterialSoundName > this.MaterialSoundName.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4MaterialSoundName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.MaterialSoundName, (int)size4MaterialSoundName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.MaterialSoundName[(int)size4MaterialSoundName - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4MaterialSoundName = TdrTypeUtil.cstrlen(this.MaterialSoundName) + 1;
            if (size4MaterialSoundName != realSize4MaterialSoundName)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MaterialSound.CURRVERSION < cutVer)
        {
            cutVer = MaterialSound.CURRVERSION;
        }

        /* check cutversion */
        if (MaterialSound.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.MaterialSoundID */
        {
            ret = srcBuf.readUInt32(ref this.MaterialSoundID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MaterialSoundName */
        {
            Int32 size4MaterialSoundName = 64;

            /* load */
            ret = srcBuf.readCString(ref this.MaterialSoundName, (int)size4MaterialSoundName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.MaterialSoundID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MaterialSoundID]", "{0:d}", this.MaterialSoundID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MaterialSoundName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[MaterialSoundName]", this.MaterialSoundName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
