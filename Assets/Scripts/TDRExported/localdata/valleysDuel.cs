/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 98c1e87e16ce0e8a33b680aa7fe4fde0 */

/* creation time: Mon May 11 20:57:16 2015 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace wl_res
{


/* Ïª¹È¶Ô¾ö¹ÖÎï */
public class ValleysDuelMonsterStruct : tsf4g_csharp_interface
{
    /* public members */
    public Int32 NpcId;
    public Int32 MonsterNum;

    /* construct methods */
    public ValleysDuelMonsterStruct()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelMonsterStruct.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelMonsterStruct.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelMonsterStruct.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.NpcId */
        {
            ret = destBuf.writeInt32(this.NpcId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.MonsterNum */
        {
            ret = destBuf.writeInt32(this.MonsterNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelMonsterStruct.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelMonsterStruct.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelMonsterStruct.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.NpcId */
        {
            ret = srcBuf.readInt32(ref this.NpcId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.MonsterNum */
        {
            ret = srcBuf.readInt32(ref this.MonsterNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelMonsterStruct.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelMonsterStruct.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelMonsterStruct.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.NpcId */
        {
            ret = srcBuf.readInt32(ref this.NpcId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.MonsterNum */
        {
            ret = srcBuf.readInt32(ref this.MonsterNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.NpcId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NpcId]", "{0:d}", this.NpcId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.MonsterNum */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MonsterNum]", "{0:d}", this.MonsterNum);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class ValleysDuelMonster : tsf4g_csharp_interface
{
    /* public members */
    public Int32 No;
    public Int32 Level;
    public ValleysDuelMonsterStruct[] monster;
    public ValleysDuelMonsterStruct[] monster2;
    public Int32 startTime;
    public Int32 RefreshInterval;
    public Int32 TowerNpcid;
    public Int32 BossNpcid;
    public Int32 Tower2Npcid;
    public Int32 Boss2Npcid;

    /* construct methods */
    public ValleysDuelMonster()
    {
        monster = new ValleysDuelMonsterStruct[3];
        for(int monster_i = 0; monster_i < 3; monster_i++)
        {
            monster[monster_i] = new ValleysDuelMonsterStruct();
        }

        monster2 = new ValleysDuelMonsterStruct[3];
        for(int monster2_i = 0; monster2_i < 3; monster2_i++)
        {
            monster2[monster2_i] = new ValleysDuelMonsterStruct();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelMonster.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelMonster.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelMonster.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.No */
        {
            ret = destBuf.writeInt32(this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Level */
        {
            ret = destBuf.writeInt32(this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.monster */
        {
            for (Int32 monster_i = 0; monster_i < 3; monster_i++)
            {
                ret = this.monster[monster_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.monster2 */
        {
            for (Int32 monster2_i = 0; monster2_i < 3; monster2_i++)
            {
                ret = this.monster2[monster2_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* pack member: this.startTime */
        {
            ret = destBuf.writeInt32(this.startTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.RefreshInterval */
        {
            ret = destBuf.writeInt32(this.RefreshInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.TowerNpcid */
        {
            ret = destBuf.writeInt32(this.TowerNpcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossNpcid */
        {
            ret = destBuf.writeInt32(this.BossNpcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Tower2Npcid */
        {
            ret = destBuf.writeInt32(this.Tower2Npcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Boss2Npcid */
        {
            ret = destBuf.writeInt32(this.Boss2Npcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelMonster.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelMonster.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelMonster.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.No */
        {
            ret = srcBuf.readInt32(ref this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.monster */
        {
            for (Int32 monster_i = 0; monster_i < 3; monster_i++)
            {
                ret = this.monster[monster_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.monster2 */
        {
            for (Int32 monster2_i = 0; monster2_i < 3; monster2_i++)
            {
                ret = this.monster2[monster2_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.startTime */
        {
            ret = srcBuf.readInt32(ref this.startTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RefreshInterval */
        {
            ret = srcBuf.readInt32(ref this.RefreshInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.TowerNpcid */
        {
            ret = srcBuf.readInt32(ref this.TowerNpcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossNpcid */
        {
            ret = srcBuf.readInt32(ref this.BossNpcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Tower2Npcid */
        {
            ret = srcBuf.readInt32(ref this.Tower2Npcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Boss2Npcid */
        {
            ret = srcBuf.readInt32(ref this.Boss2Npcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelMonster.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelMonster.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelMonster.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.No */
        {
            ret = srcBuf.readInt32(ref this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Level */
        {
            ret = srcBuf.readInt32(ref this.Level);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.monster */
        {
            for (Int32 monster_i = 0; monster_i < 3; monster_i++)
            {
                ret = this.monster[monster_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.monster2 */
        {
            for (Int32 monster2_i = 0; monster2_i < 3; monster2_i++)
            {
                ret = this.monster2[monster2_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.startTime */
        {
            ret = srcBuf.readInt32(ref this.startTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.RefreshInterval */
        {
            ret = srcBuf.readInt32(ref this.RefreshInterval);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.TowerNpcid */
        {
            ret = srcBuf.readInt32(ref this.TowerNpcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossNpcid */
        {
            ret = srcBuf.readInt32(ref this.BossNpcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Tower2Npcid */
        {
            ret = srcBuf.readInt32(ref this.Tower2Npcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Boss2Npcid */
        {
            ret = srcBuf.readInt32(ref this.Boss2Npcid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.No */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[No]", "{0:d}", this.No);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Level */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Level]", "{0:d}", this.Level);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.monster */
        for (Int32 monster_i = 0; monster_i < 3; monster_i++)
        {
            if (null == this.monster[monster_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[monster]", monster_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.monster[monster_i] */
            if (0 > indent)
            {
                ret = this.monster[monster_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.monster[monster_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.monster2 */
        for (Int32 monster2_i = 0; monster2_i < 3; monster2_i++)
        {
            if (null == this.monster2[monster2_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[monster2]", monster2_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.monster2[monster2_i] */
            if (0 > indent)
            {
                ret = this.monster2[monster2_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.monster2[monster2_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* visualize member: this.startTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[startTime]", "{0:d}", this.startTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.RefreshInterval */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RefreshInterval]", "{0:d}", this.RefreshInterval);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.TowerNpcid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[TowerNpcid]", "{0:d}", this.TowerNpcid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossNpcid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossNpcid]", "{0:d}", this.BossNpcid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Tower2Npcid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Tower2Npcid]", "{0:d}", this.Tower2Npcid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Boss2Npcid */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Boss2Npcid]", "{0:d}", this.Boss2Npcid);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* Ïª¹È¶Ô¾öÏÞÖÆ±í */
public class ValleysDuelLimit : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 No;
    public UInt32 NeedPay;
    public UInt32 ResurgenceTime;
    public UInt32 ResurgenceVaule;
    public UInt32 WinReward;
    public UInt32 FailReward;

    /* construct methods */
    public ValleysDuelLimit()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelLimit.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelLimit.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.No */
        {
            ret = destBuf.writeUInt32(this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.NeedPay */
        {
            ret = destBuf.writeUInt32(this.NeedPay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ResurgenceTime */
        {
            ret = destBuf.writeUInt32(this.ResurgenceTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ResurgenceVaule */
        {
            ret = destBuf.writeUInt32(this.ResurgenceVaule);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.WinReward */
        {
            ret = destBuf.writeUInt32(this.WinReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FailReward */
        {
            ret = destBuf.writeUInt32(this.FailReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelLimit.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelLimit.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.No */
        {
            ret = srcBuf.readUInt32(ref this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.NeedPay */
        {
            ret = srcBuf.readUInt32(ref this.NeedPay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ResurgenceTime */
        {
            ret = srcBuf.readUInt32(ref this.ResurgenceTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ResurgenceVaule */
        {
            ret = srcBuf.readUInt32(ref this.ResurgenceVaule);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.WinReward */
        {
            ret = srcBuf.readUInt32(ref this.WinReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FailReward */
        {
            ret = srcBuf.readUInt32(ref this.FailReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ValleysDuelLimit.CURRVERSION < cutVer)
        {
            cutVer = ValleysDuelLimit.CURRVERSION;
        }

        /* check cutversion */
        if (ValleysDuelLimit.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.No */
        {
            ret = srcBuf.readUInt32(ref this.No);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.NeedPay */
        {
            ret = srcBuf.readUInt32(ref this.NeedPay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ResurgenceTime */
        {
            ret = srcBuf.readUInt32(ref this.ResurgenceTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ResurgenceVaule */
        {
            ret = srcBuf.readUInt32(ref this.ResurgenceVaule);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.WinReward */
        {
            ret = srcBuf.readUInt32(ref this.WinReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FailReward */
        {
            ret = srcBuf.readUInt32(ref this.FailReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.No */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[No]", "{0:d}", this.No);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.NeedPay */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[NeedPay]", "{0:d}", this.NeedPay);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ResurgenceTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResurgenceTime]", "{0:d}", this.ResurgenceTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ResurgenceVaule */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ResurgenceVaule]", "{0:d}", this.ResurgenceVaule);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.WinReward */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[WinReward]", "{0:d}", this.WinReward);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FailReward */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FailReward]", "{0:d}", this.FailReward);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
