/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: cb9c5ea3d7cc76d0ec4a17348c3a6864 */

/* creation time: Mon Jun 02 18:05:48 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace net
{


public interface tsf4g_csharp_interface
{
    TdrError.ErrorType construct();
    TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize, uint cutVer);
    TdrError.ErrorType pack(ref TdrWriteBuf destBuf, uint cutVer);
    TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize, uint cutVer);
    TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer);
    TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize, uint cutVer);
    TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer);
    TdrError.ErrorType visualize(ref string buffer,int indent , char separator);
    TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator);
    TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo);
    TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo);
}


public enum  CS_CMD_ID
{
    CS_CMD_REQ_ACCOUNT_LOGIN = 11, // 请求帐号登录
    CS_CMD_RES_ACCOUNT_LOGIN = 12, // 请求帐号登录返回
    CS_CMD_REQ_ACCOUNT_LOGOUT = 13, // 请求帐号登出
    CS_CMD_RES_ACCOUNT_LOGOUT = 14, // 请求帐号登出返回
    CS_CMD_REQ_CREATE_ROLE = 15, // 请求创建角色
    CS_CMD_RES_CREATE_ROLE = 16, // 请求创建角色res
    CS_CMD_REQ_ROLE_NAME = 17, // 请求角色名
    CS_CMD_RES_ROLE_NAME = 18, // 请求角色名res
    CS_CMD_REQ_BASE_ATTR = 19, // 请求基本属性
    CS_CMD_RES_BASE_ATTR = 20, // 请求基本属性res
    CS_CMD_REQ_BALANCE = 21, // 充值后请求余额
    CS_CMD_RES_BALANCE = 22, // 充值后请求余额res
    CS_CMD_REQ_SHOP_BUY = 81, // 商店购买请求
    CS_CMD_RES_SHOP_BUY = 82, // 商店购买应答
    CS_CMD_REQ_PLAYER_EQUIP_INFO = 100, // 查询玩家装备信息
    CS_CMD_RES_PLAYER_EQUIP_INFO = 101, // 返回玩家装备信息
    CS_CMD_REQ_PLAYER_EXTEND_EQUIP_BAG = 102, // 扩展装备包裹
    CS_CMD_RES_PLAYER_EXTEND_EQUIP_BAG = 103, // 扩展装备包裹的响应
    CS_CMD_REQ_PLAYER_COMPOSE_EQUIP = 104, // 装备合成
    CS_CMD_RES_PLAYER_COMPOSE_EQUIP = 105, // 装备合成响应
    CS_CMD_REQ_PLAYER_ENHANCE_EQUIP = 106, // 装备强化
    CS_CMD_RES_PLAYER_ENHANCE_EQUIP = 107, // 装备强化响应
    CS_CMD_REQ_PLAYER_SELL_EQUIP = 108, // 装备售卖
    CS_CMD_RES_PLAYER_SELL_EQUIP = 109, // 装备售卖
    CS_CMD_REQ_TAKE_ON_EQUIP = 110, // 穿戴装备
    CS_CMD_RES_TAKE_ON_EQUIP = 111, // 穿戴装备响应
    CS_CMD_MAIL_SEND_REQ = 300, // 发送邮件
    CS_CMD_MAIL_SEND_RES = 301, // 发送邮件响应消息
    CS_CMD_MAIL_DEL_REQ = 302, // 删除邮件
    CS_CMD_MAIL_DEL_RES = 303, // 删除邮件响应消息
    CS_CMD_MAIL_GET_LIST_REQ = 304, // 获取邮件列表
    CS_CMD_MAIL_GET_LIST_RES = 305, // 获取邮件列表响应
    CS_CMD_MAIL_GET_DETAIL_REQ = 306, // 获取邮件详细信息
    CS_CMD_MAIL_GET_DETAIL_RES = 307, // 获取邮件详细信息的响应消息
    CS_CMD_MAIL_SET_STATUS_REQ = 308, // 设置邮件状态信息
    CS_CMD_MAIL_SET_STATUS_RES = 309, // 设置邮件状态信息的响应消息
    CS_CMD_MAIL_GET_COUNT_REQ = 310, // 获取邮件总数
    CS_CMD_MAIL_GET_COUNT_RES = 311, // 获取邮件总数的响应消息
    CS_CMD_MAIL_GET_ACCESSORY_REQ = 312, // 获取邮件附件
    CS_CMD_MAIL_GET_ACCESSORY_RES = 313, // 获取邮件附件的响应消息
    CS_CMD_MAIL_NOTIFY_NEW_MAIL = 314, // 通知收取到新邮件
    CS_CMD_GET_FRIEND_RANK_REQ = 401, // 获取好友排行榜
    CS_CMD_GET_FRIEND_RANK_RES = 402, // 获取好友排行榜
    CS_CMD_NOTIFY_DEL_FRIEND_RANK = 403, // 通知客户端已删除的好友 (客户端已拉取过的被删除好友才通知)
    CS_CMD_NOTIFY_CHG_FRIEND_RANK = 404, // 通知客户端数据有变化的好友
    CS_CMD_GET_FRIEND_LIST_REQ = 450, // 获取好友列表
    CS_CMD_GET_FRIEND_LIST_RES = 451, // 返回好友列表
    CS_CMD_FRIEND_APPLY_LIST_REQ = 452, // 拉取已邀请列表请求
    CS_CMD_FRIEND_APPLY_LIST_RES = 453, // 拉取已邀请列表回包
    CS_CMD_FRIEND_WAIT_ACCEPT_LIST_REQ = 454, // 拉取等待接受列表请求
    CS_CMD_FRIEND_WAIT_ACCEPT_LIST_RES = 455, // 拉取等待接受列表回包
    CS_CMD_FRIEND_DELETE_INVITE_REQ = 456, // 删除邀请列表中一条记录
    CS_CMD_FRIEND_DELETE_INVITE_RES = 457, // 删除邀请列表中一条记录返回
    CS_CMD_FRIEND_DELETE_WAIT_ACCEPT_REQ = 458, // 删除等待邀请列表中一条记录
    CS_CMD_FRIEND_DELETE_WAIT_ACCEPT_RES = 459, // 删除等待邀请列表中一条记录返回
    CS_CMD_SEARCH_FRIEND_REQ = 460, // 查找好友，通过昵称加好友时使用
    CS_CMD_SEARCH_FRIEND_RES = 461, // 查找好友返回
    CS_CMD_ADD_FRIEND_REQ = 462, // 请求加好友
    CS_CMD_ADD_FRIEND_RES = 463, // 加好友返回
    CS_CMD_ACCEPT_FRIEND_REQ = 464, // 同意加好友
    CS_CMD_ACCEPT_FRIEND_RES = 465, // 同意加好友返回
    CS_CMD_DELETE_FRIEND_REQ = 466, // 请求删除好友
    CS_CMD_DELETE_FRIEND_RES = 467, // 请求删除好友返回
    CS_CMD_SEND_HEART_REQ = 468, // 请求送心
    CS_CMD_SEND_HEART_RES = 469, // 请求送心返回
    CS_CMD_VISIT_FRIEND_REQ = 470, // 请求访问好友
    CS_CMD_VISIT_FRIEND_RES = 471, // 请求访问好友返回
    CS_CMD_CONJURE_FRIEND_REQ = 472, // 请求召唤好友
    CS_CMD_CONJURE_FRIEND_RES = 473, // 请求召唤好友返回
    CS_CMD_REQ_GAME_PROGRESS_INFO = 500, // 查询玩家关卡进度信息
    CS_CMD_RES_GAME_PROGRESS_INFO = 501, // 应答玩家关卡进度信息
    CS_CMD_REQ_BATTLE_START = 502, // 挑战关卡请求
    CS_CMD_RES_BATTLE_START = 503, // 挑战关卡应答
    CS_CMD_REQ_BATTLE_END = 504, // 结束关卡请求
    CS_CMD_RES_BATTLE_END = 505, // 结束关卡应答
    CS_CMD_REQ_BATTLE_LOTTERY = 506, // 请求再抽一次
    CS_CMD_RES_BATTLE_LOTTERY = 507, // 应答再抽一次
    CS_CMD_REQ_REVIVE = 508, // 请求复活
    CS_CMD_RES_REVIVE = 509, // 应答复活
    CS_CMD_REQ_BUY_RANDOM_BUFF = 510, // 请求购买随机高级BUFF
    CS_CMD_RES_BUY_RANDOM_BUFF = 511, // 应答购买随机高级BUFF
    CS_CMD_REQ_SHOP_LOTTERY = 512, // 请求商店抽卡
    CS_CMD_RES_SHOP_LOTTERY = 513, // 应答商店抽卡
    CS_CMD_QUERY_BOSS_REQ = 514, // 查询BOSS请求
    CS_CMD_QUERY_BOSS_RES = 515, // 查询BOSS响应
    CS_CMD_QUERY_FRIEND_BOSS_REQ = 516, // 查询好友求援BOSS请求
    CS_CMD_QUERY_FRIEND_BOSS_RES = 517, // 查询好友求援BOSS响应
    CS_CMD_CHALLENGE_BOSS_REQ = 518, // 挑战BOSS请求
    CS_CMD_CHALLENGE_BOSS_RES = 519, // 挑战BOSS请求
    CS_CMD_CHALLENGE_FRIEND_BOSS_REQ = 520, // 挑战好友BOSS请求
    CS_CMD_CHALLENGE_FRIEND_BOSS_RES = 521, // 挑战好友BOSS应答
    CS_CMD_SETTLE_BOSS_REQ = 522, // 挑战BOSS结算请求
    CS_CMD_SETTLE_BOSS_RES = 523, // 挑战BOSS结算应答
    CS_CMD_SETTLE_FRIEND_BOSS_REQ = 524, // 挑战好友BOSS结算请求
    CS_CMD_SETTLE_FRIEND_BOSS_RES = 525, // 挑战好友BOSS结算应答
    CS_CMD_BOSS_GAME_REVIVE_REQ = 526, // BOSS战中复活请求
    CS_CMD_BOSS_GAME_REVIVE_RES = 527, // BOSS战中复活应答
    CS_CMD_BOSS_HELP_REQ = 528, // BOSS战中复活应答
    CS_CMD_BOSS_HELP_RES = 529, // BOSS战中复活应答
    CS_CMD_CHALLENGE_GET_INFO_REQ = 530, // 查询挑战相关信息
    CS_CMD_CHALLENGE_GET_INFO_RES = 531, // 响应查询挑战相关信息
    CS_CMD_CHALLENGE_BEGIN_REQ = 532, // 请求开始挑战
    CS_CMD_CHALLENGE_BEGIN_RES = 533, // 响应开始挑战
    CS_CMD_CHALLENGE_SETTLEMENT_REQ = 534, // 请求挑战结算
    CS_CMD_CHALLENGE_SETTLEMENT_RES = 535, // 响应挑战结算
    CS_CMD_CHALLENGE_RENEW_TIMES_REQ = 536, // 请求快速恢复挑战次数
    CS_CMD_CHALLENGE_RENEW_TIMES_RES = 537, // 响应快速恢复挑战次数
    CS_CMD_CHALLENGE_REVIVE_REQ = 538, // 请求复活
    CS_CMD_CHALLENGE_REVIVE_RES = 539, // 响应复活
    CS_CMD_GET_TASK_LIST_REQ = 601, // 获取任务列表请求
    CS_CMD_GET_TASK_LIST_RES = 602, // 获取任务列表响应
    CS_CMD_GET_TASK_AWARD_REQ = 603, // 获取任务奖励请求
    CS_CMD_GET_TASK_AWARD_RES = 604, // 获取任务奖励响应
    CS_CMD_GET_ALL_TASK_AWARD_REQ = 605, // 获取所有的任务的奖励请求
    CS_CMD_GET_ALL_TASK_AWARD_RES = 606, // 获取所有的任务的奖励响应
    CS_CMD_EXEC_GM = 610, // 请求执行GM命令
    CS_CMD_DISPLAY_GM_MSG = 611, // 执行GM命令后显示的文本信息
    CS_CMD_PET_STRENGTHEN_REQ = 701, // 宠物强化请求
    CS_CMD_PET_COMPOSITE_REQ = 702, // 宠物合成请求
    CS_CMD_PET_UPGRADE_REQ = 703, // 宠物升级请求
    CS_CMD_PET_CHANGE_POS_REQ = 704, // 宠物变更位置请求
    CS_CMD_PET_EXTEND_BAG_REQ = 706, // 付费扩展宠物包裹请求
    CS_CMD_PET_SELL_REQ = 707, // 出售宠物请求
    CS_CMD_PET_GET_LIST_REQ = 708, // 获取宠物列表
    CS_CMD_PET_GET_MANUAL_REQ = 709, // 获取宠物图鉴信息
    CS_CMD_PET_STRENGTHEN_RES = 711, // 宠物强化响应
    CS_CMD_PET_COMPOSITE_RES = 712, // 宠物合成响应
    CS_CMD_PET_UPGRADE_RES = 713, // 宠物升级响应
    CS_CMD_PET_CHANGE_POS_RES = 714, // 宠物变更位置响应
    CS_CMD_PET_EXTEND_BAG_RES = 716, // 付费扩展宠物包裹响应
    CS_CMD_PET_SELL_RES = 717, // 出售宠物响应
    CS_CMD_PET_GET_LIST_RES = 718, // 返回宠物列表
    CS_CMD_PET_GET_MANUAL_RES = 720, // 获取宠物图鉴信息响应
    CS_CMD_NOTIFY_CLIENT_MESSAGE = 730, // 通知客户端信息
    CS_CMD_BUY_ROLE_REQ = 800, // CSBuyRoleReq
    CS_CMD_BUY_ROLE_RES = 801, // CSBuyRoleRes
    CS_CMD_BUY_ROLE_LEVEL_REQ = 802, // CSBuyRoleLevelReq
    CS_CMD_BUY_ROLE_LEVEL_RES = 803, // CSBuyRoleLevelRes
    CS_CMD_ROLE_ENHANCE_REQ = 804, // CSRoleEnhanceReq
    CS_CMD_ROLE_ENHANCE_RES = 805, // CSRoleEnhanceRes
    CS_CMD_ROLE_STAR_UP_REQ = 806, // CSRoleStarUpReq
    CS_CMD_ROLE_STAR_UP_RES = 807, // CSRoleStarUpRes
    CS_CMD_CHG_ONPLAY_ROLE_REQ = 808, // CSChgOnPlayRoleReq
    CS_CMD_CHG_ONPLAY_ROLE_RES = 809, // CSChgOnPlayRoleRes
    CS_CMD_GET_ROLE_LIST_REQ = 810, // CSGetRoleListReq
    CS_CMD_GET_ROLE_LIST_RES = 811, // CSGetRoleListRes
    CS_CMD_ROLE_ADD_EQUIP_REQ = 812, // CSRoleAddEquipReq
    CS_CMD_ROLE_ADD_EQUIP_RES = 813, // CSRoleAddEquipRes
    CS_GET_NOTICE_REQ = 901, // 请求拉取公告信息
    CS_GET_NOTICE_RES = 902, // 拉取公告信息的返回消息
    CS_NOTICE_PLAY_NOTIFY = 903, // 公告已经播放的notify消息
    CS_CMD_GET_CHAT_MSG_REQ = 951, // 获取指定类型聊天消息请求
    CS_CMD_GET_CHAT_MSG_RES = 952, // 获取指定类型聊天消息应答
    CS_CMD_SEND_CHAT_MSG_REQ = 953, // 发送聊天消息请求
    CS_CMD_SEND_CHAT_MSG_RES = 954, // 发送聊天消息请求应答
    CS_CMD_CLOSE_CHAT_UI_REQ = 955, // 用户关闭聊天界面或收到notify聊天消息时已离开聊天界面，则由客户端调用本协议通知服务端更新状态
    CS_CMD_CLOSE_CHAT_UI_RES = 956, // 关闭聊天UI应答
    CS_CMD_OPEN_ROLL_UI_REQ = 957, // 用户打开滚动消息展示界面
    CS_CMD_CLOSE_ROLL_UI_REQ = 958, // 用户关闭滚动消息展示界面
    CS_CMD_REALY_ROLL_MSG_NOTIFY = 998, // 服务端转发需滚动展示消息到客户端（notify）
    CS_CMD_REALY_CHAT_MSG_NOTIFY = 999, // 服务端转发聊天消息到客户端（notify）
}
public enum  PLAT_ID
{
    PID_INVALID = -1, // Invalid
    PID_IOS = 1, // iOS
    PID_ANDROID = 2, // Android
}
public enum  AUTH_TYPE
{
    AUTH_TYPE_NONE = 0, // none
    AUTH_TYPE_WX_ATK = 1, // WX access token
    AUTH_TYPE_WX_RTK = 2, // WX refresh token
    AUTH_TYPE_QQ_ATK = 3, // QQ access token
}
public enum  NAME_TYPE
{
    NAME_TYPE_ROLE = 0, // rolename
}
public enum  GAME_DIFFICULTY
{
    E_GD_NONE = 0, // 无资格
    E_GD_READY = 1, // 可挑战
    E_GD_EASY = 2, // 简单
    E_GD_NORMAL = 3, // 普通
    E_GD_HARD = 4, // 困难
}
public enum  BATTLE_RESULT
{
    E_BATRES_NONE = 0, // 挑战未完成
    E_BATRES_WIN = 1, // 挑战成功
    E_BATRES_FAIL = 2, // 挑战失败
    E_BATRES_SETTLEMENT_INVALID = 3, // 结算无效
}
public enum  GAME_CS_RETCODE
{
    E_GRET_ERROR = -1, // 其它错误
    E_GRET_OK = 0,
    E_GRET_INVALID_GAME_PROGRESS = 1, // 客户端与服务器关卡进度信息不一致
    E_GRET_HAS_NO_KEY = 2, // 玩家没有钥匙
    E_GRET_HAS_NO_BAG = 3, // 玩家包裹空格不足
    E_GRET_HAS_NO_ENOUGH_MONEY = 4, // 玩家金钱不足
    E_GRET_SETTLEMENT_INVALID = 5, // 结算无效
    E_GRET_REVIVE_COUNT_OVER = 6, // 复活次数用完
}
public enum  GAME_BATTLE_TYPE
{
    E_GBT_NONE = 0,
    E_GBT_MAIN_LEVEL = 1, // 主线关卡
    E_GBT_BOSS = 2, // BOSS战
    E_GBT_ENDLESS = 3, // 无尽模式
}
public enum  SHOP_LOTTERY_TYPE
{
    E_SLT_DIAMOND_10 = 1, // 钻石10连抽
    E_SLT_DIAMOND_1 = 2, // 钻石抽1张
    E_SLT_GOLD_10 = 3, // 金币10连抽
    E_SLT_GOLD_1 = 4, // 金币抽1张
}
public enum  EnmRoleEnhanceType
{
    ENM_ROLE_ENHANCE_TYPE_ATTACK = 1, // 攻击力
    ENM_ROLE_ENHANCE_TYPE_DEFENCE = 2, // 防御力
    ENM_ROLE_ENHANCE_TYPE_HP = 3, // 血量
}
public enum  TEAMSTATUS
{
    TEAM_NONE = 0, // 未出战
    PET_TEAM_PLAYED_FIRST = 1, // 宠物出战1
    PET_TEAM_PLAYED_SECOND = 2, // 宠物出战2
    PET_TEAM_RESERVE_FIRST = 11, // 宠物替补1
    PET_TEAM_RESERVE_SECOND = 12, // 宠物替补2
    ROLE_TEAM_STATUS_ON = 21, // 主角出战
}
public enum  OPERATERRESULT
{
    RESULT_FAILED = 0, // 失败
    RESULT_SUCCESS = 1, // 成功
}
public enum  PETMANUALSCENE
{
    PET_MANUAL_SCENE_STORE = 0, // 商城
}
public enum  MAILSTATUS
{
    MAIL_STATUS_NEW = 0, // 新邮件
    MAIL_STATUS_READED = 1, // 邮件已读
}
public enum  MAILTYPE
{
    MAIL_TYPE_UNKNOWN = 0, // 未知邮件类型
    MAIL_TYPE_USER_MESSAGE = 1, // 用户信息邮件
    MAIL_TYPE_SYSTEM_ACCESSORY = 2, // 系统附件邮件
}
public enum  MAILSUBTYPE
{
    MAIL_SUB_TYPE_UNKNOWN = 0, // 未知邮件子类型
}
public enum  MAILACCESSORYTYPE
{
    ACCESSORY_UNKNOWN = 0, // 未知类型
    ACCESSORY_ITEM = 1, // 附件道具
    ACCESSORY_ROLE = 2, // 角色
    ACCESSORY_PET = 3, // 宠物
    ACCESSORY_EQUIP = 4, // 装备
    ACCESSORY_DIAMOND = 5, // 钻石
    ACCESSORY_GOLD = 6, // 金币
    ACCESSORY_HEART = 7, // 爱心
    ACCESSORY_KEY = 8, // 钥匙
}
public enum  MAILSOURCE
{
    MAIL_SRC_GENERAL = 0, // 通用
    MAIL_SRC_TASK = 1, // 任务奖励
    MAIL_SRC_DAILY_SIGN = 2, // 每日签到
    MAIL_SRC_ACHIEVEMENT = 3, // 成就奖励
}
public enum  MAILACCESSORYFETCHTAG
{
    ACCESSORY_UNFETCHED = 0, // 附件尚未被提取
    ACCESSORY_FETCHED = 1, // 附件已经被提取
}
public enum  NOTICETYPE
{
    NOTICETYPE_LOGINNOTICE = 0, // 登录公告
    NOTICETYPE_ROLLNOTICE = 1, // 滚动公告
    NOTICETYPE_COUNT = 2, // 公告类型总数
}
public enum  NOTICECONTENTTYPE
{
    NOTICE_CONTENT_TEXT = 0, // 公告内容是文本
    NOTICE_CONTENT_URL = 1, // 公告内容是URL
    NOTICE_CONTENT_HTML = 2, // 公告内容是HTML
}
public enum  EquipType
{
    MACRO_EQUIP_TYPE_WEAPON = 1, // 武器
    MACRO_EQUIP_TYPE_CLOTH = 2, // 衣服
    MACRO_EQUIP_TYPE_SHOE = 3, // 鞋子
    MACRO_EQUIP_TYPE_RING = 4, // 戒指
    MACRO_EQUIP_TYPE_NECKLACE = 5, // 项链
}
public enum  EquipAttrType
{
    MACRO_EQUIP_ATTR_BASE_ATTACK = 1, // 附加攻击力
    MACRO_EQUIP_ATTR_BASE_DEFENCE = 2, // 附加防御力
    MACRO_EQUIP_ATTR_HP = 3, // 附加生命值
    MACRO_EQUIP_ATTR_BASE_ATTACK_PERCENT = 4, // 百分比攻击力
    MACRO_EQUIP_ATTR_BASE_DEFENCE_PERCENT = 5, // 百分比防御力
    MACRO_EQUIP_ATTR_HP_PERCENT = 6, // 百分比生命值
    MACRO_EQUIP_ATTR_CRIT = 7, // 暴击
    MACRO_EQUIP_ATTR_HARD_STRAIGHT = 8, // 硬直
    MACRO_EQUIP_ATTR_FELL_GROUND = 9, // 倒地
    MACRO_EQUIP_ATTR_FLOAT = 10, // 浮空
    MACRO_EQUIP_ATTR_CRIT_REDUCE = 11, // 暴击抵抗
    MACRO_EQUIP_ATTR_HARD_STRAIGHT_REDUCE = 12, // 硬直抵抗
    MACRO_EQUIP_ATTR_FELL_GROUND_REDUCE = 13, // 倒地抵抗
    MACRO_EQUIP_ATTR_FLOAT_REDUCE = 14, // 浮空抵抗
    MACRO_EQUIP_ATTR_DIRECT_HARM = 15, // 直接伤害
    MACRO_EQUIP_ATTR_DIRECT_HARM_REDUCE = 16, // 伤害豁免
}
public enum  EquipStatus
{
    MACRO_EQUIP_STATUS_IDLE = 0, // 装备空闲状态
    MACRO_EQUIP_STATUS_USED = 1, // 装备已经装备状态
}
public enum  ENMSETDATETYPE
{
    ESDT_NONE = 0,
    ESDT_STRING1 = 1,
    ESDT_STRING2 = 2,
    ESDT_STRING3 = 3,
    ESDT_STRING4 = 4,
    ESDT_STRING5 = 5,
    ESDT_STRING6 = 6,
    ESDT_STRING7 = 7,
    ESDT_STRING8 = 8,
    ESDT_STRING9 = 9,
    ESDT_STRING10 = 10,
}
public enum  ERankType
{
    RANK_TYPE_UNLIMIT = 0, // 无尽模式
    RANK_TYPE_PVP = 1, // Pvp模式
    RANK_TYPE_BOSS = 2, // 打BOSS模式
}
public enum  EChatType
{
    CHAT_TYPE_NONE = 0, // 非消息类型
    CHAT_TYPE_WORLD_BROADCAST = 1, // 世界广播消息
    CHAT_TYPE_CHANNEL_PUBLIC = 2, // 公众频道消息
    CHAT_TYPE_CHANNEL_FACTION = 3, // 帮派频道消息
    CHAT_TYPE_CHANNEL_SYSTEM = 4, // 系统频道消息
    CHAT_TYPE_PEER_PEER = 5, // 点对点消息
    CHAT_TYPE_ROLL_MSG = 6, // 滚动展示消息
}
public enum  ECtrlBit
{
    CHAT_USER_CTRL_BIT_MASK_BLACKNAME = 1, // 黑名单掩码位，该位如果为1，不允许发言
    CHAT_USER_CTRL_BIT_MASK_WIFIONLY = 2, // wifi下才接收广播掩码位
    CHAT_USER_CTRL_BIT_MASK_CHANNEL_PUBLIC = 4, // 公告频道掩码位，该位为1则屏蔽接收该频道消息
}
public enum  ECtrlOp
{
    CHAT_USER_CTRL_BIT_NOCHANGE = -1, // 不涉及，没有变化
    CHAT_USER_CTRL_BIT_CLEAR = 0, // 清除
    CHAT_USER_CTRL_BIT_SET = 1, // 设置
}


public class OpenToken : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ExpTime; // 超时时间
    public Int32 Len; // str len
    public sbyte[] Buff;

    /* construct methods */
    public OpenToken()
    {
        Buff = new sbyte[512];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenToken.CURRVERSION < cutVer)
        {
            cutVer = OpenToken.CURRVERSION;
        }

        /* check cutversion */
        if (OpenToken.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ExpTime */
        {
            ret = destBuf.writeUInt32(this.ExpTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Len */
        {
            ret = destBuf.writeInt32(this.Len);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Buff */
        {
            if (0 > this.Len)
            {
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (512 < this.Len)
            {
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 Buff_i = 0; Buff_i < this.Len; Buff_i++)
            {
                ret = destBuf.writeInt8(this.Buff[Buff_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenToken.CURRVERSION < cutVer)
        {
            cutVer = OpenToken.CURRVERSION;
        }

        /* check cutversion */
        if (OpenToken.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ExpTime */
        {
            ret = srcBuf.readUInt32(ref this.ExpTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Len */
        {
            ret = srcBuf.readInt32(ref this.Len);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Buff */
        {
            if (0 > this.Len)
            {
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (512 < this.Len)
            {
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 Buff_i = 0; Buff_i < this.Len; Buff_i++)
            {
                ret = srcBuf.readInt8(ref this.Buff[Buff_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenToken.CURRVERSION < cutVer)
        {
            cutVer = OpenToken.CURRVERSION;
        }

        /* check cutversion */
        if (OpenToken.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ExpTime */
        {
            ret = srcBuf.readUInt32(ref this.ExpTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Len */
        {
            ret = srcBuf.readInt32(ref this.Len);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Buff */
        {
            for (Int32 Buff_i = 0; Buff_i < 512; Buff_i++)
            {
                ret = srcBuf.readInt8(ref this.Buff[Buff_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ExpTime */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ExpTime]", "{0:d}", this.ExpTime);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Len */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Len]", "{0:d}", this.Len);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Buff */
        if (0 > this.Len)
        {
            return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
        }
        if (512 < this.Len)
        {
            return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[Buff]", this.Len);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 Buff_i = 0; Buff_i < this.Len; Buff_i++)
        {
            ret = destBuf.sprintf("0x{0:x2}", this.Buff[Buff_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class OpenAuth : tsf4g_csharp_interface
{
    /* public members */
    public OpenToken Atk; // access token
    public OpenToken Rtk; // refresh token
    public OpenToken Ptk; // pay token

    /* construct methods */
    public OpenAuth()
    {
        Atk = new OpenToken();
        Rtk = new OpenToken();
        Ptk = new OpenToken();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenAuth.CURRVERSION < cutVer)
        {
            cutVer = OpenAuth.CURRVERSION;
        }

        /* check cutversion */
        if (OpenAuth.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Atk */
        {
            ret = this.Atk.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Rtk */
        {
            ret = this.Rtk.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Ptk */
        {
            ret = this.Ptk.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenAuth.CURRVERSION < cutVer)
        {
            cutVer = OpenAuth.CURRVERSION;
        }

        /* check cutversion */
        if (OpenAuth.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Atk */
        {
            ret = this.Atk.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Rtk */
        {
            ret = this.Rtk.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Ptk */
        {
            ret = this.Ptk.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OpenAuth.CURRVERSION < cutVer)
        {
            cutVer = OpenAuth.CURRVERSION;
        }

        /* check cutversion */
        if (OpenAuth.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Atk */
        {
            ret = this.Atk.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Rtk */
        {
            ret = this.Rtk.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Ptk */
        {
            ret = this.Ptk.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Atk */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Atk]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize children of this.Atk */
        if (0 > indent)
        {
            ret = this.Atk.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.Atk.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Rtk */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Rtk]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize children of this.Rtk */
        if (0 > indent)
        {
            ret = this.Rtk.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.Rtk.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Ptk */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Ptk]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize children of this.Ptk */
        if (0 > indent)
        {
            ret = this.Ptk.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.Ptk.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 挑战BOSS的玩家 */
public class Chanllenger : tsf4g_csharp_interface
{
    /* public members */
    public byte[] OpenID; // 挑战者openid
    public sbyte Plat; // 操作系统
    public UInt32 HurtHp; // 对BOSS造成的累计伤害

    /* construct methods */
    public Chanllenger()
    {
        OpenID = new byte[128];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Chanllenger.CURRVERSION < cutVer)
        {
            cutVer = Chanllenger.CURRVERSION;
        }

        /* check cutversion */
        if (Chanllenger.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.OpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4OpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4OpenID = destBuf.getUsedSize();

            Int32 realSize4OpenID = TdrTypeUtil.cstrlen(this.OpenID);

            if (realSize4OpenID >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.OpenID, realSize4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.OpenID */
            Int32 size4OpenID = destBuf.getUsedSize() - beginPos4OpenID;
            ret = destBuf.writeUInt32((UInt32)(size4OpenID), sizePos4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Plat */
        {
            ret = destBuf.writeInt8(this.Plat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.HurtHp */
        {
            ret = destBuf.writeUInt32(this.HurtHp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Chanllenger.CURRVERSION < cutVer)
        {
            cutVer = Chanllenger.CURRVERSION;
        }

        /* check cutversion */
        if (Chanllenger.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.OpenID */
        {
            /* get sizeinfo for this.OpenID */
            UInt32 size4OpenID = 0;
            ret = srcBuf.readUInt32(ref size4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4OpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4OpenID > this.OpenID.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4OpenID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.OpenID, (int)size4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.OpenID[(int)size4OpenID - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4OpenID = TdrTypeUtil.cstrlen(this.OpenID) + 1;
            if (size4OpenID != realSize4OpenID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.Plat */
        {
            ret = srcBuf.readInt8(ref this.Plat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.HurtHp */
        {
            ret = srcBuf.readUInt32(ref this.HurtHp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Chanllenger.CURRVERSION < cutVer)
        {
            cutVer = Chanllenger.CURRVERSION;
        }

        /* check cutversion */
        if (Chanllenger.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.OpenID */
        {
            Int32 size4OpenID = 128;

            /* load */
            ret = srcBuf.readCString(ref this.OpenID, (int)size4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.Plat */
        {
            ret = srcBuf.readInt8(ref this.Plat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.HurtHp */
        {
            ret = srcBuf.readUInt32(ref this.HurtHp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.OpenID */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[OpenID]", this.OpenID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Plat */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Plat]", "0x{0:x2}", this.Plat);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.HurtHp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[HurtHp]", "{0:d}", this.HurtHp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class BossData : tsf4g_csharp_interface
{
    /* public members */
    public byte Seq;
    public UInt64 GID;
    public UInt32 BossID; // boss编号
    public Int32 Hp; // boss剩余血量
    public Chanllenger FirstKiller;
    public byte ChallengerCount; // 挑战者数量
    public Chanllenger[] Challengers;

    /* construct methods */
    public BossData()
    {
        FirstKiller = new Chanllenger();
        Challengers = new Chanllenger[10];
        for(int Challengers_i = 0; Challengers_i < 10; Challengers_i++)
        {
            Challengers[Challengers_i] = new Chanllenger();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BossData.CURRVERSION < cutVer)
        {
            cutVer = BossData.CURRVERSION;
        }

        /* check cutversion */
        if (BossData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Seq */
        {
            ret = destBuf.writeUInt8(this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.GID */
        {
            ret = destBuf.writeUInt64(this.GID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.BossID */
        {
            ret = destBuf.writeUInt32(this.BossID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Hp */
        {
            ret = destBuf.writeInt32(this.Hp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.FirstKiller */
        {
            ret = this.FirstKiller.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ChallengerCount */
        {
            ret = destBuf.writeUInt8(this.ChallengerCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.Challengers */
        {
            if (10 < this.ChallengerCount)
            {
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 Challengers_i = 0; Challengers_i < this.ChallengerCount; Challengers_i++)
            {
                ret = this.Challengers[Challengers_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BossData.CURRVERSION < cutVer)
        {
            cutVer = BossData.CURRVERSION;
        }

        /* check cutversion */
        if (BossData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Seq */
        {
            ret = srcBuf.readUInt8(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GID */
        {
            ret = srcBuf.readUInt64(ref this.GID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.BossID */
        {
            ret = srcBuf.readUInt32(ref this.BossID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Hp */
        {
            ret = srcBuf.readInt32(ref this.Hp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FirstKiller */
        {
            ret = this.FirstKiller.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ChallengerCount */
        {
            ret = srcBuf.readUInt8(ref this.ChallengerCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.Challengers */
        {
            if (10 < this.ChallengerCount)
            {
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 Challengers_i = 0; Challengers_i < this.ChallengerCount; Challengers_i++)
            {
                ret = this.Challengers[Challengers_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BossData.CURRVERSION < cutVer)
        {
            cutVer = BossData.CURRVERSION;
        }

        /* check cutversion */
        if (BossData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Seq */
        {
            ret = srcBuf.readUInt8(ref this.Seq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.GID */
        {
            ret = srcBuf.readUInt64(ref this.GID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.BossID */
        {
            ret = srcBuf.readUInt32(ref this.BossID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Hp */
        {
            ret = srcBuf.readInt32(ref this.Hp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.FirstKiller */
        {
            ret = this.FirstKiller.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ChallengerCount */
        {
            ret = srcBuf.readUInt8(ref this.ChallengerCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.Challengers */
        {
            for (Int32 Challengers_i = 0; Challengers_i < 10; Challengers_i++)
            {
                ret = this.Challengers[Challengers_i].load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Seq */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Seq]", "0x{0:x2}", this.Seq);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.GID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[GID]", "{0:d}", this.GID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.BossID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[BossID]", "{0:d}", this.BossID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Hp */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Hp]", "{0:d}", this.Hp);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.FirstKiller */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[FirstKiller]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize children of this.FirstKiller */
        if (0 > indent)
        {
            ret = this.FirstKiller.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.FirstKiller.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ChallengerCount */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ChallengerCount]", "0x{0:x2}", this.ChallengerCount);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.Challengers */
        if (10 < this.ChallengerCount)
        {
            return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (Int32 Challengers_i = 0; Challengers_i < this.ChallengerCount; Challengers_i++)
        {
            if (null == this.Challengers[Challengers_i])
            {
                continue;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Challengers]", Challengers_i, true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.Challengers[Challengers_i] */
            if (0 > indent)
            {
                ret = this.Challengers[Challengers_i].visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.Challengers[Challengers_i].visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


public class Account : tsf4g_csharp_interface
{
    /* public members */
    public sbyte Plat; // 操作系统平台
    public byte[] OpenID; // openid

    /* construct methods */
    public Account()
    {
        OpenID = new byte[128];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Account.CURRVERSION < cutVer)
        {
            cutVer = Account.CURRVERSION;
        }

        /* check cutversion */
        if (Account.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Plat */
        {
            ret = destBuf.writeInt8(this.Plat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.OpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4OpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4OpenID = destBuf.getUsedSize();

            Int32 realSize4OpenID = TdrTypeUtil.cstrlen(this.OpenID);

            if (realSize4OpenID >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.OpenID, realSize4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.OpenID */
            Int32 size4OpenID = destBuf.getUsedSize() - beginPos4OpenID;
            ret = destBuf.writeUInt32((UInt32)(size4OpenID), sizePos4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Account.CURRVERSION < cutVer)
        {
            cutVer = Account.CURRVERSION;
        }

        /* check cutversion */
        if (Account.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Plat */
        {
            ret = srcBuf.readInt8(ref this.Plat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.OpenID */
        {
            /* get sizeinfo for this.OpenID */
            UInt32 size4OpenID = 0;
            ret = srcBuf.readUInt32(ref size4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4OpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4OpenID > this.OpenID.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4OpenID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.OpenID, (int)size4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.OpenID[(int)size4OpenID - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4OpenID = TdrTypeUtil.cstrlen(this.OpenID) + 1;
            if (size4OpenID != realSize4OpenID)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Account.CURRVERSION < cutVer)
        {
            cutVer = Account.CURRVERSION;
        }

        /* check cutversion */
        if (Account.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Plat */
        {
            ret = srcBuf.readInt8(ref this.Plat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.OpenID */
        {
            Int32 size4OpenID = 128;

            /* load */
            ret = srcBuf.readCString(ref this.OpenID, (int)size4OpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Plat */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Plat]", "0x{0:x2}", this.Plat);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.OpenID */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[OpenID]", this.OpenID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 未知额外数据 */
public class MailAccNoData : tsf4g_csharp_interface
{
    /* public members */
    public sbyte Reserve; // 保留

    /* construct methods */
    public MailAccNoData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccNoData.CURRVERSION < cutVer)
        {
            cutVer = MailAccNoData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccNoData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Reserve */
        {
            ret = destBuf.writeInt8(this.Reserve);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccNoData.CURRVERSION < cutVer)
        {
            cutVer = MailAccNoData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccNoData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Reserve */
        {
            ret = srcBuf.readInt8(ref this.Reserve);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccNoData.CURRVERSION < cutVer)
        {
            cutVer = MailAccNoData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccNoData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Reserve */
        {
            ret = srcBuf.readInt8(ref this.Reserve);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Reserve */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Reserve]", "0x{0:x2}", this.Reserve);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 道具数据 */
public class MailAccItemData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ItemNO; // 道具编号
    public UInt32 ItemCnt; // 道具数量

    /* construct methods */
    public MailAccItemData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccItemData.CURRVERSION < cutVer)
        {
            cutVer = MailAccItemData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccItemData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ItemNO */
        {
            ret = destBuf.writeUInt32(this.ItemNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ItemCnt */
        {
            ret = destBuf.writeUInt32(this.ItemCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccItemData.CURRVERSION < cutVer)
        {
            cutVer = MailAccItemData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccItemData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ItemNO */
        {
            ret = srcBuf.readUInt32(ref this.ItemNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ItemCnt */
        {
            ret = srcBuf.readUInt32(ref this.ItemCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccItemData.CURRVERSION < cutVer)
        {
            cutVer = MailAccItemData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccItemData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ItemNO */
        {
            ret = srcBuf.readUInt32(ref this.ItemNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ItemCnt */
        {
            ret = srcBuf.readUInt32(ref this.ItemCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ItemNO */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ItemNO]", "{0:d}", this.ItemNO);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.ItemCnt */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ItemCnt]", "{0:d}", this.ItemCnt);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 角色数据 */
public class MailAccRoleData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 RoleNO; // 主角编号
    public byte EnhanceLevel; // 强化等级

    /* construct methods */
    public MailAccRoleData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccRoleData.CURRVERSION < cutVer)
        {
            cutVer = MailAccRoleData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccRoleData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.RoleNO */
        {
            ret = destBuf.writeUInt32(this.RoleNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnhanceLevel */
        {
            ret = destBuf.writeUInt8(this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccRoleData.CURRVERSION < cutVer)
        {
            cutVer = MailAccRoleData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccRoleData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.RoleNO */
        {
            ret = srcBuf.readUInt32(ref this.RoleNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccRoleData.CURRVERSION < cutVer)
        {
            cutVer = MailAccRoleData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccRoleData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.RoleNO */
        {
            ret = srcBuf.readUInt32(ref this.RoleNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.RoleNO */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[RoleNO]", "{0:d}", this.RoleNO);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnhanceLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnhanceLevel]", "0x{0:x2}", this.EnhanceLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 宠物数据 */
public class MailAccPetData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 PetNO; // 宠物编号
    public byte EnhanceLevel; // 强化等级

    /* construct methods */
    public MailAccPetData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccPetData.CURRVERSION < cutVer)
        {
            cutVer = MailAccPetData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccPetData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.PetNO */
        {
            ret = destBuf.writeUInt32(this.PetNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnhanceLevel */
        {
            ret = destBuf.writeUInt8(this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccPetData.CURRVERSION < cutVer)
        {
            cutVer = MailAccPetData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccPetData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.PetNO */
        {
            ret = srcBuf.readUInt32(ref this.PetNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccPetData.CURRVERSION < cutVer)
        {
            cutVer = MailAccPetData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccPetData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.PetNO */
        {
            ret = srcBuf.readUInt32(ref this.PetNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.PetNO */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[PetNO]", "{0:d}", this.PetNO);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnhanceLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnhanceLevel]", "0x{0:x2}", this.EnhanceLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 装备数据 */
public class MailAccEquipData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 EquipNO; // 装备编号
    public byte EnhanceLevel; // 强化等级

    /* construct methods */
    public MailAccEquipData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccEquipData.CURRVERSION < cutVer)
        {
            cutVer = MailAccEquipData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccEquipData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.EquipNO */
        {
            ret = destBuf.writeUInt32(this.EquipNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.EnhanceLevel */
        {
            ret = destBuf.writeUInt8(this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccEquipData.CURRVERSION < cutVer)
        {
            cutVer = MailAccEquipData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccEquipData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.EquipNO */
        {
            ret = srcBuf.readUInt32(ref this.EquipNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccEquipData.CURRVERSION < cutVer)
        {
            cutVer = MailAccEquipData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccEquipData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.EquipNO */
        {
            ret = srcBuf.readUInt32(ref this.EquipNO);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.EnhanceLevel */
        {
            ret = srcBuf.readUInt8(ref this.EnhanceLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.EquipNO */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EquipNO]", "{0:d}", this.EquipNO);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.EnhanceLevel */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[EnhanceLevel]", "0x{0:x2}", this.EnhanceLevel);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 钻石数据 */
public class MailAccDiamondData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Count; // 钻石数量

    /* construct methods */
    public MailAccDiamondData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccDiamondData.CURRVERSION < cutVer)
        {
            cutVer = MailAccDiamondData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccDiamondData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Count */
        {
            ret = destBuf.writeUInt32(this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccDiamondData.CURRVERSION < cutVer)
        {
            cutVer = MailAccDiamondData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccDiamondData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccDiamondData.CURRVERSION < cutVer)
        {
            cutVer = MailAccDiamondData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccDiamondData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Count */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Count]", "{0:d}", this.Count);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 金币数据 */
public class MailAccGoldData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Count; // 金币数量

    /* construct methods */
    public MailAccGoldData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccGoldData.CURRVERSION < cutVer)
        {
            cutVer = MailAccGoldData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccGoldData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Count */
        {
            ret = destBuf.writeUInt32(this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccGoldData.CURRVERSION < cutVer)
        {
            cutVer = MailAccGoldData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccGoldData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccGoldData.CURRVERSION < cutVer)
        {
            cutVer = MailAccGoldData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccGoldData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Count */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Count]", "{0:d}", this.Count);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 爱心数据 */
public class MailAccHeartData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Count; // 爱心数量

    /* construct methods */
    public MailAccHeartData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccHeartData.CURRVERSION < cutVer)
        {
            cutVer = MailAccHeartData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccHeartData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Count */
        {
            ret = destBuf.writeUInt32(this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccHeartData.CURRVERSION < cutVer)
        {
            cutVer = MailAccHeartData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccHeartData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccHeartData.CURRVERSION < cutVer)
        {
            cutVer = MailAccHeartData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccHeartData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Count */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Count]", "{0:d}", this.Count);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 钥匙额外数据 */
public class MailAccKeyData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 Count; // 钥匙数量

    /* construct methods */
    public MailAccKeyData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccKeyData.CURRVERSION < cutVer)
        {
            cutVer = MailAccKeyData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccKeyData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.Count */
        {
            ret = destBuf.writeUInt32(this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccKeyData.CURRVERSION < cutVer)
        {
            cutVer = MailAccKeyData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccKeyData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccKeyData.CURRVERSION < cutVer)
        {
            cutVer = MailAccKeyData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccKeyData.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.Count */
        {
            ret = srcBuf.readUInt32(ref this.Count);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.Count */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[Count]", "{0:d}", this.Count);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 附件数据union */
public class MailAccesoryDataUnion
{
    /* public members */
    public MailAccNoData MailAccNoData; // 未知数据
    public MailAccItemData MailAccItemData; // 道具数据
    public MailAccRoleData MailAccRoleData; // 角色数据
    public MailAccPetData MailAccPetData; // 宠物数据
    public MailAccEquipData MailAccEquipData; // 装备数据
    public MailAccDiamondData MailAccDiamondData; // 钻石数据
    public MailAccGoldData MailAccGoldData; // 金币数据
    public MailAccHeartData MailAccHeartData; // 爱心数据
    public MailAccKeyData MailAccKeyData; // 钥匙数据

    /* public methods */
    public MailAccesoryDataUnion()
    {
        MailAccNoData = null;
        MailAccItemData = null;
        MailAccRoleData = null;
        MailAccPetData = null;
        MailAccEquipData = null;
        MailAccDiamondData = null;
        MailAccGoldData = null;
        MailAccHeartData = null;
        MailAccKeyData = null;
    }

    /*   Construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.MailAccNoData)
            {
                this.MailAccNoData = new MailAccNoData();
            }

            ret = this.MailAccNoData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.MailAccItemData)
            {
                this.MailAccItemData = new MailAccItemData();
            }

            ret = this.MailAccItemData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (null == this.MailAccRoleData)
            {
                this.MailAccRoleData = new MailAccRoleData();
            }

            ret = this.MailAccRoleData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (3 == selector)
        {
            if (null == this.MailAccPetData)
            {
                this.MailAccPetData = new MailAccPetData();
            }

            ret = this.MailAccPetData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (4 == selector)
        {
            if (null == this.MailAccEquipData)
            {
                this.MailAccEquipData = new MailAccEquipData();
            }

            ret = this.MailAccEquipData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (5 == selector)
        {
            if (null == this.MailAccDiamondData)
            {
                this.MailAccDiamondData = new MailAccDiamondData();
            }

            ret = this.MailAccDiamondData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (6 == selector)
        {
            if (null == this.MailAccGoldData)
            {
                this.MailAccGoldData = new MailAccGoldData();
            }

            ret = this.MailAccGoldData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (7 == selector)
        {
            if (null == this.MailAccHeartData)
            {
                this.MailAccHeartData = new MailAccHeartData();
            }

            ret = this.MailAccHeartData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (8 == selector)
        {
            if (null == this.MailAccKeyData)
            {
                this.MailAccKeyData = new MailAccKeyData();
            }

            ret = this.MailAccKeyData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /*   pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || MailAccesoryDataUnion.CURRVERSION < cutVer)
        {
            cutVer = MailAccesoryDataUnion.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccesoryDataUnion.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.MailAccNoData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccNoData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.MailAccItemData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccItemData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (null == this.MailAccRoleData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccRoleData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (3 == selector)
        {
            if (null == this.MailAccPetData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccPetData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (4 == selector)
        {
            if (null == this.MailAccEquipData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccEquipData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (5 == selector)
        {
            if (null == this.MailAccDiamondData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccDiamondData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (6 == selector)
        {
            if (null == this.MailAccGoldData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccGoldData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (7 == selector)
        {
            if (null == this.MailAccHeartData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccHeartData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (8 == selector)
        {
            if (null == this.MailAccKeyData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.MailAccKeyData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || MailAccesoryDataUnion.CURRVERSION < cutVer)
        {
            cutVer = MailAccesoryDataUnion.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccesoryDataUnion.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.MailAccNoData)
            {
                this.MailAccNoData = new MailAccNoData();
            }

            ret = this.MailAccNoData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.MailAccItemData)
            {
                this.MailAccItemData = new MailAccItemData();
            }

            ret = this.MailAccItemData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (null == this.MailAccRoleData)
            {
                this.MailAccRoleData = new MailAccRoleData();
            }

            ret = this.MailAccRoleData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (3 == selector)
        {
            if (null == this.MailAccPetData)
            {
                this.MailAccPetData = new MailAccPetData();
            }

            ret = this.MailAccPetData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (4 == selector)
        {
            if (null == this.MailAccEquipData)
            {
                this.MailAccEquipData = new MailAccEquipData();
            }

            ret = this.MailAccEquipData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (5 == selector)
        {
            if (null == this.MailAccDiamondData)
            {
                this.MailAccDiamondData = new MailAccDiamondData();
            }

            ret = this.MailAccDiamondData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (6 == selector)
        {
            if (null == this.MailAccGoldData)
            {
                this.MailAccGoldData = new MailAccGoldData();
            }

            ret = this.MailAccGoldData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (7 == selector)
        {
            if (null == this.MailAccHeartData)
            {
                this.MailAccHeartData = new MailAccHeartData();
            }

            ret = this.MailAccHeartData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (8 == selector)
        {
            if (null == this.MailAccKeyData)
            {
                this.MailAccKeyData = new MailAccKeyData();
            }

            ret = this.MailAccKeyData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = load(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   load function */
    public TdrError.ErrorType load(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        /* adjust cutversion */
        if (0 == cutVer || MailAccesoryDataUnion.CURRVERSION < cutVer)
        {
            cutVer = MailAccesoryDataUnion.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccesoryDataUnion.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.MailAccNoData)
            {
                this.MailAccNoData = new MailAccNoData();
            }

            ret = this.MailAccNoData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.MailAccItemData)
            {
                this.MailAccItemData = new MailAccItemData();
            }

            ret = this.MailAccItemData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (null == this.MailAccRoleData)
            {
                this.MailAccRoleData = new MailAccRoleData();
            }

            ret = this.MailAccRoleData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (3 == selector)
        {
            if (null == this.MailAccPetData)
            {
                this.MailAccPetData = new MailAccPetData();
            }

            ret = this.MailAccPetData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (4 == selector)
        {
            if (null == this.MailAccEquipData)
            {
                this.MailAccEquipData = new MailAccEquipData();
            }

            ret = this.MailAccEquipData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (5 == selector)
        {
            if (null == this.MailAccDiamondData)
            {
                this.MailAccDiamondData = new MailAccDiamondData();
            }

            ret = this.MailAccDiamondData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (6 == selector)
        {
            if (null == this.MailAccGoldData)
            {
                this.MailAccGoldData = new MailAccGoldData();
            }

            ret = this.MailAccGoldData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (7 == selector)
        {
            if (null == this.MailAccHeartData)
            {
                this.MailAccHeartData = new MailAccHeartData();
            }

            ret = this.MailAccHeartData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (8 == selector)
        {
            if (null == this.MailAccKeyData)
            {
                this.MailAccKeyData = new MailAccKeyData();
            }

            ret = this.MailAccKeyData.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    TdrError.ErrorType visualize(Int64 selector, ref string buffer, int indent, char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(selector, ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /*   visualize function */
    public TdrError.ErrorType visualize(Int64 selector, ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.MailAccNoData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccNoData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccNoData */
            if (0 > indent)
            {
                ret = this.MailAccNoData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccNoData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.MailAccItemData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccItemData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccItemData */
            if (0 > indent)
            {
                ret = this.MailAccItemData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccItemData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (null == this.MailAccRoleData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccRoleData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccRoleData */
            if (0 > indent)
            {
                ret = this.MailAccRoleData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccRoleData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (3 == selector)
        {
            if (null == this.MailAccPetData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccPetData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccPetData */
            if (0 > indent)
            {
                ret = this.MailAccPetData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccPetData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (4 == selector)
        {
            if (null == this.MailAccEquipData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccEquipData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccEquipData */
            if (0 > indent)
            {
                ret = this.MailAccEquipData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccEquipData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (5 == selector)
        {
            if (null == this.MailAccDiamondData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccDiamondData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccDiamondData */
            if (0 > indent)
            {
                ret = this.MailAccDiamondData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccDiamondData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (6 == selector)
        {
            if (null == this.MailAccGoldData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccGoldData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccGoldData */
            if (0 > indent)
            {
                ret = this.MailAccGoldData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccGoldData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (7 == selector)
        {
            if (null == this.MailAccHeartData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccHeartData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccHeartData */
            if (0 > indent)
            {
                ret = this.MailAccHeartData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccHeartData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (8 == selector)
        {
            if (null == this.MailAccKeyData)
            {
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[MailAccKeyData]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* visualize children of this.MailAccKeyData */
            if (0 > indent)
            {
                ret = this.MailAccKeyData.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.MailAccKeyData.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* version infomation */
    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 邮件单个附件定义 */
public class MailAccessoryElem : tsf4g_csharp_interface
{
    /* public members */
    public Int32 accessoryType; // 附件类型
    public Int32 fetchTag;
    public MailAccesoryDataUnion accessoryData; // 附件数据

    /* construct methods */
    public MailAccessoryElem()
    {
        accessoryData = new MailAccesoryDataUnion();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccessoryElem.CURRVERSION < cutVer)
        {
            cutVer = MailAccessoryElem.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccessoryElem.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.accessoryType */
        {
            ret = destBuf.writeInt32(this.accessoryType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.fetchTag */
        {
            ret = destBuf.writeInt32(this.fetchTag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.accessoryData */
        {
            Int64 selector4accessoryData = this.accessoryType;
            ret = this.accessoryData.pack(selector4accessoryData, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccessoryElem.CURRVERSION < cutVer)
        {
            cutVer = MailAccessoryElem.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccessoryElem.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.accessoryType */
        {
            ret = srcBuf.readInt32(ref this.accessoryType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.fetchTag */
        {
            ret = srcBuf.readInt32(ref this.fetchTag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.accessoryData */
        {
            Int64 selector4accessoryData = this.accessoryType;
            ret = this.accessoryData.unpack(selector4accessoryData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccessoryElem.CURRVERSION < cutVer)
        {
            cutVer = MailAccessoryElem.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccessoryElem.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.accessoryType */
        {
            ret = srcBuf.readInt32(ref this.accessoryType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.fetchTag */
        {
            ret = srcBuf.readInt32(ref this.fetchTag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.accessoryData */
        {
            Int64 selector4accessoryData = this.accessoryType;
            ret = this.accessoryData.load(selector4accessoryData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.accessoryType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[accessoryType]", "{0:d}", this.accessoryType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.fetchTag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[fetchTag]", "{0:d}", this.fetchTag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.accessoryData */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[accessoryData]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize children of this.accessoryData */
        Int64 selector4accessoryData = this.accessoryType;
        if (0 > indent)
        {
            ret = this.accessoryData.visualize(selector4accessoryData, ref destBuf, indent, separator);
        } else
        {
            ret = this.accessoryData.visualize(selector4accessoryData, ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 邮件附件 */
public class MailAccessory : tsf4g_csharp_interface
{
    /* public members */
    public MailAccessoryElem mailAccessoryElem; // 邮件附件信息

    /* construct methods */
    public MailAccessory()
    {
        mailAccessoryElem = new MailAccessoryElem();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccessory.CURRVERSION < cutVer)
        {
            cutVer = MailAccessory.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccessory.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.mailAccessoryElem */
        {
            ret = this.mailAccessoryElem.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccessory.CURRVERSION < cutVer)
        {
            cutVer = MailAccessory.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccessory.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.mailAccessoryElem */
        {
            ret = this.mailAccessoryElem.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccessory.CURRVERSION < cutVer)
        {
            cutVer = MailAccessory.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccessory.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.mailAccessoryElem */
        {
            ret = this.mailAccessoryElem.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.mailAccessoryElem */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[mailAccessoryElem]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize children of this.mailAccessoryElem */
        if (0 > indent)
        {
            ret = this.mailAccessoryElem.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.mailAccessoryElem.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
