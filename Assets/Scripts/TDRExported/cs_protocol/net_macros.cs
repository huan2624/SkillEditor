/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: cb9c5ea3d7cc76d0ec4a17348c3a6864 */

/* creation time: Mon Jun 02 18:05:48 2014 */
/* tdr version: 2.6.7, build at 20131230 */

namespace net
{

public class  netMacros
{
    public const int MAX_OPENKEY_LEN = 64; // openkey的最大长度
    public const int MAX_IP_LEN = 20; // IP地址的最大长度
    public const int MAX_PF_LEN = 256; // pf的最大长度
    public const int MAX_PFKEY_LEN = 128; // pfkey的最大长度
    public const int MAX_TOKEN_LEN = 512; // open token的最大长度
    public const int MAX_LEVEL_COUNT_PER_CHAPTER = 15; // 大关内小关卡最大数量
    public const int MAX_CHAPTER_COUNT = 10; // 主线大关卡最大数量
    public const int MAX_BUFF_COUNT_IN_BATTLE = 4; // 最大buff数
    public const int MAX_BATTLE_LOTTERY_CARDS_COUNT = 4; // 抽卡次数上限
    public const int MAX_SHOP_LOTTERY_CARDS_COUNT = 10;
    public const int BOSS_CHANLLENGER_COUNT = 10;
    public const int MAX_BOSS_COUNT = 5;
    public const int MAX_WILL_CHANLLENGER_COUNT = 10; // 每日最大名将挑战次数
    public const int MAX_OPENID_LEN = 128; // openid的最大长度
    public const int MAX_RANK_PAGE_DATA_NUM = 32; // 排行榜每页最多的玩家数
    public const int MAX_ROLENAME_LEN = 48; // 玩家游戏内名称的最大长度
    public const int MAX_NICKNAME_LEN = 48; // 玩家昵称的最大长度
    public const int MAX_PORTRAIT_LEN = 128; // 玩家头像URL的最大长度
    public const int MAX_PET_MANUAL_NUM = 128; // 单场景图鉴最大数量
    public const int MAX_OWN_ROLE_NUM = 8; // 玩家拥有的主角最大数量
    public const int MAX_OWN_PET_NUM = 128; // 玩家拥有的宠物的最大数量
    public const int MAX_EQUIP_PER_ROLE = 5; // 主角装备数量
    public const int ENM_ROLE_ENHANCE_MAX_COUNT = 3; // 主角强化类型
    public const int MAX_PET_NUM_IN_TEAM = 4; // 玩家战斗时最多携带的宠物数量
    public const int MAX_EQUIP_NUM_PER_PET = 3; // 单个宠物最多可穿戴的装备数量
    public const int MAX_PET_FOR_COMPOSITE = 5; // 宠物合成需要最多的材料数量
    public const int MAX_PET_MANUAL_SCENE = 10; // 宠物图鉴的场景数量
    public const int MAIL_TITLE_MAX_SIZE = 72; // 邮件标题最大长度
    public const int MAIL_CONTENT_MAX_SIZE = 540; // 邮件正文最大长度
    public const int MAIL_MAX_TYPE_CNT = 10; // 邮件类型数目最大值
    public const int MAX_NOTICE_TITLE_LEN = 256; // 公告标题最大长度
    public const int MAX_NOTICE_CONTENT_LEN = 1024; // 公告内容最大长度
    public const int MAX_NOTICE_URL_LEN = 512; // 公告URL最大长度
    public const int MAX_NOTICE_COUNT = 50; // 公告最大数量
    public const int MAX_RESET_DOING_TASK_NUM = 16; // 玩家可清理的正在做的最大的任务个数
    public const int MAX_RESET_FINI_TASK_NUM = 16; // 玩家已做完的可清理的最大任务个数
    public const int MAX_ONCE_DOING_TASK_NUM = 300; // 玩家最大的正在做的任务
    public const int MAX_ONCE_FINI_TASK_NUM = 300; // 玩家已做完的最大任务个数
    public const int MAX_EVENT_STAT_NUM = 128; // 事件统计的最大数量
    public const int PLAYER_SLOT_NUM = 30; // 玩家拥有的用于装备的角色或宠物槽位索引
    public const int PLAYER_SLOT_EQUIP_TYPE_NUM = 5; // 一个角色槽位可装备的装备类型数量
    public const int INIT_GOODS_NUM = 60; // 玩家拥有的物品装备初始数量
    public const int INIT_EQUIP_NUM = 60; // 玩家拥有的物品装备初始数量
    public const int MAX_GOODS_NUM = 120; // 玩家拥有的物品装备最大数量
    public const int MAX_EQUIP_NUM = 120; // 玩家拥有的物品装备最大数量
    public const int MAX_EQUIP_ENHANCE_LEVEL = 15; // 装备强化最高等级
    public const int EQUIP_ENHANCE_PROBALITY_BASE = 10000; // 装备强化概率基数值
    public const int MAX_ADDTIONAL_INFO_NODE_NUM = 10; // 额外信息节点最大个数
    public const int MAX_ADDTIONAL_INFO_STR_LEN = 128; // 单个额外信息节点最大长度
    public const int CHAT_CONTENT_MAX_SIZE = 56; // 聊天内容最大长度
    public const int CHAT_MSGLIST_MAX_SIZE = 20; // 消息列表最大消息条数

    /* macros in macrogroup CS_CMD_ID */
    public const int CS_CMD_REQ_ACCOUNT_LOGIN = 11; // 请求帐号登录
    public const int CS_CMD_RES_ACCOUNT_LOGIN = 12; // 请求帐号登录返回
    public const int CS_CMD_REQ_ACCOUNT_LOGOUT = 13; // 请求帐号登出
    public const int CS_CMD_RES_ACCOUNT_LOGOUT = 14; // 请求帐号登出返回
    public const int CS_CMD_REQ_CREATE_ROLE = 15; // 请求创建角色
    public const int CS_CMD_RES_CREATE_ROLE = 16; // 请求创建角色res
    public const int CS_CMD_REQ_ROLE_NAME = 17; // 请求角色名
    public const int CS_CMD_RES_ROLE_NAME = 18; // 请求角色名res
    public const int CS_CMD_REQ_BASE_ATTR = 19; // 请求基本属性
    public const int CS_CMD_RES_BASE_ATTR = 20; // 请求基本属性res
    public const int CS_CMD_REQ_BALANCE = 21; // 充值后请求余额
    public const int CS_CMD_RES_BALANCE = 22; // 充值后请求余额res
    public const int CS_CMD_REQ_SHOP_BUY = 81; // 商店购买请求
    public const int CS_CMD_RES_SHOP_BUY = 82; // 商店购买应答
    public const int CS_CMD_REQ_PLAYER_EQUIP_INFO = 100; // 查询玩家装备信息
    public const int CS_CMD_RES_PLAYER_EQUIP_INFO = 101; // 返回玩家装备信息
    public const int CS_CMD_REQ_PLAYER_EXTEND_EQUIP_BAG = 102; // 扩展装备包裹
    public const int CS_CMD_RES_PLAYER_EXTEND_EQUIP_BAG = 103; // 扩展装备包裹的响应
    public const int CS_CMD_REQ_PLAYER_COMPOSE_EQUIP = 104; // 装备合成
    public const int CS_CMD_RES_PLAYER_COMPOSE_EQUIP = 105; // 装备合成响应
    public const int CS_CMD_REQ_PLAYER_ENHANCE_EQUIP = 106; // 装备强化
    public const int CS_CMD_RES_PLAYER_ENHANCE_EQUIP = 107; // 装备强化响应
    public const int CS_CMD_REQ_PLAYER_SELL_EQUIP = 108; // 装备售卖
    public const int CS_CMD_RES_PLAYER_SELL_EQUIP = 109; // 装备售卖
    public const int CS_CMD_REQ_TAKE_ON_EQUIP = 110; // 穿戴装备
    public const int CS_CMD_RES_TAKE_ON_EQUIP = 111; // 穿戴装备响应
    public const int CS_CMD_MAIL_SEND_REQ = 300; // 发送邮件
    public const int CS_CMD_MAIL_SEND_RES = 301; // 发送邮件响应消息
    public const int CS_CMD_MAIL_DEL_REQ = 302; // 删除邮件
    public const int CS_CMD_MAIL_DEL_RES = 303; // 删除邮件响应消息
    public const int CS_CMD_MAIL_GET_LIST_REQ = 304; // 获取邮件列表
    public const int CS_CMD_MAIL_GET_LIST_RES = 305; // 获取邮件列表响应
    public const int CS_CMD_MAIL_GET_DETAIL_REQ = 306; // 获取邮件详细信息
    public const int CS_CMD_MAIL_GET_DETAIL_RES = 307; // 获取邮件详细信息的响应消息
    public const int CS_CMD_MAIL_SET_STATUS_REQ = 308; // 设置邮件状态信息
    public const int CS_CMD_MAIL_SET_STATUS_RES = 309; // 设置邮件状态信息的响应消息
    public const int CS_CMD_MAIL_GET_COUNT_REQ = 310; // 获取邮件总数
    public const int CS_CMD_MAIL_GET_COUNT_RES = 311; // 获取邮件总数的响应消息
    public const int CS_CMD_MAIL_GET_ACCESSORY_REQ = 312; // 获取邮件附件
    public const int CS_CMD_MAIL_GET_ACCESSORY_RES = 313; // 获取邮件附件的响应消息
    public const int CS_CMD_MAIL_NOTIFY_NEW_MAIL = 314; // 通知收取到新邮件
    public const int CS_CMD_GET_FRIEND_RANK_REQ = 401; // 获取好友排行榜
    public const int CS_CMD_GET_FRIEND_RANK_RES = 402; // 获取好友排行榜
    public const int CS_CMD_NOTIFY_DEL_FRIEND_RANK = 403; // 通知客户端已删除的好友 (客户端已拉取过的被删除好友才通知)
    public const int CS_CMD_NOTIFY_CHG_FRIEND_RANK = 404; // 通知客户端数据有变化的好友
    public const int CS_CMD_GET_FRIEND_LIST_REQ = 450; // 获取好友列表
    public const int CS_CMD_GET_FRIEND_LIST_RES = 451; // 返回好友列表
    public const int CS_CMD_FRIEND_APPLY_LIST_REQ = 452; // 拉取已邀请列表请求
    public const int CS_CMD_FRIEND_APPLY_LIST_RES = 453; // 拉取已邀请列表回包
    public const int CS_CMD_FRIEND_WAIT_ACCEPT_LIST_REQ = 454; // 拉取等待接受列表请求
    public const int CS_CMD_FRIEND_WAIT_ACCEPT_LIST_RES = 455; // 拉取等待接受列表回包
    public const int CS_CMD_FRIEND_DELETE_INVITE_REQ = 456; // 删除邀请列表中一条记录
    public const int CS_CMD_FRIEND_DELETE_INVITE_RES = 457; // 删除邀请列表中一条记录返回
    public const int CS_CMD_FRIEND_DELETE_WAIT_ACCEPT_REQ = 458; // 删除等待邀请列表中一条记录
    public const int CS_CMD_FRIEND_DELETE_WAIT_ACCEPT_RES = 459; // 删除等待邀请列表中一条记录返回
    public const int CS_CMD_SEARCH_FRIEND_REQ = 460; // 查找好友，通过昵称加好友时使用
    public const int CS_CMD_SEARCH_FRIEND_RES = 461; // 查找好友返回
    public const int CS_CMD_ADD_FRIEND_REQ = 462; // 请求加好友
    public const int CS_CMD_ADD_FRIEND_RES = 463; // 加好友返回
    public const int CS_CMD_ACCEPT_FRIEND_REQ = 464; // 同意加好友
    public const int CS_CMD_ACCEPT_FRIEND_RES = 465; // 同意加好友返回
    public const int CS_CMD_DELETE_FRIEND_REQ = 466; // 请求删除好友
    public const int CS_CMD_DELETE_FRIEND_RES = 467; // 请求删除好友返回
    public const int CS_CMD_SEND_HEART_REQ = 468; // 请求送心
    public const int CS_CMD_SEND_HEART_RES = 469; // 请求送心返回
    public const int CS_CMD_VISIT_FRIEND_REQ = 470; // 请求访问好友
    public const int CS_CMD_VISIT_FRIEND_RES = 471; // 请求访问好友返回
    public const int CS_CMD_CONJURE_FRIEND_REQ = 472; // 请求召唤好友
    public const int CS_CMD_CONJURE_FRIEND_RES = 473; // 请求召唤好友返回
    public const int CS_CMD_REQ_GAME_PROGRESS_INFO = 500; // 查询玩家关卡进度信息
    public const int CS_CMD_RES_GAME_PROGRESS_INFO = 501; // 应答玩家关卡进度信息
    public const int CS_CMD_REQ_BATTLE_START = 502; // 挑战关卡请求
    public const int CS_CMD_RES_BATTLE_START = 503; // 挑战关卡应答
    public const int CS_CMD_REQ_BATTLE_END = 504; // 结束关卡请求
    public const int CS_CMD_RES_BATTLE_END = 505; // 结束关卡应答
    public const int CS_CMD_REQ_BATTLE_LOTTERY = 506; // 请求再抽一次
    public const int CS_CMD_RES_BATTLE_LOTTERY = 507; // 应答再抽一次
    public const int CS_CMD_REQ_REVIVE = 508; // 请求复活
    public const int CS_CMD_RES_REVIVE = 509; // 应答复活
    public const int CS_CMD_REQ_BUY_RANDOM_BUFF = 510; // 请求购买随机高级BUFF
    public const int CS_CMD_RES_BUY_RANDOM_BUFF = 511; // 应答购买随机高级BUFF
    public const int CS_CMD_REQ_SHOP_LOTTERY = 512; // 请求商店抽卡
    public const int CS_CMD_RES_SHOP_LOTTERY = 513; // 应答商店抽卡
    public const int CS_CMD_QUERY_BOSS_REQ = 514; // 查询BOSS请求
    public const int CS_CMD_QUERY_BOSS_RES = 515; // 查询BOSS响应
    public const int CS_CMD_QUERY_FRIEND_BOSS_REQ = 516; // 查询好友求援BOSS请求
    public const int CS_CMD_QUERY_FRIEND_BOSS_RES = 517; // 查询好友求援BOSS响应
    public const int CS_CMD_CHALLENGE_BOSS_REQ = 518; // 挑战BOSS请求
    public const int CS_CMD_CHALLENGE_BOSS_RES = 519; // 挑战BOSS请求
    public const int CS_CMD_CHALLENGE_FRIEND_BOSS_REQ = 520; // 挑战好友BOSS请求
    public const int CS_CMD_CHALLENGE_FRIEND_BOSS_RES = 521; // 挑战好友BOSS应答
    public const int CS_CMD_SETTLE_BOSS_REQ = 522; // 挑战BOSS结算请求
    public const int CS_CMD_SETTLE_BOSS_RES = 523; // 挑战BOSS结算应答
    public const int CS_CMD_SETTLE_FRIEND_BOSS_REQ = 524; // 挑战好友BOSS结算请求
    public const int CS_CMD_SETTLE_FRIEND_BOSS_RES = 525; // 挑战好友BOSS结算应答
    public const int CS_CMD_BOSS_GAME_REVIVE_REQ = 526; // BOSS战中复活请求
    public const int CS_CMD_BOSS_GAME_REVIVE_RES = 527; // BOSS战中复活应答
    public const int CS_CMD_BOSS_HELP_REQ = 528; // BOSS战中复活应答
    public const int CS_CMD_BOSS_HELP_RES = 529; // BOSS战中复活应答
    public const int CS_CMD_CHALLENGE_GET_INFO_REQ = 530; // 查询挑战相关信息
    public const int CS_CMD_CHALLENGE_GET_INFO_RES = 531; // 响应查询挑战相关信息
    public const int CS_CMD_CHALLENGE_BEGIN_REQ = 532; // 请求开始挑战
    public const int CS_CMD_CHALLENGE_BEGIN_RES = 533; // 响应开始挑战
    public const int CS_CMD_CHALLENGE_SETTLEMENT_REQ = 534; // 请求挑战结算
    public const int CS_CMD_CHALLENGE_SETTLEMENT_RES = 535; // 响应挑战结算
    public const int CS_CMD_CHALLENGE_RENEW_TIMES_REQ = 536; // 请求快速恢复挑战次数
    public const int CS_CMD_CHALLENGE_RENEW_TIMES_RES = 537; // 响应快速恢复挑战次数
    public const int CS_CMD_CHALLENGE_REVIVE_REQ = 538; // 请求复活
    public const int CS_CMD_CHALLENGE_REVIVE_RES = 539; // 响应复活
    public const int CS_CMD_GET_TASK_LIST_REQ = 601; // 获取任务列表请求
    public const int CS_CMD_GET_TASK_LIST_RES = 602; // 获取任务列表响应
    public const int CS_CMD_GET_TASK_AWARD_REQ = 603; // 获取任务奖励请求
    public const int CS_CMD_GET_TASK_AWARD_RES = 604; // 获取任务奖励响应
    public const int CS_CMD_GET_ALL_TASK_AWARD_REQ = 605; // 获取所有的任务的奖励请求
    public const int CS_CMD_GET_ALL_TASK_AWARD_RES = 606; // 获取所有的任务的奖励响应
    public const int CS_CMD_EXEC_GM = 610; // 请求执行GM命令
    public const int CS_CMD_DISPLAY_GM_MSG = 611; // 执行GM命令后显示的文本信息
    public const int CS_CMD_PET_STRENGTHEN_REQ = 701; // 宠物强化请求
    public const int CS_CMD_PET_COMPOSITE_REQ = 702; // 宠物合成请求
    public const int CS_CMD_PET_UPGRADE_REQ = 703; // 宠物升级请求
    public const int CS_CMD_PET_CHANGE_POS_REQ = 704; // 宠物变更位置请求
    public const int CS_CMD_PET_EXTEND_BAG_REQ = 706; // 付费扩展宠物包裹请求
    public const int CS_CMD_PET_SELL_REQ = 707; // 出售宠物请求
    public const int CS_CMD_PET_GET_LIST_REQ = 708; // 获取宠物列表
    public const int CS_CMD_PET_GET_MANUAL_REQ = 709; // 获取宠物图鉴信息
    public const int CS_CMD_PET_STRENGTHEN_RES = 711; // 宠物强化响应
    public const int CS_CMD_PET_COMPOSITE_RES = 712; // 宠物合成响应
    public const int CS_CMD_PET_UPGRADE_RES = 713; // 宠物升级响应
    public const int CS_CMD_PET_CHANGE_POS_RES = 714; // 宠物变更位置响应
    public const int CS_CMD_PET_EXTEND_BAG_RES = 716; // 付费扩展宠物包裹响应
    public const int CS_CMD_PET_SELL_RES = 717; // 出售宠物响应
    public const int CS_CMD_PET_GET_LIST_RES = 718; // 返回宠物列表
    public const int CS_CMD_PET_GET_MANUAL_RES = 720; // 获取宠物图鉴信息响应
    public const int CS_CMD_NOTIFY_CLIENT_MESSAGE = 730; // 通知客户端信息
    public const int CS_CMD_BUY_ROLE_REQ = 800; // CSBuyRoleReq
    public const int CS_CMD_BUY_ROLE_RES = 801; // CSBuyRoleRes
    public const int CS_CMD_BUY_ROLE_LEVEL_REQ = 802; // CSBuyRoleLevelReq
    public const int CS_CMD_BUY_ROLE_LEVEL_RES = 803; // CSBuyRoleLevelRes
    public const int CS_CMD_ROLE_ENHANCE_REQ = 804; // CSRoleEnhanceReq
    public const int CS_CMD_ROLE_ENHANCE_RES = 805; // CSRoleEnhanceRes
    public const int CS_CMD_ROLE_STAR_UP_REQ = 806; // CSRoleStarUpReq
    public const int CS_CMD_ROLE_STAR_UP_RES = 807; // CSRoleStarUpRes
    public const int CS_CMD_CHG_ONPLAY_ROLE_REQ = 808; // CSChgOnPlayRoleReq
    public const int CS_CMD_CHG_ONPLAY_ROLE_RES = 809; // CSChgOnPlayRoleRes
    public const int CS_CMD_GET_ROLE_LIST_REQ = 810; // CSGetRoleListReq
    public const int CS_CMD_GET_ROLE_LIST_RES = 811; // CSGetRoleListRes
    public const int CS_CMD_ROLE_ADD_EQUIP_REQ = 812; // CSRoleAddEquipReq
    public const int CS_CMD_ROLE_ADD_EQUIP_RES = 813; // CSRoleAddEquipRes
    public const int CS_GET_NOTICE_REQ = 901; // 请求拉取公告信息
    public const int CS_GET_NOTICE_RES = 902; // 拉取公告信息的返回消息
    public const int CS_NOTICE_PLAY_NOTIFY = 903; // 公告已经播放的notify消息
    public const int CS_CMD_GET_CHAT_MSG_REQ = 951; // 获取指定类型聊天消息请求
    public const int CS_CMD_GET_CHAT_MSG_RES = 952; // 获取指定类型聊天消息应答
    public const int CS_CMD_SEND_CHAT_MSG_REQ = 953; // 发送聊天消息请求
    public const int CS_CMD_SEND_CHAT_MSG_RES = 954; // 发送聊天消息请求应答
    public const int CS_CMD_CLOSE_CHAT_UI_REQ = 955; // 用户关闭聊天界面或收到notify聊天消息时已离开聊天界面，则由客户端调用本协议通知服务端更新状态
    public const int CS_CMD_CLOSE_CHAT_UI_RES = 956; // 关闭聊天UI应答
    public const int CS_CMD_OPEN_ROLL_UI_REQ = 957; // 用户打开滚动消息展示界面
    public const int CS_CMD_CLOSE_ROLL_UI_REQ = 958; // 用户关闭滚动消息展示界面
    public const int CS_CMD_REALY_ROLL_MSG_NOTIFY = 998; // 服务端转发需滚动展示消息到客户端（notify）
    public const int CS_CMD_REALY_CHAT_MSG_NOTIFY = 999; // 服务端转发聊天消息到客户端（notify）

    /* macros in macrogroup PLAT_ID */
    public const int PID_INVALID = -1; // Invalid
    public const int PID_IOS = 1; // iOS
    public const int PID_ANDROID = 2; // Android

    /* macros in macrogroup AUTH_TYPE */
    public const int AUTH_TYPE_NONE = 0; // none
    public const int AUTH_TYPE_WX_ATK = 1; // WX access token
    public const int AUTH_TYPE_WX_RTK = 2; // WX refresh token
    public const int AUTH_TYPE_QQ_ATK = 3; // QQ access token

    /* macros in macrogroup NAME_TYPE */
    public const int NAME_TYPE_ROLE = 0; // rolename

    /* macros in macrogroup GAME_DIFFICULTY */
    public const int E_GD_NONE = 0; // 无资格
    public const int E_GD_READY = 1; // 可挑战
    public const int E_GD_EASY = 2; // 简单
    public const int E_GD_NORMAL = 3; // 普通
    public const int E_GD_HARD = 4; // 困难

    /* macros in macrogroup BATTLE_RESULT */
    public const int E_BATRES_NONE = 0; // 挑战未完成
    public const int E_BATRES_WIN = 1; // 挑战成功
    public const int E_BATRES_FAIL = 2; // 挑战失败
    public const int E_BATRES_SETTLEMENT_INVALID = 3; // 结算无效

    /* macros in macrogroup GAME_CS_RETCODE */
    public const int E_GRET_ERROR = -1; // 其它错误
    public const int E_GRET_OK = 0;
    public const int E_GRET_INVALID_GAME_PROGRESS = 1; // 客户端与服务器关卡进度信息不一致
    public const int E_GRET_HAS_NO_KEY = 2; // 玩家没有钥匙
    public const int E_GRET_HAS_NO_BAG = 3; // 玩家包裹空格不足
    public const int E_GRET_HAS_NO_ENOUGH_MONEY = 4; // 玩家金钱不足
    public const int E_GRET_SETTLEMENT_INVALID = 5; // 结算无效
    public const int E_GRET_REVIVE_COUNT_OVER = 6; // 复活次数用完

    /* macros in macrogroup GAME_BATTLE_TYPE */
    public const int E_GBT_NONE = 0;
    public const int E_GBT_MAIN_LEVEL = 1; // 主线关卡
    public const int E_GBT_BOSS = 2; // BOSS战
    public const int E_GBT_ENDLESS = 3; // 无尽模式

    /* macros in macrogroup SHOP_LOTTERY_TYPE */
    public const int E_SLT_DIAMOND_10 = 1; // 钻石10连抽
    public const int E_SLT_DIAMOND_1 = 2; // 钻石抽1张
    public const int E_SLT_GOLD_10 = 3; // 金币10连抽
    public const int E_SLT_GOLD_1 = 4; // 金币抽1张

    /* macros in macrogroup EnmRoleEnhanceType */
    public const int ENM_ROLE_ENHANCE_TYPE_ATTACK = 1; // 攻击力
    public const int ENM_ROLE_ENHANCE_TYPE_DEFENCE = 2; // 防御力
    public const int ENM_ROLE_ENHANCE_TYPE_HP = 3; // 血量

    /* macros in macrogroup TEAMSTATUS */
    public const int TEAM_NONE = 0; // 未出战
    public const int PET_TEAM_PLAYED_FIRST = 1; // 宠物出战1
    public const int PET_TEAM_PLAYED_SECOND = 2; // 宠物出战2
    public const int PET_TEAM_RESERVE_FIRST = 11; // 宠物替补1
    public const int PET_TEAM_RESERVE_SECOND = 12; // 宠物替补2
    public const int ROLE_TEAM_STATUS_ON = 21; // 主角出战

    /* macros in macrogroup OPERATERRESULT */
    public const int RESULT_FAILED = 0; // 失败
    public const int RESULT_SUCCESS = 1; // 成功

    /* macros in macrogroup PETMANUALSCENE */
    public const int PET_MANUAL_SCENE_STORE = 0; // 商城

    /* macros in macrogroup MAILSTATUS */
    public const int MAIL_STATUS_NEW = 0; // 新邮件
    public const int MAIL_STATUS_READED = 1; // 邮件已读

    /* macros in macrogroup MAILTYPE */
    public const int MAIL_TYPE_UNKNOWN = 0; // 未知邮件类型
    public const int MAIL_TYPE_USER_MESSAGE = 1; // 用户信息邮件
    public const int MAIL_TYPE_SYSTEM_ACCESSORY = 2; // 系统附件邮件

    /* macros in macrogroup MAILSUBTYPE */
    public const int MAIL_SUB_TYPE_UNKNOWN = 0; // 未知邮件子类型

    /* macros in macrogroup MAILACCESSORYTYPE */
    public const int ACCESSORY_UNKNOWN = 0; // 未知类型
    public const int ACCESSORY_ITEM = 1; // 附件道具
    public const int ACCESSORY_ROLE = 2; // 角色
    public const int ACCESSORY_PET = 3; // 宠物
    public const int ACCESSORY_EQUIP = 4; // 装备
    public const int ACCESSORY_DIAMOND = 5; // 钻石
    public const int ACCESSORY_GOLD = 6; // 金币
    public const int ACCESSORY_HEART = 7; // 爱心
    public const int ACCESSORY_KEY = 8; // 钥匙

    /* macros in macrogroup MAILSOURCE */
    public const int MAIL_SRC_GENERAL = 0; // 通用
    public const int MAIL_SRC_TASK = 1; // 任务奖励
    public const int MAIL_SRC_DAILY_SIGN = 2; // 每日签到
    public const int MAIL_SRC_ACHIEVEMENT = 3; // 成就奖励

    /* macros in macrogroup MAILACCESSORYFETCHTAG */
    public const int ACCESSORY_UNFETCHED = 0; // 附件尚未被提取
    public const int ACCESSORY_FETCHED = 1; // 附件已经被提取

    /* macros in macrogroup NOTICETYPE */
    public const int NOTICETYPE_LOGINNOTICE = 0; // 登录公告
    public const int NOTICETYPE_ROLLNOTICE = 1; // 滚动公告
    public const int NOTICETYPE_COUNT = 2; // 公告类型总数

    /* macros in macrogroup NOTICECONTENTTYPE */
    public const int NOTICE_CONTENT_TEXT = 0; // 公告内容是文本
    public const int NOTICE_CONTENT_URL = 1; // 公告内容是URL
    public const int NOTICE_CONTENT_HTML = 2; // 公告内容是HTML

    /* macros in macrogroup EquipType */
    public const int MACRO_EQUIP_TYPE_WEAPON = 1; // 武器
    public const int MACRO_EQUIP_TYPE_CLOTH = 2; // 衣服
    public const int MACRO_EQUIP_TYPE_SHOE = 3; // 鞋子
    public const int MACRO_EQUIP_TYPE_RING = 4; // 戒指
    public const int MACRO_EQUIP_TYPE_NECKLACE = 5; // 项链

    /* macros in macrogroup EquipAttrType */
    public const int MACRO_EQUIP_ATTR_BASE_ATTACK = 1; // 附加攻击力
    public const int MACRO_EQUIP_ATTR_BASE_DEFENCE = 2; // 附加防御力
    public const int MACRO_EQUIP_ATTR_HP = 3; // 附加生命值
    public const int MACRO_EQUIP_ATTR_BASE_ATTACK_PERCENT = 4; // 百分比攻击力
    public const int MACRO_EQUIP_ATTR_BASE_DEFENCE_PERCENT = 5; // 百分比防御力
    public const int MACRO_EQUIP_ATTR_HP_PERCENT = 6; // 百分比生命值
    public const int MACRO_EQUIP_ATTR_CRIT = 7; // 暴击
    public const int MACRO_EQUIP_ATTR_HARD_STRAIGHT = 8; // 硬直
    public const int MACRO_EQUIP_ATTR_FELL_GROUND = 9; // 倒地
    public const int MACRO_EQUIP_ATTR_FLOAT = 10; // 浮空
    public const int MACRO_EQUIP_ATTR_CRIT_REDUCE = 11; // 暴击抵抗
    public const int MACRO_EQUIP_ATTR_HARD_STRAIGHT_REDUCE = 12; // 硬直抵抗
    public const int MACRO_EQUIP_ATTR_FELL_GROUND_REDUCE = 13; // 倒地抵抗
    public const int MACRO_EQUIP_ATTR_FLOAT_REDUCE = 14; // 浮空抵抗
    public const int MACRO_EQUIP_ATTR_DIRECT_HARM = 15; // 直接伤害
    public const int MACRO_EQUIP_ATTR_DIRECT_HARM_REDUCE = 16; // 伤害豁免

    /* macros in macrogroup EquipStatus */
    public const int MACRO_EQUIP_STATUS_IDLE = 0; // 装备空闲状态
    public const int MACRO_EQUIP_STATUS_USED = 1; // 装备已经装备状态

    /* macros in macrogroup ENMSETDATETYPE */
    public const int ESDT_NONE = 0;
    public const int ESDT_STRING1 = 1;
    public const int ESDT_STRING2 = 2;
    public const int ESDT_STRING3 = 3;
    public const int ESDT_STRING4 = 4;
    public const int ESDT_STRING5 = 5;
    public const int ESDT_STRING6 = 6;
    public const int ESDT_STRING7 = 7;
    public const int ESDT_STRING8 = 8;
    public const int ESDT_STRING9 = 9;
    public const int ESDT_STRING10 = 10;

    /* macros in macrogroup ERankType */
    public const int RANK_TYPE_UNLIMIT = 0; // 无尽模式
    public const int RANK_TYPE_PVP = 1; // Pvp模式
    public const int RANK_TYPE_BOSS = 2; // 打BOSS模式

    /* macros in macrogroup EChatType */
    public const int CHAT_TYPE_NONE = 0; // 非消息类型
    public const int CHAT_TYPE_WORLD_BROADCAST = 1; // 世界广播消息
    public const int CHAT_TYPE_CHANNEL_PUBLIC = 2; // 公众频道消息
    public const int CHAT_TYPE_CHANNEL_FACTION = 3; // 帮派频道消息
    public const int CHAT_TYPE_CHANNEL_SYSTEM = 4; // 系统频道消息
    public const int CHAT_TYPE_PEER_PEER = 5; // 点对点消息
    public const int CHAT_TYPE_ROLL_MSG = 6; // 滚动展示消息

    /* macros in macrogroup ECtrlBit */
    public const int CHAT_USER_CTRL_BIT_MASK_BLACKNAME = 1; // 黑名单掩码位，该位如果为1，不允许发言
    public const int CHAT_USER_CTRL_BIT_MASK_WIFIONLY = 2; // wifi下才接收广播掩码位
    public const int CHAT_USER_CTRL_BIT_MASK_CHANNEL_PUBLIC = 4; // 公告频道掩码位，该位为1则屏蔽接收该频道消息

    /* macros in macrogroup ECtrlOp */
    public const int CHAT_USER_CTRL_BIT_NOCHANGE = -1; // 不涉及，没有变化
    public const int CHAT_USER_CTRL_BIT_CLEAR = 0; // 清除
    public const int CHAT_USER_CTRL_BIT_SET = 1; // 设置

    public const int CS_MAX_EQUIP_LIST_NUM = 120; // 玩家最大装备数量
    public const int CS_MAX_EQUIP_PAIRATTR_COUNT = 8; // 最大打造附加属性个数
    public const int CS_MAX_EQUIP_PET_SLOT = 5; // 每个槽位最多拥有装备数
    public const int MAX_COMM_NOTIFY_PKG_LIST_COUNT = 10;

    /* macros in macrogroup COMM_NOTIFY_PKG_TYPE */
    public const int E_CNPT_NONE = 0;
    public const int E_CNPT_GOLD = 1; // 金币
    public const int E_CNPT_PET = 2; // 宠物
    public const int E_CNPT_EQUIP = 3; // 装备
    public const int E_CNPT_ROLE = 4; // 角色
    public const int E_CNPT_HEART = 5; // 心值
    public const int E_CNPT_DIAMOND = 6; // 钻石
    public const int E_CNPT_KEY = 7; // 钥匙
    public const int E_CNPT_SCORE = 8; // 积分

    public const int CS_MAIL_MAX_MAIL_BATCH_COUNT = 50; // 批量操作的最大数目
    public const int CS_MAIL_MAX_MAIL_COUNT = 200; // 邮件最大数量

    /* macros in macrogroup MAIL_RET_CODE */
    public const int MAIL_RET_CODE_OK = 0; // 正确
    public const int MAIL_RET_CODE_NOT_EXIST = 1; // 数据不存在
    public const int MAIL_RET_GET_DATA_FAILED = 2; // 获取数据失败
    public const int MAIL_RET_DEL_DATA_FAILED = 3; // 删除数据失败
    public const int MAIL_RET_SET_DATA_FAILE = 4; // 设置数据失败
    public const int MAIL_RET_GET_DATA_INVALID = 5; // 数据非法
    public const int MAIL_RET_ADD_ACC_DATA_FAILED = 6; // 增加附件数据失败

    public const int MAX_TASK_NUM = 250; // 最多下发的任务数

    public const int CS_ENCRYPT_BUFF_SIZE = 4096; // 加密buff长度

    /* macros in macrogroup MSG_ENCRYPT_FLAG */
    public const int MSG_ENCRYPT_FLAG_NO = 0; // 不加密
    public const int MSG_ENCRYPT_FLAG_YES = 1; // 加密

    public const int MAX_COMPOSE_EQUIP_NUM = 6; // 装备合成材料最大数量
    public const int MAX_ENHANCE_EQUIP_NUM = 2; // 装备强化材料数量
    public const int CS_EQUIP_ACTION_TYPE_TACK_ON = 1; // 装上
    public const int CS_EQUIP_ACTION_TYPE_TACK_OFF = 2; // 脱下

    public const int MAX_SKILL_REPORT_NUM = 10; // 最大上报技能数
    public const int MAX_PET_REPORT_NUM = 4; // 最大宠物上报数
    public const int MAX_NPC_REPORT_NUM = 3; // 最大NPC上报数
    public const int MAX_SCENE_REPORT_NUM = 4; // 最大场景上报数

    /* macros in macrogroup EnmBattleType */
    public const int ENM_BATTLE_TYPE_PVE = 1; // 闯关模式
    public const int ENM_BATTLE_TYPE_BOSS = 2; // BOSS战
    public const int ENM_BATTLE_TYPE_CHALLENGE = 3; // 名将挑战

    public const int MAX_FRIEND_NUM_ONE_PAGE = 100; // 每页好友最大上限
    public const int MAX_FRIEND_WAIT_ACCEPT_NUM = 30; // 等待接受好友列表人数上限
    public const int MAX_FRIEND_APPLY_NUM = 30; // 已邀请列表人数上限

    public const int MAX_GM_CMD_NAME_LEN = 24; // gm命令名字的最大长度
    public const int MAX_GM_PARAM_STR_LEN = 16; // gm命令参数的字符串的最大长度
    public const int MAX_GM_PARAM_NUM = 8; // gm命令参数的最大个数
    public const int MAX_GM_DISPLAY_MSG_LEN = 64;

}

}
