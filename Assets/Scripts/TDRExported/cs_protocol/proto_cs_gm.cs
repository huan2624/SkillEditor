/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: cb9c5ea3d7cc76d0ec4a17348c3a6864 */

/* creation time: Mon Jun 02 18:05:48 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace net
{


/* 请求执行GM命令 */
public class CSExecGm : tsf4g_csharp_interface
{
    /* public members */
    public byte[] cmd; // 任务类型
    public Int32 paramCnt; // 参数个数
    public byte[][] param; // 任务类型

    /* construct methods */
    public CSExecGm()
    {
        cmd = new byte[24];
        param = new byte[8][];
        for (int param_i = 0;param_i < 8;param_i++)
        {
            param[param_i] = new byte[16];
        }
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CSExecGm.CURRVERSION < cutVer)
        {
            cutVer = CSExecGm.CURRVERSION;
        }

        /* check cutversion */
        if (CSExecGm.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.cmd */
        {
            /* record sizeinfo position */
            Int32 sizePos4cmd = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4cmd = destBuf.getUsedSize();

            Int32 realSize4cmd = TdrTypeUtil.cstrlen(this.cmd);

            if (realSize4cmd >= 24)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.cmd, realSize4cmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.cmd */
            Int32 size4cmd = destBuf.getUsedSize() - beginPos4cmd;
            ret = destBuf.writeUInt32((UInt32)(size4cmd), sizePos4cmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.paramCnt */
        {
            ret = destBuf.writeInt32(this.paramCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.param */
        {
            for (Int32 param_i = 0; param_i < 8; param_i++)
            {
                /* record sizeinfo position */
                Int32 sizePos4param = destBuf.getUsedSize();

                /* reserve space for sizeinfo */
                ret = destBuf.reserve(sizeof(UInt32));
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* record real-data's begin postion in buf */
                Int32 beginPos4param = destBuf.getUsedSize();

                Int32 realSize4param = TdrTypeUtil.cstrlen(this.param[param_i]);

                if (realSize4param >= 16)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }

                /* pack */
                ret = destBuf.writeCString(this.param[param_i], realSize4param);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* gurantee string or wstring terminated with null character */
                ret = destBuf.writeUInt8(0x00);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* set sizeinfo for this.param[param_i] */
                Int32 size4param = destBuf.getUsedSize() - beginPos4param;
                ret = destBuf.writeUInt32((UInt32)(size4param), sizePos4param);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CSExecGm.CURRVERSION < cutVer)
        {
            cutVer = CSExecGm.CURRVERSION;
        }

        /* check cutversion */
        if (CSExecGm.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.cmd */
        {
            /* get sizeinfo for this.cmd */
            UInt32 size4cmd = 0;
            ret = srcBuf.readUInt32(ref size4cmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4cmd > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4cmd > this.cmd.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4cmd)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.cmd, (int)size4cmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.cmd[(int)size4cmd - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4cmd = TdrTypeUtil.cstrlen(this.cmd) + 1;
            if (size4cmd != realSize4cmd)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.paramCnt */
        {
            ret = srcBuf.readInt32(ref this.paramCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.param */
        {
            for (Int32 param_i = 0; param_i < 8; param_i++)
            {
                /* get sizeinfo for this.param[param_i] */
                UInt32 size4param = 0;
                ret = srcBuf.readUInt32(ref size4param);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* check whether data in buffer are enough */
                if ((int)size4param > srcBuf.getLeftSize())
                {
                    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
                }

                /* check whether sizeinfo is valid */
                if ((int)size4param > this.param[param_i].GetLength(0))
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }

                /* string or wstring must contains a null character */
                if (1 > size4param)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
                }

                /* unpack */
                ret = srcBuf.readCString(ref this.param[param_i], (int)size4param);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

                /* check whether string-content is consistent with sizeinfo */
                if (0 != this.param[param_i][(int)size4param - 1])
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
                }
                Int32 realSize4param = TdrTypeUtil.cstrlen(this.param[param_i]) + 1;
                if (size4param != realSize4param)
                {
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CSExecGm.CURRVERSION < cutVer)
        {
            cutVer = CSExecGm.CURRVERSION;
        }

        /* check cutversion */
        if (CSExecGm.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.cmd */
        {
            Int32 size4cmd = 24;

            /* load */
            ret = srcBuf.readCString(ref this.cmd, (int)size4cmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        /* load member: this.paramCnt */
        {
            ret = srcBuf.readInt32(ref this.paramCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.param */
        {
            for (Int32 param_i = 0; param_i < 8; param_i++)
            {
                Int32 size4param = 16;

                /* load */
                ret = srcBuf.readCString(ref this.param[param_i], (int)size4param);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }

            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.cmd */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[cmd]", this.cmd);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.paramCnt */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[paramCnt]", "{0:d}", this.paramCnt);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.param */
        for (Int32 param_i = 0; param_i < 8; param_i++)
        {
            ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[param]", param_i, this.param[param_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 显示GM执行后的文本结果 */
public class CSDisplayGmMsg : tsf4g_csharp_interface
{
    /* public members */
    public byte[] msg;

    /* construct methods */
    public CSDisplayGmMsg()
    {
        msg = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CSDisplayGmMsg.CURRVERSION < cutVer)
        {
            cutVer = CSDisplayGmMsg.CURRVERSION;
        }

        /* check cutversion */
        if (CSDisplayGmMsg.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.msg */
        {
            /* record sizeinfo position */
            Int32 sizePos4msg = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4msg = destBuf.getUsedSize();

            Int32 realSize4msg = TdrTypeUtil.cstrlen(this.msg);

            if (realSize4msg >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.msg, realSize4msg);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* set sizeinfo for this.msg */
            Int32 size4msg = destBuf.getUsedSize() - beginPos4msg;
            ret = destBuf.writeUInt32((UInt32)(size4msg), sizePos4msg);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CSDisplayGmMsg.CURRVERSION < cutVer)
        {
            cutVer = CSDisplayGmMsg.CURRVERSION;
        }

        /* check cutversion */
        if (CSDisplayGmMsg.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.msg */
        {
            /* get sizeinfo for this.msg */
            UInt32 size4msg = 0;
            ret = srcBuf.readUInt32(ref size4msg);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4msg > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4msg > this.msg.GetLength(0))
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4msg)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.msg, (int)size4msg);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.msg[(int)size4msg - 1])
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4msg = TdrTypeUtil.cstrlen(this.msg) + 1;
            if (size4msg != realSize4msg)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CSDisplayGmMsg.CURRVERSION < cutVer)
        {
            cutVer = CSDisplayGmMsg.CURRVERSION;
        }

        /* check cutversion */
        if (CSDisplayGmMsg.BASEVERSION > cutVer)
        {
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.msg */
        {
            Int32 size4msg = 64;

            /* load */
            ret = srcBuf.readCString(ref this.msg, (int)size4msg);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.msg */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[msg]", this.msg);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


}
